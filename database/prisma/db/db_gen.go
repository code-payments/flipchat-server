// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"DATABASE_URL","value":""},"config":null}]`

const schema = `datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider      = "go run github.com/steebchen/prisma-client-go"
  binaryTargets = ["darwin-arm64", "linux-static-x64"]
}

// Uncomment to generate Prisma Client JS (required for the studio)
// (https://github.com/steebchen/prisma-client-go/issues/455)
// generator js {
//   provider = "prisma-client-js"
// }

model User {
  // Fields

  id          String      @id
  displayName String?
  isStaff     Boolean     @default(false)
  publicKeys  PublicKey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  //chats   Member[] @relation("member")
  //addedBy Member[] @relation("addedBy")

  @@map("flipchat_users")
}

model PublicKey {
  // Fields

  key    String @id
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  user User @relation(fields: [userId], references: [id])

  @@map("flipchat_publickeys")
}

model Intent {
  // Fields

  id          String  @id
  isFulfilled Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  // - none -

  @@map("flipchat_intents")
}

model Chat {
  // Fields

  id          String @id
  title       String
  roomNumber  Int?   @unique
  coverCharge BigInt @default(0)
  type        Int    @default(0) // ChatType enum: Unknown: 0, TwoWay: 1, Group: 2

  createdBy      String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastActivityAt DateTime @default(now())

  // Relations

  members Member[]

  @@map("flipchat_chats")
}

model Member {
  // Fields

  chatId    String
  userId    String
  addedById String?

  numUnread     Int     @default(0)
  isMuted       Boolean @default(false) // Has the host muted this member?
  isPushEnabled Boolean @default(true) // Are push notifications enabled for this member?

  hasModPermission  Boolean @default(false) // Is this member a moderator (aka host)?
  hasSendPermission Boolean @default(false) // Can this member send messages?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  chat Chat @relation(fields: [chatId], references: [id])

  //user    User @relation(fields: [userId], references: [id], name: "member")
  //addedBy User? @relation(fields: [addedById], references: [id], name: "addedBy")

  // Constraints

  @@id([chatId, userId])
  @@map("flipchat_members")
}

model Message {
  // Fields

  id       Bytes   @id
  chatId   String
  senderId String?

  version     Int   @default(0) @db.SmallInt // MessageVersion enum: Message: 0, Content: 1
  contentType Int   @default(0) @db.SmallInt // ContentType enum: Unknown: 0, Text: 1, LocalizedAnnouncement: 2, NaclBoxEncryptedContent: 4, ReactionContent: 5, ReplyContent: 6
  content     Bytes // protobuf serialized opaque data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  // Constraints

  @@map("flipchat_messages")
}

model Pointer {
  // Fields

  chatId String
  userId String
  type   Int    @default(0) // PointerType enum: Unknown: 0, Sent: 1, Delivered: 2, Read: 3

  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  // Constraints

  @@id([chatId, userId, type])
  @@map("flipchat_pointers")
}

model PushToken {
  // Fields

  userId       String
  appInstallId String

  token String
  type  Int    @default(0) // PushTokenType enum: Unknown: 0, FCMAndroid: 1, FCMApns: 2

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  // Constraints

  @@id([userId, appInstallId])
  @@map("flipchat_pushtokens")
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "DATABASE_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.PublicKey = publicKeyActions{client: c}
	c.Intent = intentActions{client: c}
	c.Chat = chatActions{client: c}
	c.Member = memberActions{client: c}
	c.Message = messageActions{client: c}
	c.Pointer = pointerActions{client: c}
	c.PushToken = pushTokenActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// PublicKey provides access to CRUD methods.
	PublicKey publicKeyActions
	// Intent provides access to CRUD methods.
	Intent intentActions
	// Chat provides access to CRUD methods.
	Chat chatActions
	// Member provides access to CRUD methods.
	Member memberActions
	// Message provides access to CRUD methods.
	Message messageActions
	// Pointer provides access to CRUD methods.
	Pointer pointerActions
	// PushToken provides access to CRUD methods.
	PushToken pushTokenActions
}

// --- template enums.gotpl ---

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID          UserScalarFieldEnum = "id"
	UserScalarFieldEnumDisplayName UserScalarFieldEnum = "displayName"
	UserScalarFieldEnumIsStaff     UserScalarFieldEnum = "isStaff"
	UserScalarFieldEnumCreatedAt   UserScalarFieldEnum = "createdAt"
	UserScalarFieldEnumUpdatedAt   UserScalarFieldEnum = "updatedAt"
)

type PublicKeyScalarFieldEnum string

const (
	PublicKeyScalarFieldEnumKey       PublicKeyScalarFieldEnum = "key"
	PublicKeyScalarFieldEnumUserID    PublicKeyScalarFieldEnum = "userId"
	PublicKeyScalarFieldEnumCreatedAt PublicKeyScalarFieldEnum = "createdAt"
	PublicKeyScalarFieldEnumUpdatedAt PublicKeyScalarFieldEnum = "updatedAt"
)

type IntentScalarFieldEnum string

const (
	IntentScalarFieldEnumID          IntentScalarFieldEnum = "id"
	IntentScalarFieldEnumIsFulfilled IntentScalarFieldEnum = "isFulfilled"
	IntentScalarFieldEnumCreatedAt   IntentScalarFieldEnum = "createdAt"
	IntentScalarFieldEnumUpdatedAt   IntentScalarFieldEnum = "updatedAt"
)

type ChatScalarFieldEnum string

const (
	ChatScalarFieldEnumID             ChatScalarFieldEnum = "id"
	ChatScalarFieldEnumTitle          ChatScalarFieldEnum = "title"
	ChatScalarFieldEnumRoomNumber     ChatScalarFieldEnum = "roomNumber"
	ChatScalarFieldEnumCoverCharge    ChatScalarFieldEnum = "coverCharge"
	ChatScalarFieldEnumType           ChatScalarFieldEnum = "type"
	ChatScalarFieldEnumCreatedBy      ChatScalarFieldEnum = "createdBy"
	ChatScalarFieldEnumCreatedAt      ChatScalarFieldEnum = "createdAt"
	ChatScalarFieldEnumUpdatedAt      ChatScalarFieldEnum = "updatedAt"
	ChatScalarFieldEnumLastActivityAt ChatScalarFieldEnum = "lastActivityAt"
)

type MemberScalarFieldEnum string

const (
	MemberScalarFieldEnumChatID            MemberScalarFieldEnum = "chatId"
	MemberScalarFieldEnumUserID            MemberScalarFieldEnum = "userId"
	MemberScalarFieldEnumAddedByID         MemberScalarFieldEnum = "addedById"
	MemberScalarFieldEnumNumUnread         MemberScalarFieldEnum = "numUnread"
	MemberScalarFieldEnumIsMuted           MemberScalarFieldEnum = "isMuted"
	MemberScalarFieldEnumIsPushEnabled     MemberScalarFieldEnum = "isPushEnabled"
	MemberScalarFieldEnumHasModPermission  MemberScalarFieldEnum = "hasModPermission"
	MemberScalarFieldEnumHasSendPermission MemberScalarFieldEnum = "hasSendPermission"
	MemberScalarFieldEnumCreatedAt         MemberScalarFieldEnum = "createdAt"
	MemberScalarFieldEnumUpdatedAt         MemberScalarFieldEnum = "updatedAt"
)

type MessageScalarFieldEnum string

const (
	MessageScalarFieldEnumID          MessageScalarFieldEnum = "id"
	MessageScalarFieldEnumChatID      MessageScalarFieldEnum = "chatId"
	MessageScalarFieldEnumSenderID    MessageScalarFieldEnum = "senderId"
	MessageScalarFieldEnumVersion     MessageScalarFieldEnum = "version"
	MessageScalarFieldEnumContentType MessageScalarFieldEnum = "contentType"
	MessageScalarFieldEnumContent     MessageScalarFieldEnum = "content"
	MessageScalarFieldEnumCreatedAt   MessageScalarFieldEnum = "createdAt"
	MessageScalarFieldEnumUpdatedAt   MessageScalarFieldEnum = "updatedAt"
)

type PointerScalarFieldEnum string

const (
	PointerScalarFieldEnumChatID    PointerScalarFieldEnum = "chatId"
	PointerScalarFieldEnumUserID    PointerScalarFieldEnum = "userId"
	PointerScalarFieldEnumType      PointerScalarFieldEnum = "type"
	PointerScalarFieldEnumValue     PointerScalarFieldEnum = "value"
	PointerScalarFieldEnumCreatedAt PointerScalarFieldEnum = "createdAt"
	PointerScalarFieldEnumUpdatedAt PointerScalarFieldEnum = "updatedAt"
)

type PushTokenScalarFieldEnum string

const (
	PushTokenScalarFieldEnumUserID       PushTokenScalarFieldEnum = "userId"
	PushTokenScalarFieldEnumAppInstallID PushTokenScalarFieldEnum = "appInstallId"
	PushTokenScalarFieldEnumToken        PushTokenScalarFieldEnum = "token"
	PushTokenScalarFieldEnumType         PushTokenScalarFieldEnum = "type"
	PushTokenScalarFieldEnumCreatedAt    PushTokenScalarFieldEnum = "createdAt"
	PushTokenScalarFieldEnumUpdatedAt    PushTokenScalarFieldEnum = "updatedAt"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldDisplayName userPrismaFields = "displayName"

const userFieldIsStaff userPrismaFields = "isStaff"

const userFieldPublicKeys userPrismaFields = "publicKeys"

const userFieldCreatedAt userPrismaFields = "createdAt"

const userFieldUpdatedAt userPrismaFields = "updatedAt"

type publicKeyPrismaFields = prismaFields

const publicKeyFieldKey publicKeyPrismaFields = "key"

const publicKeyFieldUserID publicKeyPrismaFields = "userId"

const publicKeyFieldCreatedAt publicKeyPrismaFields = "createdAt"

const publicKeyFieldUpdatedAt publicKeyPrismaFields = "updatedAt"

const publicKeyFieldUser publicKeyPrismaFields = "user"

type intentPrismaFields = prismaFields

const intentFieldID intentPrismaFields = "id"

const intentFieldIsFulfilled intentPrismaFields = "isFulfilled"

const intentFieldCreatedAt intentPrismaFields = "createdAt"

const intentFieldUpdatedAt intentPrismaFields = "updatedAt"

type chatPrismaFields = prismaFields

const chatFieldID chatPrismaFields = "id"

const chatFieldTitle chatPrismaFields = "title"

const chatFieldRoomNumber chatPrismaFields = "roomNumber"

const chatFieldCoverCharge chatPrismaFields = "coverCharge"

const chatFieldType chatPrismaFields = "type"

const chatFieldCreatedBy chatPrismaFields = "createdBy"

const chatFieldCreatedAt chatPrismaFields = "createdAt"

const chatFieldUpdatedAt chatPrismaFields = "updatedAt"

const chatFieldLastActivityAt chatPrismaFields = "lastActivityAt"

const chatFieldMembers chatPrismaFields = "members"

type memberPrismaFields = prismaFields

const memberFieldChatID memberPrismaFields = "chatId"

const memberFieldUserID memberPrismaFields = "userId"

const memberFieldAddedByID memberPrismaFields = "addedById"

const memberFieldNumUnread memberPrismaFields = "numUnread"

const memberFieldIsMuted memberPrismaFields = "isMuted"

const memberFieldIsPushEnabled memberPrismaFields = "isPushEnabled"

const memberFieldHasModPermission memberPrismaFields = "hasModPermission"

const memberFieldHasSendPermission memberPrismaFields = "hasSendPermission"

const memberFieldCreatedAt memberPrismaFields = "createdAt"

const memberFieldUpdatedAt memberPrismaFields = "updatedAt"

const memberFieldChat memberPrismaFields = "chat"

type messagePrismaFields = prismaFields

const messageFieldID messagePrismaFields = "id"

const messageFieldChatID messagePrismaFields = "chatId"

const messageFieldSenderID messagePrismaFields = "senderId"

const messageFieldVersion messagePrismaFields = "version"

const messageFieldContentType messagePrismaFields = "contentType"

const messageFieldContent messagePrismaFields = "content"

const messageFieldCreatedAt messagePrismaFields = "createdAt"

const messageFieldUpdatedAt messagePrismaFields = "updatedAt"

type pointerPrismaFields = prismaFields

const pointerFieldChatID pointerPrismaFields = "chatId"

const pointerFieldUserID pointerPrismaFields = "userId"

const pointerFieldType pointerPrismaFields = "type"

const pointerFieldValue pointerPrismaFields = "value"

const pointerFieldCreatedAt pointerPrismaFields = "createdAt"

const pointerFieldUpdatedAt pointerPrismaFields = "updatedAt"

type pushTokenPrismaFields = prismaFields

const pushTokenFieldUserID pushTokenPrismaFields = "userId"

const pushTokenFieldAppInstallID pushTokenPrismaFields = "appInstallId"

const pushTokenFieldToken pushTokenPrismaFields = "token"

const pushTokenFieldType pushTokenPrismaFields = "type"

const pushTokenFieldCreatedAt pushTokenPrismaFields = "createdAt"

const pushTokenFieldUpdatedAt pushTokenPrismaFields = "updatedAt"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.PublicKey = publicKeyMock{
		mock: m,
	}

	m.Intent = intentMock{
		mock: m,
	}

	m.Chat = chatMock{
		mock: m,
	}

	m.Member = memberMock{
		mock: m,
	}

	m.Message = messageMock{
		mock: m,
	}

	m.Pointer = pointerMock{
		mock: m,
	}

	m.PushToken = pushTokenMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	PublicKey publicKeyMock

	Intent intentMock

	Chat chatMock

	Member memberMock

	Message messageMock

	Pointer pointerMock

	PushToken pushTokenMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type publicKeyMock struct {
	mock *Mock
}

type PublicKeyMockExpectParam interface {
	ExtractQuery() builder.Query
	publicKeyModel()
}

func (m *publicKeyMock) Expect(query PublicKeyMockExpectParam) *publicKeyMockExec {
	return &publicKeyMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type publicKeyMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *publicKeyMockExec) Returns(v PublicKeyModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *publicKeyMockExec) ReturnsMany(v []PublicKeyModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *publicKeyMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type intentMock struct {
	mock *Mock
}

type IntentMockExpectParam interface {
	ExtractQuery() builder.Query
	intentModel()
}

func (m *intentMock) Expect(query IntentMockExpectParam) *intentMockExec {
	return &intentMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type intentMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *intentMockExec) Returns(v IntentModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *intentMockExec) ReturnsMany(v []IntentModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *intentMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type chatMock struct {
	mock *Mock
}

type ChatMockExpectParam interface {
	ExtractQuery() builder.Query
	chatModel()
}

func (m *chatMock) Expect(query ChatMockExpectParam) *chatMockExec {
	return &chatMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type chatMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *chatMockExec) Returns(v ChatModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *chatMockExec) ReturnsMany(v []ChatModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *chatMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type memberMock struct {
	mock *Mock
}

type MemberMockExpectParam interface {
	ExtractQuery() builder.Query
	memberModel()
}

func (m *memberMock) Expect(query MemberMockExpectParam) *memberMockExec {
	return &memberMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type memberMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *memberMockExec) Returns(v MemberModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *memberMockExec) ReturnsMany(v []MemberModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *memberMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type messageMock struct {
	mock *Mock
}

type MessageMockExpectParam interface {
	ExtractQuery() builder.Query
	messageModel()
}

func (m *messageMock) Expect(query MessageMockExpectParam) *messageMockExec {
	return &messageMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type messageMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *messageMockExec) Returns(v MessageModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *messageMockExec) ReturnsMany(v []MessageModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *messageMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type pointerMock struct {
	mock *Mock
}

type PointerMockExpectParam interface {
	ExtractQuery() builder.Query
	pointerModel()
}

func (m *pointerMock) Expect(query PointerMockExpectParam) *pointerMockExec {
	return &pointerMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type pointerMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *pointerMockExec) Returns(v PointerModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *pointerMockExec) ReturnsMany(v []PointerModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *pointerMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type pushTokenMock struct {
	mock *Mock
}

type PushTokenMockExpectParam interface {
	ExtractQuery() builder.Query
	pushTokenModel()
}

func (m *pushTokenMock) Expect(query PushTokenMockExpectParam) *pushTokenMockExec {
	return &pushTokenMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type pushTokenMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *pushTokenMockExec) Returns(v PushTokenModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *pushTokenMockExec) ReturnsMany(v []PushTokenModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *pushTokenMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID          string   `json:"id"`
	DisplayName *string  `json:"displayName,omitempty"`
	IsStaff     bool     `json:"isStaff"`
	CreatedAt   DateTime `json:"createdAt"`
	UpdatedAt   DateTime `json:"updatedAt"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID          RawString   `json:"id"`
	DisplayName *RawString  `json:"displayName,omitempty"`
	IsStaff     RawBoolean  `json:"isStaff"`
	CreatedAt   RawDateTime `json:"createdAt"`
	UpdatedAt   RawDateTime `json:"updatedAt"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	PublicKeys []PublicKeyModel `json:"publicKeys,omitempty"`
}

func (r UserModel) DisplayName() (value String, ok bool) {
	if r.InnerUser.DisplayName == nil {
		return value, false
	}
	return *r.InnerUser.DisplayName, true
}

func (r UserModel) PublicKeys() (value []PublicKeyModel) {
	if r.RelationsUser.PublicKeys == nil {
		panic("attempted to access publicKeys but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.PublicKeys
}

// PublicKeyModel represents the PublicKey model and is a wrapper for accessing fields and methods
type PublicKeyModel struct {
	InnerPublicKey
	RelationsPublicKey
}

// InnerPublicKey holds the actual data
type InnerPublicKey struct {
	Key       string   `json:"key"`
	UserID    string   `json:"userId"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawPublicKeyModel is a struct for PublicKey when used in raw queries
type RawPublicKeyModel struct {
	Key       RawString   `json:"key"`
	UserID    RawString   `json:"userId"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsPublicKey holds the relation data separately
type RelationsPublicKey struct {
	User *UserModel `json:"user,omitempty"`
}

func (r PublicKeyModel) User() (value *UserModel) {
	if r.RelationsPublicKey.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsPublicKey.User
}

// IntentModel represents the Intent model and is a wrapper for accessing fields and methods
type IntentModel struct {
	InnerIntent
	RelationsIntent
}

// InnerIntent holds the actual data
type InnerIntent struct {
	ID          string   `json:"id"`
	IsFulfilled bool     `json:"isFulfilled"`
	CreatedAt   DateTime `json:"createdAt"`
	UpdatedAt   DateTime `json:"updatedAt"`
}

// RawIntentModel is a struct for Intent when used in raw queries
type RawIntentModel struct {
	ID          RawString   `json:"id"`
	IsFulfilled RawBoolean  `json:"isFulfilled"`
	CreatedAt   RawDateTime `json:"createdAt"`
	UpdatedAt   RawDateTime `json:"updatedAt"`
}

// RelationsIntent holds the relation data separately
type RelationsIntent struct {
}

// ChatModel represents the Chat model and is a wrapper for accessing fields and methods
type ChatModel struct {
	InnerChat
	RelationsChat
}

// InnerChat holds the actual data
type InnerChat struct {
	ID             string   `json:"id"`
	Title          string   `json:"title"`
	RoomNumber     *int     `json:"roomNumber,omitempty"`
	CoverCharge    BigInt   `json:"coverCharge"`
	Type           int      `json:"type"`
	CreatedBy      string   `json:"createdBy"`
	CreatedAt      DateTime `json:"createdAt"`
	UpdatedAt      DateTime `json:"updatedAt"`
	LastActivityAt DateTime `json:"lastActivityAt"`
}

// RawChatModel is a struct for Chat when used in raw queries
type RawChatModel struct {
	ID             RawString   `json:"id"`
	Title          RawString   `json:"title"`
	RoomNumber     *RawInt     `json:"roomNumber,omitempty"`
	CoverCharge    RawBigInt   `json:"coverCharge"`
	Type           RawInt      `json:"type"`
	CreatedBy      RawString   `json:"createdBy"`
	CreatedAt      RawDateTime `json:"createdAt"`
	UpdatedAt      RawDateTime `json:"updatedAt"`
	LastActivityAt RawDateTime `json:"lastActivityAt"`
}

// RelationsChat holds the relation data separately
type RelationsChat struct {
	Members []MemberModel `json:"members,omitempty"`
}

func (r ChatModel) RoomNumber() (value Int, ok bool) {
	if r.InnerChat.RoomNumber == nil {
		return value, false
	}
	return *r.InnerChat.RoomNumber, true
}

func (r ChatModel) Members() (value []MemberModel) {
	if r.RelationsChat.Members == nil {
		panic("attempted to access members but did not fetch it using the .With() syntax")
	}
	return r.RelationsChat.Members
}

// MemberModel represents the Member model and is a wrapper for accessing fields and methods
type MemberModel struct {
	InnerMember
	RelationsMember
}

// InnerMember holds the actual data
type InnerMember struct {
	ChatID            string   `json:"chatId"`
	UserID            string   `json:"userId"`
	AddedByID         *string  `json:"addedById,omitempty"`
	NumUnread         int      `json:"numUnread"`
	IsMuted           bool     `json:"isMuted"`
	IsPushEnabled     bool     `json:"isPushEnabled"`
	HasModPermission  bool     `json:"hasModPermission"`
	HasSendPermission bool     `json:"hasSendPermission"`
	CreatedAt         DateTime `json:"createdAt"`
	UpdatedAt         DateTime `json:"updatedAt"`
}

// RawMemberModel is a struct for Member when used in raw queries
type RawMemberModel struct {
	ChatID            RawString   `json:"chatId"`
	UserID            RawString   `json:"userId"`
	AddedByID         *RawString  `json:"addedById,omitempty"`
	NumUnread         RawInt      `json:"numUnread"`
	IsMuted           RawBoolean  `json:"isMuted"`
	IsPushEnabled     RawBoolean  `json:"isPushEnabled"`
	HasModPermission  RawBoolean  `json:"hasModPermission"`
	HasSendPermission RawBoolean  `json:"hasSendPermission"`
	CreatedAt         RawDateTime `json:"createdAt"`
	UpdatedAt         RawDateTime `json:"updatedAt"`
}

// RelationsMember holds the relation data separately
type RelationsMember struct {
	Chat *ChatModel `json:"chat,omitempty"`
}

func (r MemberModel) AddedByID() (value String, ok bool) {
	if r.InnerMember.AddedByID == nil {
		return value, false
	}
	return *r.InnerMember.AddedByID, true
}

func (r MemberModel) Chat() (value *ChatModel) {
	if r.RelationsMember.Chat == nil {
		panic("attempted to access chat but did not fetch it using the .With() syntax")
	}
	return r.RelationsMember.Chat
}

// MessageModel represents the Message model and is a wrapper for accessing fields and methods
type MessageModel struct {
	InnerMessage
	RelationsMessage
}

// InnerMessage holds the actual data
type InnerMessage struct {
	ID          Bytes    `json:"id"`
	ChatID      string   `json:"chatId"`
	SenderID    *string  `json:"senderId,omitempty"`
	Version     int      `json:"version"`
	ContentType int      `json:"contentType"`
	Content     Bytes    `json:"content"`
	CreatedAt   DateTime `json:"createdAt"`
	UpdatedAt   DateTime `json:"updatedAt"`
}

// RawMessageModel is a struct for Message when used in raw queries
type RawMessageModel struct {
	ID          RawBytes    `json:"id"`
	ChatID      RawString   `json:"chatId"`
	SenderID    *RawString  `json:"senderId,omitempty"`
	Version     RawInt      `json:"version"`
	ContentType RawInt      `json:"contentType"`
	Content     RawBytes    `json:"content"`
	CreatedAt   RawDateTime `json:"createdAt"`
	UpdatedAt   RawDateTime `json:"updatedAt"`
}

// RelationsMessage holds the relation data separately
type RelationsMessage struct {
}

func (r MessageModel) SenderID() (value String, ok bool) {
	if r.InnerMessage.SenderID == nil {
		return value, false
	}
	return *r.InnerMessage.SenderID, true
}

// PointerModel represents the Pointer model and is a wrapper for accessing fields and methods
type PointerModel struct {
	InnerPointer
	RelationsPointer
}

// InnerPointer holds the actual data
type InnerPointer struct {
	ChatID    string   `json:"chatId"`
	UserID    string   `json:"userId"`
	Type      int      `json:"type"`
	Value     string   `json:"value"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawPointerModel is a struct for Pointer when used in raw queries
type RawPointerModel struct {
	ChatID    RawString   `json:"chatId"`
	UserID    RawString   `json:"userId"`
	Type      RawInt      `json:"type"`
	Value     RawString   `json:"value"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsPointer holds the relation data separately
type RelationsPointer struct {
}

// PushTokenModel represents the PushToken model and is a wrapper for accessing fields and methods
type PushTokenModel struct {
	InnerPushToken
	RelationsPushToken
}

// InnerPushToken holds the actual data
type InnerPushToken struct {
	UserID       string   `json:"userId"`
	AppInstallID string   `json:"appInstallId"`
	Token        string   `json:"token"`
	Type         int      `json:"type"`
	CreatedAt    DateTime `json:"createdAt"`
	UpdatedAt    DateTime `json:"updatedAt"`
}

// RawPushTokenModel is a struct for PushToken when used in raw queries
type RawPushTokenModel struct {
	UserID       RawString   `json:"userId"`
	AppInstallID RawString   `json:"appInstallId"`
	Token        RawString   `json:"token"`
	Type         RawInt      `json:"type"`
	CreatedAt    RawDateTime `json:"createdAt"`
	UpdatedAt    RawDateTime `json:"updatedAt"`
}

// RelationsPushToken holds the relation data separately
type RelationsPushToken struct {
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDString

	// DisplayName
	//
	// @optional
	DisplayName userQueryDisplayNameString

	// IsStaff
	//
	// @required
	IsStaff userQueryIsStaffBoolean

	PublicKeys userQueryPublicKeysRelations

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userQueryUpdatedAtDateTime
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDString struct{}

// Set the required value of ID
func (r userQueryIDString) Set(value string) userWithPrismaIDSetParam {

	return userWithPrismaIDSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDString) SetIfPresent(value *String) userWithPrismaIDSetParam {
	if value == nil {
		return userWithPrismaIDSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIDString) Equals(value string) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EqualsIfPresent(value *string) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryIDString) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryDisplayNameString struct{}

// Set the optional value of DisplayName
func (r userQueryDisplayNameString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "displayName",
			Value: value,
		},
	}

}

// Set the optional value of DisplayName dynamically
func (r userQueryDisplayNameString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of DisplayName dynamically
func (r userQueryDisplayNameString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "displayName",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryDisplayNameString) Equals(value string) userWithPrismaDisplayNameEqualsParam {

	return userWithPrismaDisplayNameEqualsParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) EqualsIfPresent(value *string) userWithPrismaDisplayNameEqualsParam {
	if value == nil {
		return userWithPrismaDisplayNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryDisplayNameString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "displayName",
			Value: direction,
		},
	}
}

func (r userQueryDisplayNameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "displayName",
			Value: cursor,
		},
	}
}

func (r userQueryDisplayNameString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryDisplayNameString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryDisplayNameString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryDisplayNameString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryDisplayNameString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryDisplayNameString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryDisplayNameString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryDisplayNameString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryDisplayNameString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryDisplayNameString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryDisplayNameString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryDisplayNameString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryDisplayNameString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryDisplayNameString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryDisplayNameString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "displayName",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryDisplayNameString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryDisplayNameString) Field() userPrismaFields {
	return userFieldDisplayName
}

// base struct
type userQueryIsStaffBoolean struct{}

// Set the required value of IsStaff
func (r userQueryIsStaffBoolean) Set(value bool) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "isStaff",
			Value: value,
		},
	}

}

// Set the optional value of IsStaff dynamically
func (r userQueryIsStaffBoolean) SetIfPresent(value *Boolean) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIsStaffBoolean) Equals(value bool) userWithPrismaIsStaffEqualsParam {

	return userWithPrismaIsStaffEqualsParam{
		data: builder.Field{
			Name: "isStaff",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIsStaffBoolean) EqualsIfPresent(value *bool) userWithPrismaIsStaffEqualsParam {
	if value == nil {
		return userWithPrismaIsStaffEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIsStaffBoolean) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "isStaff",
			Value: direction,
		},
	}
}

func (r userQueryIsStaffBoolean) Cursor(cursor bool) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "isStaff",
			Value: cursor,
		},
	}
}

func (r userQueryIsStaffBoolean) Field() userPrismaFields {
	return userFieldIsStaff
}

// base struct
type userQueryPublicKeysPublicKey struct{}

type userQueryPublicKeysRelations struct{}

// User -> PublicKeys
//
// @relation
// @required
func (userQueryPublicKeysRelations) Some(
	params ...PublicKeyWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "publicKeys",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> PublicKeys
//
// @relation
// @required
func (userQueryPublicKeysRelations) Every(
	params ...PublicKeyWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "publicKeys",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> PublicKeys
//
// @relation
// @required
func (userQueryPublicKeysRelations) None(
	params ...PublicKeyWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "publicKeys",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryPublicKeysRelations) Fetch(

	params ...PublicKeyWhereParam,

) userToPublicKeysFindMany {
	var v userToPublicKeysFindMany

	v.query.Operation = "query"
	v.query.Method = "publicKeys"
	v.query.Outputs = publicKeyOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryPublicKeysRelations) Link(
	params ...PublicKeyWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "publicKeys",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryPublicKeysRelations) Unlink(
	params ...PublicKeyWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "publicKeys",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryPublicKeysPublicKey) Field() userPrismaFields {
	return userFieldPublicKeys
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParam {

	return userWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryCreatedAtDateTime) Field() userPrismaFields {
	return userFieldCreatedAt
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParam {

	return userWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUpdatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUpdatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUpdatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUpdatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUpdatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUpdatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUpdatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryUpdatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryUpdatedAtDateTime) Field() userPrismaFields {
	return userFieldUpdatedAt
}

// PublicKey acts as a namespaces to access query methods for the PublicKey model
var PublicKey = publicKeyQuery{}

// publicKeyQuery exposes query functions for the publicKey model
type publicKeyQuery struct {

	// Key
	//
	// @required
	Key publicKeyQueryKeyString

	// UserID
	//
	// @required
	UserID publicKeyQueryUserIDString

	// CreatedAt
	//
	// @required
	CreatedAt publicKeyQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt publicKeyQueryUpdatedAtDateTime

	User publicKeyQueryUserRelations
}

func (publicKeyQuery) Not(params ...PublicKeyWhereParam) publicKeyDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicKeyDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (publicKeyQuery) Or(params ...PublicKeyWhereParam) publicKeyDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicKeyDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (publicKeyQuery) And(params ...PublicKeyWhereParam) publicKeyDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicKeyDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type publicKeyQueryKeyString struct{}

// Set the required value of Key
func (r publicKeyQueryKeyString) Set(value string) publicKeyWithPrismaKeySetParam {

	return publicKeyWithPrismaKeySetParam{
		data: builder.Field{
			Name:  "key",
			Value: value,
		},
	}

}

// Set the optional value of Key dynamically
func (r publicKeyQueryKeyString) SetIfPresent(value *String) publicKeyWithPrismaKeySetParam {
	if value == nil {
		return publicKeyWithPrismaKeySetParam{}
	}

	return r.Set(*value)
}

func (r publicKeyQueryKeyString) Equals(value string) publicKeyWithPrismaKeyEqualsUniqueParam {

	return publicKeyWithPrismaKeyEqualsUniqueParam{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) EqualsIfPresent(value *string) publicKeyWithPrismaKeyEqualsUniqueParam {
	if value == nil {
		return publicKeyWithPrismaKeyEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r publicKeyQueryKeyString) Order(direction SortOrder) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name:  "key",
			Value: direction,
		},
	}
}

func (r publicKeyQueryKeyString) Cursor(cursor string) publicKeyCursorParam {
	return publicKeyCursorParam{
		data: builder.Field{
			Name:  "key",
			Value: cursor,
		},
	}
}

func (r publicKeyQueryKeyString) In(value []string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) InIfPresent(value []string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.In(value)
}

func (r publicKeyQueryKeyString) NotIn(value []string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) NotInIfPresent(value []string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.NotIn(value)
}

func (r publicKeyQueryKeyString) Lt(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) LtIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Lt(*value)
}

func (r publicKeyQueryKeyString) Lte(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) LteIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Lte(*value)
}

func (r publicKeyQueryKeyString) Gt(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) GtIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Gt(*value)
}

func (r publicKeyQueryKeyString) Gte(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) GteIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Gte(*value)
}

func (r publicKeyQueryKeyString) Contains(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) ContainsIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Contains(*value)
}

func (r publicKeyQueryKeyString) StartsWith(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) StartsWithIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r publicKeyQueryKeyString) EndsWith(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) EndsWithIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r publicKeyQueryKeyString) Mode(value QueryMode) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) ModeIfPresent(value *QueryMode) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Mode(*value)
}

func (r publicKeyQueryKeyString) Not(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryKeyString) NotIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r publicKeyQueryKeyString) HasPrefix(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r publicKeyQueryKeyString) HasPrefixIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r publicKeyQueryKeyString) HasSuffix(value string) publicKeyParamUnique {
	return publicKeyParamUnique{
		data: builder.Field{
			Name: "key",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r publicKeyQueryKeyString) HasSuffixIfPresent(value *string) publicKeyParamUnique {
	if value == nil {
		return publicKeyParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r publicKeyQueryKeyString) Field() publicKeyPrismaFields {
	return publicKeyFieldKey
}

// base struct
type publicKeyQueryUserIDString struct{}

// Set the required value of UserID
func (r publicKeyQueryUserIDString) Set(value string) publicKeySetParam {

	return publicKeySetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r publicKeyQueryUserIDString) SetIfPresent(value *String) publicKeySetParam {
	if value == nil {
		return publicKeySetParam{}
	}

	return r.Set(*value)
}

func (r publicKeyQueryUserIDString) Equals(value string) publicKeyWithPrismaUserIDEqualsParam {

	return publicKeyWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) EqualsIfPresent(value *string) publicKeyWithPrismaUserIDEqualsParam {
	if value == nil {
		return publicKeyWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicKeyQueryUserIDString) Order(direction SortOrder) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r publicKeyQueryUserIDString) Cursor(cursor string) publicKeyCursorParam {
	return publicKeyCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r publicKeyQueryUserIDString) In(value []string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) InIfPresent(value []string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.In(value)
}

func (r publicKeyQueryUserIDString) NotIn(value []string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) NotInIfPresent(value []string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicKeyQueryUserIDString) Lt(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) LtIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicKeyQueryUserIDString) Lte(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) LteIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicKeyQueryUserIDString) Gt(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) GtIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicKeyQueryUserIDString) Gte(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) GteIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicKeyQueryUserIDString) Contains(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) ContainsIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Contains(*value)
}

func (r publicKeyQueryUserIDString) StartsWith(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) StartsWithIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r publicKeyQueryUserIDString) EndsWith(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) EndsWithIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r publicKeyQueryUserIDString) Mode(value QueryMode) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) ModeIfPresent(value *QueryMode) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Mode(*value)
}

func (r publicKeyQueryUserIDString) Not(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUserIDString) NotIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r publicKeyQueryUserIDString) HasPrefix(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r publicKeyQueryUserIDString) HasPrefixIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r publicKeyQueryUserIDString) HasSuffix(value string) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r publicKeyQueryUserIDString) HasSuffixIfPresent(value *string) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r publicKeyQueryUserIDString) Field() publicKeyPrismaFields {
	return publicKeyFieldUserID
}

// base struct
type publicKeyQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r publicKeyQueryCreatedAtDateTime) Set(value DateTime) publicKeySetParam {

	return publicKeySetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r publicKeyQueryCreatedAtDateTime) SetIfPresent(value *DateTime) publicKeySetParam {
	if value == nil {
		return publicKeySetParam{}
	}

	return r.Set(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Equals(value DateTime) publicKeyWithPrismaCreatedAtEqualsParam {

	return publicKeyWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) publicKeyWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return publicKeyWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Order(direction SortOrder) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) Cursor(cursor DateTime) publicKeyCursorParam {
	return publicKeyCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) In(value []DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) InIfPresent(value []DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.In(value)
}

func (r publicKeyQueryCreatedAtDateTime) NotIn(value []DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicKeyQueryCreatedAtDateTime) Lt(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) LtIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Lte(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) LteIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Gt(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) GtIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Gte(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) GteIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Not(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryCreatedAtDateTime) NotIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r publicKeyQueryCreatedAtDateTime) Before(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r publicKeyQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r publicKeyQueryCreatedAtDateTime) After(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r publicKeyQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r publicKeyQueryCreatedAtDateTime) BeforeEquals(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r publicKeyQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r publicKeyQueryCreatedAtDateTime) AfterEquals(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r publicKeyQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r publicKeyQueryCreatedAtDateTime) Field() publicKeyPrismaFields {
	return publicKeyFieldCreatedAt
}

// base struct
type publicKeyQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r publicKeyQueryUpdatedAtDateTime) Set(value DateTime) publicKeySetParam {

	return publicKeySetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r publicKeyQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) publicKeySetParam {
	if value == nil {
		return publicKeySetParam{}
	}

	return r.Set(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Equals(value DateTime) publicKeyWithPrismaUpdatedAtEqualsParam {

	return publicKeyWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) publicKeyWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return publicKeyWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Order(direction SortOrder) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) Cursor(cursor DateTime) publicKeyCursorParam {
	return publicKeyCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) In(value []DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) InIfPresent(value []DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.In(value)
}

func (r publicKeyQueryUpdatedAtDateTime) NotIn(value []DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicKeyQueryUpdatedAtDateTime) Lt(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Lte(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Gt(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Gte(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Not(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicKeyQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r publicKeyQueryUpdatedAtDateTime) Before(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r publicKeyQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r publicKeyQueryUpdatedAtDateTime) After(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r publicKeyQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r publicKeyQueryUpdatedAtDateTime) BeforeEquals(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r publicKeyQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r publicKeyQueryUpdatedAtDateTime) AfterEquals(value DateTime) publicKeyDefaultParam {
	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r publicKeyQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) publicKeyDefaultParam {
	if value == nil {
		return publicKeyDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r publicKeyQueryUpdatedAtDateTime) Field() publicKeyPrismaFields {
	return publicKeyFieldUpdatedAt
}

// base struct
type publicKeyQueryUserUser struct{}

type publicKeyQueryUserRelations struct{}

// PublicKey -> User
//
// @relation
// @required
func (publicKeyQueryUserRelations) Where(
	params ...UserWhereParam,
) publicKeyDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicKeyDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (publicKeyQueryUserRelations) Fetch() publicKeyToUserFindUnique {
	var v publicKeyToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r publicKeyQueryUserRelations) Link(
	params UserWhereParam,
) publicKeyWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return publicKeyWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return publicKeyWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r publicKeyQueryUserRelations) Unlink() publicKeyWithPrismaUserSetParam {
	var v publicKeyWithPrismaUserSetParam

	v = publicKeyWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r publicKeyQueryUserUser) Field() publicKeyPrismaFields {
	return publicKeyFieldUser
}

// Intent acts as a namespaces to access query methods for the Intent model
var Intent = intentQuery{}

// intentQuery exposes query functions for the intent model
type intentQuery struct {

	// ID
	//
	// @required
	ID intentQueryIDString

	// IsFulfilled
	//
	// @required
	IsFulfilled intentQueryIsFulfilledBoolean

	// CreatedAt
	//
	// @required
	CreatedAt intentQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt intentQueryUpdatedAtDateTime
}

func (intentQuery) Not(params ...IntentWhereParam) intentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return intentDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (intentQuery) Or(params ...IntentWhereParam) intentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return intentDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (intentQuery) And(params ...IntentWhereParam) intentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return intentDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type intentQueryIDString struct{}

// Set the required value of ID
func (r intentQueryIDString) Set(value string) intentWithPrismaIDSetParam {

	return intentWithPrismaIDSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r intentQueryIDString) SetIfPresent(value *String) intentWithPrismaIDSetParam {
	if value == nil {
		return intentWithPrismaIDSetParam{}
	}

	return r.Set(*value)
}

func (r intentQueryIDString) Equals(value string) intentWithPrismaIDEqualsUniqueParam {

	return intentWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) EqualsIfPresent(value *string) intentWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return intentWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r intentQueryIDString) Order(direction SortOrder) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r intentQueryIDString) Cursor(cursor string) intentCursorParam {
	return intentCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r intentQueryIDString) In(value []string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) InIfPresent(value []string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.In(value)
}

func (r intentQueryIDString) NotIn(value []string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) NotInIfPresent(value []string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.NotIn(value)
}

func (r intentQueryIDString) Lt(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) LtIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Lt(*value)
}

func (r intentQueryIDString) Lte(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) LteIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Lte(*value)
}

func (r intentQueryIDString) Gt(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) GtIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Gt(*value)
}

func (r intentQueryIDString) Gte(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) GteIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Gte(*value)
}

func (r intentQueryIDString) Contains(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) ContainsIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Contains(*value)
}

func (r intentQueryIDString) StartsWith(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) StartsWithIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r intentQueryIDString) EndsWith(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) EndsWithIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r intentQueryIDString) Mode(value QueryMode) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) ModeIfPresent(value *QueryMode) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Mode(*value)
}

func (r intentQueryIDString) Not(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIDString) NotIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r intentQueryIDString) HasPrefix(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r intentQueryIDString) HasPrefixIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r intentQueryIDString) HasSuffix(value string) intentParamUnique {
	return intentParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r intentQueryIDString) HasSuffixIfPresent(value *string) intentParamUnique {
	if value == nil {
		return intentParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r intentQueryIDString) Field() intentPrismaFields {
	return intentFieldID
}

// base struct
type intentQueryIsFulfilledBoolean struct{}

// Set the required value of IsFulfilled
func (r intentQueryIsFulfilledBoolean) Set(value bool) intentWithPrismaIsFulfilledSetParam {

	return intentWithPrismaIsFulfilledSetParam{
		data: builder.Field{
			Name:  "isFulfilled",
			Value: value,
		},
	}

}

// Set the optional value of IsFulfilled dynamically
func (r intentQueryIsFulfilledBoolean) SetIfPresent(value *Boolean) intentWithPrismaIsFulfilledSetParam {
	if value == nil {
		return intentWithPrismaIsFulfilledSetParam{}
	}

	return r.Set(*value)
}

func (r intentQueryIsFulfilledBoolean) Equals(value bool) intentWithPrismaIsFulfilledEqualsParam {

	return intentWithPrismaIsFulfilledEqualsParam{
		data: builder.Field{
			Name: "isFulfilled",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryIsFulfilledBoolean) EqualsIfPresent(value *bool) intentWithPrismaIsFulfilledEqualsParam {
	if value == nil {
		return intentWithPrismaIsFulfilledEqualsParam{}
	}
	return r.Equals(*value)
}

func (r intentQueryIsFulfilledBoolean) Order(direction SortOrder) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name:  "isFulfilled",
			Value: direction,
		},
	}
}

func (r intentQueryIsFulfilledBoolean) Cursor(cursor bool) intentCursorParam {
	return intentCursorParam{
		data: builder.Field{
			Name:  "isFulfilled",
			Value: cursor,
		},
	}
}

func (r intentQueryIsFulfilledBoolean) Field() intentPrismaFields {
	return intentFieldIsFulfilled
}

// base struct
type intentQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r intentQueryCreatedAtDateTime) Set(value DateTime) intentSetParam {

	return intentSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r intentQueryCreatedAtDateTime) SetIfPresent(value *DateTime) intentSetParam {
	if value == nil {
		return intentSetParam{}
	}

	return r.Set(*value)
}

func (r intentQueryCreatedAtDateTime) Equals(value DateTime) intentWithPrismaCreatedAtEqualsParam {

	return intentWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) intentWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return intentWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r intentQueryCreatedAtDateTime) Order(direction SortOrder) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r intentQueryCreatedAtDateTime) Cursor(cursor DateTime) intentCursorParam {
	return intentCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r intentQueryCreatedAtDateTime) In(value []DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) InIfPresent(value []DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.In(value)
}

func (r intentQueryCreatedAtDateTime) NotIn(value []DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r intentQueryCreatedAtDateTime) Lt(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) LtIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r intentQueryCreatedAtDateTime) Lte(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) LteIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r intentQueryCreatedAtDateTime) Gt(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) GtIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r intentQueryCreatedAtDateTime) Gte(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) GteIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r intentQueryCreatedAtDateTime) Not(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryCreatedAtDateTime) NotIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r intentQueryCreatedAtDateTime) Before(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r intentQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r intentQueryCreatedAtDateTime) After(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r intentQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r intentQueryCreatedAtDateTime) BeforeEquals(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r intentQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r intentQueryCreatedAtDateTime) AfterEquals(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r intentQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r intentQueryCreatedAtDateTime) Field() intentPrismaFields {
	return intentFieldCreatedAt
}

// base struct
type intentQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r intentQueryUpdatedAtDateTime) Set(value DateTime) intentSetParam {

	return intentSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r intentQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) intentSetParam {
	if value == nil {
		return intentSetParam{}
	}

	return r.Set(*value)
}

func (r intentQueryUpdatedAtDateTime) Equals(value DateTime) intentWithPrismaUpdatedAtEqualsParam {

	return intentWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) intentWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return intentWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r intentQueryUpdatedAtDateTime) Order(direction SortOrder) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r intentQueryUpdatedAtDateTime) Cursor(cursor DateTime) intentCursorParam {
	return intentCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r intentQueryUpdatedAtDateTime) In(value []DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) InIfPresent(value []DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.In(value)
}

func (r intentQueryUpdatedAtDateTime) NotIn(value []DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r intentQueryUpdatedAtDateTime) Lt(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r intentQueryUpdatedAtDateTime) Lte(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r intentQueryUpdatedAtDateTime) Gt(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r intentQueryUpdatedAtDateTime) Gte(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r intentQueryUpdatedAtDateTime) Not(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r intentQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r intentQueryUpdatedAtDateTime) Before(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r intentQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r intentQueryUpdatedAtDateTime) After(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r intentQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r intentQueryUpdatedAtDateTime) BeforeEquals(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r intentQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r intentQueryUpdatedAtDateTime) AfterEquals(value DateTime) intentDefaultParam {
	return intentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r intentQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) intentDefaultParam {
	if value == nil {
		return intentDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r intentQueryUpdatedAtDateTime) Field() intentPrismaFields {
	return intentFieldUpdatedAt
}

// Chat acts as a namespaces to access query methods for the Chat model
var Chat = chatQuery{}

// chatQuery exposes query functions for the chat model
type chatQuery struct {

	// ID
	//
	// @required
	ID chatQueryIDString

	// Title
	//
	// @required
	Title chatQueryTitleString

	// RoomNumber
	//
	// @optional
	// @unique
	RoomNumber chatQueryRoomNumberInt

	// CoverCharge
	//
	// @required
	CoverCharge chatQueryCoverChargeBigInt

	// Type
	//
	// @required
	Type chatQueryTypeInt

	// CreatedBy
	//
	// @required
	CreatedBy chatQueryCreatedByString

	// CreatedAt
	//
	// @required
	CreatedAt chatQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt chatQueryUpdatedAtDateTime

	// LastActivityAt
	//
	// @required
	LastActivityAt chatQueryLastActivityAtDateTime

	Members chatQueryMembersRelations
}

func (chatQuery) Not(params ...ChatWhereParam) chatDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (chatQuery) Or(params ...ChatWhereParam) chatDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (chatQuery) And(params ...ChatWhereParam) chatDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type chatQueryIDString struct{}

// Set the required value of ID
func (r chatQueryIDString) Set(value string) chatWithPrismaIDSetParam {

	return chatWithPrismaIDSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r chatQueryIDString) SetIfPresent(value *String) chatWithPrismaIDSetParam {
	if value == nil {
		return chatWithPrismaIDSetParam{}
	}

	return r.Set(*value)
}

func (r chatQueryIDString) Equals(value string) chatWithPrismaIDEqualsUniqueParam {

	return chatWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) EqualsIfPresent(value *string) chatWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return chatWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryIDString) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r chatQueryIDString) Cursor(cursor string) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r chatQueryIDString) In(value []string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) InIfPresent(value []string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.In(value)
}

func (r chatQueryIDString) NotIn(value []string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) NotInIfPresent(value []string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.NotIn(value)
}

func (r chatQueryIDString) Lt(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) LtIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Lt(*value)
}

func (r chatQueryIDString) Lte(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) LteIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Lte(*value)
}

func (r chatQueryIDString) Gt(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) GtIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Gt(*value)
}

func (r chatQueryIDString) Gte(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) GteIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Gte(*value)
}

func (r chatQueryIDString) Contains(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) ContainsIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Contains(*value)
}

func (r chatQueryIDString) StartsWith(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) StartsWithIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r chatQueryIDString) EndsWith(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) EndsWithIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r chatQueryIDString) Mode(value QueryMode) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) ModeIfPresent(value *QueryMode) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Mode(*value)
}

func (r chatQueryIDString) Not(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryIDString) NotIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r chatQueryIDString) HasPrefix(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r chatQueryIDString) HasPrefixIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r chatQueryIDString) HasSuffix(value string) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r chatQueryIDString) HasSuffixIfPresent(value *string) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r chatQueryIDString) Field() chatPrismaFields {
	return chatFieldID
}

// base struct
type chatQueryTitleString struct{}

// Set the required value of Title
func (r chatQueryTitleString) Set(value string) chatWithPrismaTitleSetParam {

	return chatWithPrismaTitleSetParam{
		data: builder.Field{
			Name:  "title",
			Value: value,
		},
	}

}

// Set the optional value of Title dynamically
func (r chatQueryTitleString) SetIfPresent(value *String) chatWithPrismaTitleSetParam {
	if value == nil {
		return chatWithPrismaTitleSetParam{}
	}

	return r.Set(*value)
}

func (r chatQueryTitleString) Equals(value string) chatWithPrismaTitleEqualsParam {

	return chatWithPrismaTitleEqualsParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) EqualsIfPresent(value *string) chatWithPrismaTitleEqualsParam {
	if value == nil {
		return chatWithPrismaTitleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryTitleString) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "title",
			Value: direction,
		},
	}
}

func (r chatQueryTitleString) Cursor(cursor string) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "title",
			Value: cursor,
		},
	}
}

func (r chatQueryTitleString) In(value []string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) InIfPresent(value []string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryTitleString) NotIn(value []string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) NotInIfPresent(value []string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryTitleString) Lt(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) LtIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryTitleString) Lte(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) LteIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryTitleString) Gt(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) GtIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryTitleString) Gte(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) GteIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryTitleString) Contains(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) ContainsIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Contains(*value)
}

func (r chatQueryTitleString) StartsWith(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) StartsWithIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r chatQueryTitleString) EndsWith(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) EndsWithIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r chatQueryTitleString) Mode(value QueryMode) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) ModeIfPresent(value *QueryMode) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Mode(*value)
}

func (r chatQueryTitleString) Not(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTitleString) NotIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r chatQueryTitleString) HasPrefix(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r chatQueryTitleString) HasPrefixIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r chatQueryTitleString) HasSuffix(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r chatQueryTitleString) HasSuffixIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r chatQueryTitleString) Field() chatPrismaFields {
	return chatFieldTitle
}

// base struct
type chatQueryRoomNumberInt struct{}

// Set the optional value of RoomNumber
func (r chatQueryRoomNumberInt) Set(value int) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "roomNumber",
			Value: value,
		},
	}

}

// Set the optional value of RoomNumber dynamically
func (r chatQueryRoomNumberInt) SetIfPresent(value *Int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of RoomNumber dynamically
func (r chatQueryRoomNumberInt) SetOptional(value *Int) chatSetParam {
	if value == nil {

		var v *int
		return chatSetParam{
			data: builder.Field{
				Name:  "roomNumber",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of RoomNumber
func (r chatQueryRoomNumberInt) Increment(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) IncrementIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of RoomNumber
func (r chatQueryRoomNumberInt) Decrement(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) DecrementIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of RoomNumber
func (r chatQueryRoomNumberInt) Multiply(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) MultiplyIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of RoomNumber
func (r chatQueryRoomNumberInt) Divide(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) DivideIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Divide(*value)
}

func (r chatQueryRoomNumberInt) Equals(value int) chatWithPrismaRoomNumberEqualsUniqueParam {

	return chatWithPrismaRoomNumberEqualsUniqueParam{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) EqualsIfPresent(value *int) chatWithPrismaRoomNumberEqualsUniqueParam {
	if value == nil {
		return chatWithPrismaRoomNumberEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryRoomNumberInt) EqualsOptional(value *Int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) IsNull() chatParamUnique {
	var str *string = nil
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "roomNumber",
			Value: direction,
		},
	}
}

func (r chatQueryRoomNumberInt) Cursor(cursor int) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "roomNumber",
			Value: cursor,
		},
	}
}

func (r chatQueryRoomNumberInt) In(value []int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) InIfPresent(value []int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.In(value)
}

func (r chatQueryRoomNumberInt) NotIn(value []int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) NotInIfPresent(value []int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.NotIn(value)
}

func (r chatQueryRoomNumberInt) Lt(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) LtIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Lt(*value)
}

func (r chatQueryRoomNumberInt) Lte(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) LteIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Lte(*value)
}

func (r chatQueryRoomNumberInt) Gt(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) GtIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Gt(*value)
}

func (r chatQueryRoomNumberInt) Gte(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) GteIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Gte(*value)
}

func (r chatQueryRoomNumberInt) Not(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryRoomNumberInt) NotIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r chatQueryRoomNumberInt) LT(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r chatQueryRoomNumberInt) LTIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r chatQueryRoomNumberInt) LTE(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r chatQueryRoomNumberInt) LTEIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r chatQueryRoomNumberInt) GT(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r chatQueryRoomNumberInt) GTIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r chatQueryRoomNumberInt) GTE(value int) chatParamUnique {
	return chatParamUnique{
		data: builder.Field{
			Name: "roomNumber",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r chatQueryRoomNumberInt) GTEIfPresent(value *int) chatParamUnique {
	if value == nil {
		return chatParamUnique{}
	}
	return r.GTE(*value)
}

func (r chatQueryRoomNumberInt) Field() chatPrismaFields {
	return chatFieldRoomNumber
}

// base struct
type chatQueryCoverChargeBigInt struct{}

// Set the required value of CoverCharge
func (r chatQueryCoverChargeBigInt) Set(value BigInt) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "coverCharge",
			Value: value,
		},
	}

}

// Set the optional value of CoverCharge dynamically
func (r chatQueryCoverChargeBigInt) SetIfPresent(value *BigInt) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of CoverCharge
func (r chatQueryCoverChargeBigInt) Increment(value BigInt) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) IncrementIfPresent(value *BigInt) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of CoverCharge
func (r chatQueryCoverChargeBigInt) Decrement(value BigInt) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) DecrementIfPresent(value *BigInt) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of CoverCharge
func (r chatQueryCoverChargeBigInt) Multiply(value BigInt) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) MultiplyIfPresent(value *BigInt) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of CoverCharge
func (r chatQueryCoverChargeBigInt) Divide(value BigInt) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) DivideIfPresent(value *BigInt) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Divide(*value)
}

func (r chatQueryCoverChargeBigInt) Equals(value BigInt) chatWithPrismaCoverChargeEqualsParam {

	return chatWithPrismaCoverChargeEqualsParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) EqualsIfPresent(value *BigInt) chatWithPrismaCoverChargeEqualsParam {
	if value == nil {
		return chatWithPrismaCoverChargeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryCoverChargeBigInt) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "coverCharge",
			Value: direction,
		},
	}
}

func (r chatQueryCoverChargeBigInt) Cursor(cursor BigInt) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "coverCharge",
			Value: cursor,
		},
	}
}

func (r chatQueryCoverChargeBigInt) In(value []BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) InIfPresent(value []BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryCoverChargeBigInt) NotIn(value []BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) NotInIfPresent(value []BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryCoverChargeBigInt) Lt(value BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) LtIfPresent(value *BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryCoverChargeBigInt) Lte(value BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) LteIfPresent(value *BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryCoverChargeBigInt) Gt(value BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) GtIfPresent(value *BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryCoverChargeBigInt) Gte(value BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) GteIfPresent(value *BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryCoverChargeBigInt) Not(value BigInt) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "coverCharge",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCoverChargeBigInt) NotIfPresent(value *BigInt) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

func (r chatQueryCoverChargeBigInt) Field() chatPrismaFields {
	return chatFieldCoverCharge
}

// base struct
type chatQueryTypeInt struct{}

// Set the required value of Type
func (r chatQueryTypeInt) Set(value int) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "type",
			Value: value,
		},
	}

}

// Set the optional value of Type dynamically
func (r chatQueryTypeInt) SetIfPresent(value *Int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of Type
func (r chatQueryTypeInt) Increment(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) IncrementIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of Type
func (r chatQueryTypeInt) Decrement(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) DecrementIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of Type
func (r chatQueryTypeInt) Multiply(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) MultiplyIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of Type
func (r chatQueryTypeInt) Divide(value int) chatSetParam {
	return chatSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) DivideIfPresent(value *int) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}
	return r.Divide(*value)
}

func (r chatQueryTypeInt) Equals(value int) chatWithPrismaTypeEqualsParam {

	return chatWithPrismaTypeEqualsParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) EqualsIfPresent(value *int) chatWithPrismaTypeEqualsParam {
	if value == nil {
		return chatWithPrismaTypeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryTypeInt) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "type",
			Value: direction,
		},
	}
}

func (r chatQueryTypeInt) Cursor(cursor int) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "type",
			Value: cursor,
		},
	}
}

func (r chatQueryTypeInt) In(value []int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) InIfPresent(value []int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryTypeInt) NotIn(value []int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) NotInIfPresent(value []int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryTypeInt) Lt(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) LtIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryTypeInt) Lte(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) LteIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryTypeInt) Gt(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) GtIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryTypeInt) Gte(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) GteIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryTypeInt) Not(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryTypeInt) NotIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r chatQueryTypeInt) LT(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r chatQueryTypeInt) LTIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r chatQueryTypeInt) LTE(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r chatQueryTypeInt) LTEIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r chatQueryTypeInt) GT(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r chatQueryTypeInt) GTIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r chatQueryTypeInt) GTE(value int) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r chatQueryTypeInt) GTEIfPresent(value *int) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.GTE(*value)
}

func (r chatQueryTypeInt) Field() chatPrismaFields {
	return chatFieldType
}

// base struct
type chatQueryCreatedByString struct{}

// Set the required value of CreatedBy
func (r chatQueryCreatedByString) Set(value string) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "createdBy",
			Value: value,
		},
	}

}

// Set the optional value of CreatedBy dynamically
func (r chatQueryCreatedByString) SetIfPresent(value *String) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

func (r chatQueryCreatedByString) Equals(value string) chatWithPrismaCreatedByEqualsParam {

	return chatWithPrismaCreatedByEqualsParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) EqualsIfPresent(value *string) chatWithPrismaCreatedByEqualsParam {
	if value == nil {
		return chatWithPrismaCreatedByEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryCreatedByString) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "createdBy",
			Value: direction,
		},
	}
}

func (r chatQueryCreatedByString) Cursor(cursor string) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "createdBy",
			Value: cursor,
		},
	}
}

func (r chatQueryCreatedByString) In(value []string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) InIfPresent(value []string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryCreatedByString) NotIn(value []string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) NotInIfPresent(value []string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryCreatedByString) Lt(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) LtIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryCreatedByString) Lte(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) LteIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryCreatedByString) Gt(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) GtIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryCreatedByString) Gte(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) GteIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryCreatedByString) Contains(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) ContainsIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Contains(*value)
}

func (r chatQueryCreatedByString) StartsWith(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) StartsWithIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r chatQueryCreatedByString) EndsWith(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) EndsWithIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r chatQueryCreatedByString) Mode(value QueryMode) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) ModeIfPresent(value *QueryMode) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Mode(*value)
}

func (r chatQueryCreatedByString) Not(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedByString) NotIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r chatQueryCreatedByString) HasPrefix(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r chatQueryCreatedByString) HasPrefixIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r chatQueryCreatedByString) HasSuffix(value string) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdBy",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r chatQueryCreatedByString) HasSuffixIfPresent(value *string) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r chatQueryCreatedByString) Field() chatPrismaFields {
	return chatFieldCreatedBy
}

// base struct
type chatQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r chatQueryCreatedAtDateTime) Set(value DateTime) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r chatQueryCreatedAtDateTime) SetIfPresent(value *DateTime) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

func (r chatQueryCreatedAtDateTime) Equals(value DateTime) chatWithPrismaCreatedAtEqualsParam {

	return chatWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) chatWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return chatWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryCreatedAtDateTime) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r chatQueryCreatedAtDateTime) Cursor(cursor DateTime) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r chatQueryCreatedAtDateTime) In(value []DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) InIfPresent(value []DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryCreatedAtDateTime) NotIn(value []DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryCreatedAtDateTime) Lt(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) LtIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryCreatedAtDateTime) Lte(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) LteIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryCreatedAtDateTime) Gt(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) GtIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryCreatedAtDateTime) Gte(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) GteIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryCreatedAtDateTime) Not(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryCreatedAtDateTime) NotIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r chatQueryCreatedAtDateTime) Before(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r chatQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r chatQueryCreatedAtDateTime) After(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r chatQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r chatQueryCreatedAtDateTime) BeforeEquals(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r chatQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r chatQueryCreatedAtDateTime) AfterEquals(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r chatQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r chatQueryCreatedAtDateTime) Field() chatPrismaFields {
	return chatFieldCreatedAt
}

// base struct
type chatQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r chatQueryUpdatedAtDateTime) Set(value DateTime) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r chatQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

func (r chatQueryUpdatedAtDateTime) Equals(value DateTime) chatWithPrismaUpdatedAtEqualsParam {

	return chatWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) chatWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return chatWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryUpdatedAtDateTime) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r chatQueryUpdatedAtDateTime) Cursor(cursor DateTime) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r chatQueryUpdatedAtDateTime) In(value []DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) InIfPresent(value []DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryUpdatedAtDateTime) NotIn(value []DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryUpdatedAtDateTime) Lt(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryUpdatedAtDateTime) Lte(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryUpdatedAtDateTime) Gt(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryUpdatedAtDateTime) Gte(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryUpdatedAtDateTime) Not(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r chatQueryUpdatedAtDateTime) Before(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r chatQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r chatQueryUpdatedAtDateTime) After(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r chatQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r chatQueryUpdatedAtDateTime) BeforeEquals(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r chatQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r chatQueryUpdatedAtDateTime) AfterEquals(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r chatQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r chatQueryUpdatedAtDateTime) Field() chatPrismaFields {
	return chatFieldUpdatedAt
}

// base struct
type chatQueryLastActivityAtDateTime struct{}

// Set the required value of LastActivityAt
func (r chatQueryLastActivityAtDateTime) Set(value DateTime) chatSetParam {

	return chatSetParam{
		data: builder.Field{
			Name:  "lastActivityAt",
			Value: value,
		},
	}

}

// Set the optional value of LastActivityAt dynamically
func (r chatQueryLastActivityAtDateTime) SetIfPresent(value *DateTime) chatSetParam {
	if value == nil {
		return chatSetParam{}
	}

	return r.Set(*value)
}

func (r chatQueryLastActivityAtDateTime) Equals(value DateTime) chatWithPrismaLastActivityAtEqualsParam {

	return chatWithPrismaLastActivityAtEqualsParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) EqualsIfPresent(value *DateTime) chatWithPrismaLastActivityAtEqualsParam {
	if value == nil {
		return chatWithPrismaLastActivityAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r chatQueryLastActivityAtDateTime) Order(direction SortOrder) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name:  "lastActivityAt",
			Value: direction,
		},
	}
}

func (r chatQueryLastActivityAtDateTime) Cursor(cursor DateTime) chatCursorParam {
	return chatCursorParam{
		data: builder.Field{
			Name:  "lastActivityAt",
			Value: cursor,
		},
	}
}

func (r chatQueryLastActivityAtDateTime) In(value []DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) InIfPresent(value []DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.In(value)
}

func (r chatQueryLastActivityAtDateTime) NotIn(value []DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) NotInIfPresent(value []DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.NotIn(value)
}

func (r chatQueryLastActivityAtDateTime) Lt(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) LtIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lt(*value)
}

func (r chatQueryLastActivityAtDateTime) Lte(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) LteIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Lte(*value)
}

func (r chatQueryLastActivityAtDateTime) Gt(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) GtIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gt(*value)
}

func (r chatQueryLastActivityAtDateTime) Gte(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) GteIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Gte(*value)
}

func (r chatQueryLastActivityAtDateTime) Not(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r chatQueryLastActivityAtDateTime) NotIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r chatQueryLastActivityAtDateTime) Before(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r chatQueryLastActivityAtDateTime) BeforeIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r chatQueryLastActivityAtDateTime) After(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r chatQueryLastActivityAtDateTime) AfterIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r chatQueryLastActivityAtDateTime) BeforeEquals(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r chatQueryLastActivityAtDateTime) BeforeEqualsIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r chatQueryLastActivityAtDateTime) AfterEquals(value DateTime) chatDefaultParam {
	return chatDefaultParam{
		data: builder.Field{
			Name: "lastActivityAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r chatQueryLastActivityAtDateTime) AfterEqualsIfPresent(value *DateTime) chatDefaultParam {
	if value == nil {
		return chatDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r chatQueryLastActivityAtDateTime) Field() chatPrismaFields {
	return chatFieldLastActivityAt
}

// base struct
type chatQueryMembersMember struct{}

type chatQueryMembersRelations struct{}

// Chat -> Members
//
// @relation
// @required
func (chatQueryMembersRelations) Some(
	params ...MemberWhereParam,
) chatDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatDefaultParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Chat -> Members
//
// @relation
// @required
func (chatQueryMembersRelations) Every(
	params ...MemberWhereParam,
) chatDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatDefaultParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Chat -> Members
//
// @relation
// @required
func (chatQueryMembersRelations) None(
	params ...MemberWhereParam,
) chatDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatDefaultParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (chatQueryMembersRelations) Fetch(

	params ...MemberWhereParam,

) chatToMembersFindMany {
	var v chatToMembersFindMany

	v.query.Operation = "query"
	v.query.Method = "members"
	v.query.Outputs = memberOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r chatQueryMembersRelations) Link(
	params ...MemberWhereParam,
) chatSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return chatSetParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r chatQueryMembersRelations) Unlink(
	params ...MemberWhereParam,
) chatSetParam {
	var v chatSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = chatSetParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r chatQueryMembersMember) Field() chatPrismaFields {
	return chatFieldMembers
}

// Member acts as a namespaces to access query methods for the Member model
var Member = memberQuery{}

// memberQuery exposes query functions for the member model
type memberQuery struct {

	// ChatID
	//
	// @required
	ChatID memberQueryChatIDString

	// UserID
	//
	// @required
	UserID memberQueryUserIDString

	// AddedByID
	//
	// @optional
	AddedByID memberQueryAddedByIDString

	// NumUnread
	//
	// @required
	NumUnread memberQueryNumUnreadInt

	// IsMuted
	//
	// @required
	IsMuted memberQueryIsMutedBoolean

	// IsPushEnabled
	//
	// @required
	IsPushEnabled memberQueryIsPushEnabledBoolean

	// HasModPermission
	//
	// @required
	HasModPermission memberQueryHasModPermissionBoolean

	// HasSendPermission
	//
	// @required
	HasSendPermission memberQueryHasSendPermissionBoolean

	// CreatedAt
	//
	// @required
	CreatedAt memberQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt memberQueryUpdatedAtDateTime

	Chat memberQueryChatRelations
}

func (memberQuery) Not(params ...MemberWhereParam) memberDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return memberDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (memberQuery) Or(params ...MemberWhereParam) memberDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return memberDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (memberQuery) And(params ...MemberWhereParam) memberDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return memberDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (memberQuery) ChatIDUserID(
	_chatID MemberWithPrismaChatIDWhereParam,

	_userID MemberWithPrismaUserIDWhereParam,
) MemberEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _chatID.field())
	fields = append(fields, _userID.field())

	return memberEqualsUniqueParam{
		data: builder.Field{
			Name:   "chatId_userId",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type memberQueryChatIDString struct{}

// Set the required value of ChatID
func (r memberQueryChatIDString) Set(value string) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "chatId",
			Value: value,
		},
	}

}

// Set the optional value of ChatID dynamically
func (r memberQueryChatIDString) SetIfPresent(value *String) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryChatIDString) Equals(value string) memberWithPrismaChatIDEqualsParam {

	return memberWithPrismaChatIDEqualsParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) EqualsIfPresent(value *string) memberWithPrismaChatIDEqualsParam {
	if value == nil {
		return memberWithPrismaChatIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryChatIDString) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "chatId",
			Value: direction,
		},
	}
}

func (r memberQueryChatIDString) Cursor(cursor string) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "chatId",
			Value: cursor,
		},
	}
}

func (r memberQueryChatIDString) In(value []string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) InIfPresent(value []string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.In(value)
}

func (r memberQueryChatIDString) NotIn(value []string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) NotInIfPresent(value []string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.NotIn(value)
}

func (r memberQueryChatIDString) Lt(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) LtIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lt(*value)
}

func (r memberQueryChatIDString) Lte(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) LteIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lte(*value)
}

func (r memberQueryChatIDString) Gt(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) GtIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gt(*value)
}

func (r memberQueryChatIDString) Gte(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) GteIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gte(*value)
}

func (r memberQueryChatIDString) Contains(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) ContainsIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Contains(*value)
}

func (r memberQueryChatIDString) StartsWith(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) StartsWithIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r memberQueryChatIDString) EndsWith(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) EndsWithIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r memberQueryChatIDString) Mode(value QueryMode) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) ModeIfPresent(value *QueryMode) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Mode(*value)
}

func (r memberQueryChatIDString) Not(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryChatIDString) NotIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r memberQueryChatIDString) HasPrefix(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r memberQueryChatIDString) HasPrefixIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r memberQueryChatIDString) HasSuffix(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r memberQueryChatIDString) HasSuffixIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r memberQueryChatIDString) Field() memberPrismaFields {
	return memberFieldChatID
}

// base struct
type memberQueryUserIDString struct{}

// Set the required value of UserID
func (r memberQueryUserIDString) Set(value string) memberWithPrismaUserIDSetParam {

	return memberWithPrismaUserIDSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r memberQueryUserIDString) SetIfPresent(value *String) memberWithPrismaUserIDSetParam {
	if value == nil {
		return memberWithPrismaUserIDSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryUserIDString) Equals(value string) memberWithPrismaUserIDEqualsParam {

	return memberWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) EqualsIfPresent(value *string) memberWithPrismaUserIDEqualsParam {
	if value == nil {
		return memberWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryUserIDString) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r memberQueryUserIDString) Cursor(cursor string) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r memberQueryUserIDString) In(value []string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) InIfPresent(value []string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.In(value)
}

func (r memberQueryUserIDString) NotIn(value []string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) NotInIfPresent(value []string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.NotIn(value)
}

func (r memberQueryUserIDString) Lt(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) LtIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lt(*value)
}

func (r memberQueryUserIDString) Lte(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) LteIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lte(*value)
}

func (r memberQueryUserIDString) Gt(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) GtIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gt(*value)
}

func (r memberQueryUserIDString) Gte(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) GteIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gte(*value)
}

func (r memberQueryUserIDString) Contains(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) ContainsIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Contains(*value)
}

func (r memberQueryUserIDString) StartsWith(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) StartsWithIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r memberQueryUserIDString) EndsWith(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) EndsWithIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r memberQueryUserIDString) Mode(value QueryMode) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) ModeIfPresent(value *QueryMode) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Mode(*value)
}

func (r memberQueryUserIDString) Not(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUserIDString) NotIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r memberQueryUserIDString) HasPrefix(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r memberQueryUserIDString) HasPrefixIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r memberQueryUserIDString) HasSuffix(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r memberQueryUserIDString) HasSuffixIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r memberQueryUserIDString) Field() memberPrismaFields {
	return memberFieldUserID
}

// base struct
type memberQueryAddedByIDString struct{}

// Set the optional value of AddedByID
func (r memberQueryAddedByIDString) Set(value string) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "addedById",
			Value: value,
		},
	}

}

// Set the optional value of AddedByID dynamically
func (r memberQueryAddedByIDString) SetIfPresent(value *String) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of AddedByID dynamically
func (r memberQueryAddedByIDString) SetOptional(value *String) memberSetParam {
	if value == nil {

		var v *string
		return memberSetParam{
			data: builder.Field{
				Name:  "addedById",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r memberQueryAddedByIDString) Equals(value string) memberWithPrismaAddedByIDEqualsParam {

	return memberWithPrismaAddedByIDEqualsParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) EqualsIfPresent(value *string) memberWithPrismaAddedByIDEqualsParam {
	if value == nil {
		return memberWithPrismaAddedByIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryAddedByIDString) EqualsOptional(value *String) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) IsNull() memberDefaultParam {
	var str *string = nil
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "addedById",
			Value: direction,
		},
	}
}

func (r memberQueryAddedByIDString) Cursor(cursor string) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "addedById",
			Value: cursor,
		},
	}
}

func (r memberQueryAddedByIDString) In(value []string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) InIfPresent(value []string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.In(value)
}

func (r memberQueryAddedByIDString) NotIn(value []string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) NotInIfPresent(value []string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.NotIn(value)
}

func (r memberQueryAddedByIDString) Lt(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) LtIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lt(*value)
}

func (r memberQueryAddedByIDString) Lte(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) LteIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lte(*value)
}

func (r memberQueryAddedByIDString) Gt(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) GtIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gt(*value)
}

func (r memberQueryAddedByIDString) Gte(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) GteIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gte(*value)
}

func (r memberQueryAddedByIDString) Contains(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) ContainsIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Contains(*value)
}

func (r memberQueryAddedByIDString) StartsWith(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) StartsWithIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r memberQueryAddedByIDString) EndsWith(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) EndsWithIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r memberQueryAddedByIDString) Mode(value QueryMode) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) ModeIfPresent(value *QueryMode) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Mode(*value)
}

func (r memberQueryAddedByIDString) Not(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryAddedByIDString) NotIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r memberQueryAddedByIDString) HasPrefix(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r memberQueryAddedByIDString) HasPrefixIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r memberQueryAddedByIDString) HasSuffix(value string) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "addedById",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r memberQueryAddedByIDString) HasSuffixIfPresent(value *string) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r memberQueryAddedByIDString) Field() memberPrismaFields {
	return memberFieldAddedByID
}

// base struct
type memberQueryNumUnreadInt struct{}

// Set the required value of NumUnread
func (r memberQueryNumUnreadInt) Set(value int) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "numUnread",
			Value: value,
		},
	}

}

// Set the optional value of NumUnread dynamically
func (r memberQueryNumUnreadInt) SetIfPresent(value *Int) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of NumUnread
func (r memberQueryNumUnreadInt) Increment(value int) memberSetParam {
	return memberSetParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) IncrementIfPresent(value *int) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of NumUnread
func (r memberQueryNumUnreadInt) Decrement(value int) memberSetParam {
	return memberSetParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) DecrementIfPresent(value *int) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of NumUnread
func (r memberQueryNumUnreadInt) Multiply(value int) memberSetParam {
	return memberSetParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) MultiplyIfPresent(value *int) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of NumUnread
func (r memberQueryNumUnreadInt) Divide(value int) memberSetParam {
	return memberSetParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) DivideIfPresent(value *int) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}
	return r.Divide(*value)
}

func (r memberQueryNumUnreadInt) Equals(value int) memberWithPrismaNumUnreadEqualsParam {

	return memberWithPrismaNumUnreadEqualsParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) EqualsIfPresent(value *int) memberWithPrismaNumUnreadEqualsParam {
	if value == nil {
		return memberWithPrismaNumUnreadEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryNumUnreadInt) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "numUnread",
			Value: direction,
		},
	}
}

func (r memberQueryNumUnreadInt) Cursor(cursor int) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "numUnread",
			Value: cursor,
		},
	}
}

func (r memberQueryNumUnreadInt) In(value []int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) InIfPresent(value []int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.In(value)
}

func (r memberQueryNumUnreadInt) NotIn(value []int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) NotInIfPresent(value []int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.NotIn(value)
}

func (r memberQueryNumUnreadInt) Lt(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) LtIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lt(*value)
}

func (r memberQueryNumUnreadInt) Lte(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) LteIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lte(*value)
}

func (r memberQueryNumUnreadInt) Gt(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) GtIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gt(*value)
}

func (r memberQueryNumUnreadInt) Gte(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) GteIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gte(*value)
}

func (r memberQueryNumUnreadInt) Not(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryNumUnreadInt) NotIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r memberQueryNumUnreadInt) LT(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r memberQueryNumUnreadInt) LTIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r memberQueryNumUnreadInt) LTE(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r memberQueryNumUnreadInt) LTEIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r memberQueryNumUnreadInt) GT(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r memberQueryNumUnreadInt) GTIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r memberQueryNumUnreadInt) GTE(value int) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "numUnread",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r memberQueryNumUnreadInt) GTEIfPresent(value *int) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.GTE(*value)
}

func (r memberQueryNumUnreadInt) Field() memberPrismaFields {
	return memberFieldNumUnread
}

// base struct
type memberQueryIsMutedBoolean struct{}

// Set the required value of IsMuted
func (r memberQueryIsMutedBoolean) Set(value bool) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "isMuted",
			Value: value,
		},
	}

}

// Set the optional value of IsMuted dynamically
func (r memberQueryIsMutedBoolean) SetIfPresent(value *Boolean) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryIsMutedBoolean) Equals(value bool) memberWithPrismaIsMutedEqualsParam {

	return memberWithPrismaIsMutedEqualsParam{
		data: builder.Field{
			Name: "isMuted",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryIsMutedBoolean) EqualsIfPresent(value *bool) memberWithPrismaIsMutedEqualsParam {
	if value == nil {
		return memberWithPrismaIsMutedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryIsMutedBoolean) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "isMuted",
			Value: direction,
		},
	}
}

func (r memberQueryIsMutedBoolean) Cursor(cursor bool) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "isMuted",
			Value: cursor,
		},
	}
}

func (r memberQueryIsMutedBoolean) Field() memberPrismaFields {
	return memberFieldIsMuted
}

// base struct
type memberQueryIsPushEnabledBoolean struct{}

// Set the required value of IsPushEnabled
func (r memberQueryIsPushEnabledBoolean) Set(value bool) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "isPushEnabled",
			Value: value,
		},
	}

}

// Set the optional value of IsPushEnabled dynamically
func (r memberQueryIsPushEnabledBoolean) SetIfPresent(value *Boolean) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryIsPushEnabledBoolean) Equals(value bool) memberWithPrismaIsPushEnabledEqualsParam {

	return memberWithPrismaIsPushEnabledEqualsParam{
		data: builder.Field{
			Name: "isPushEnabled",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryIsPushEnabledBoolean) EqualsIfPresent(value *bool) memberWithPrismaIsPushEnabledEqualsParam {
	if value == nil {
		return memberWithPrismaIsPushEnabledEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryIsPushEnabledBoolean) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "isPushEnabled",
			Value: direction,
		},
	}
}

func (r memberQueryIsPushEnabledBoolean) Cursor(cursor bool) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "isPushEnabled",
			Value: cursor,
		},
	}
}

func (r memberQueryIsPushEnabledBoolean) Field() memberPrismaFields {
	return memberFieldIsPushEnabled
}

// base struct
type memberQueryHasModPermissionBoolean struct{}

// Set the required value of HasModPermission
func (r memberQueryHasModPermissionBoolean) Set(value bool) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "hasModPermission",
			Value: value,
		},
	}

}

// Set the optional value of HasModPermission dynamically
func (r memberQueryHasModPermissionBoolean) SetIfPresent(value *Boolean) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryHasModPermissionBoolean) Equals(value bool) memberWithPrismaHasModPermissionEqualsParam {

	return memberWithPrismaHasModPermissionEqualsParam{
		data: builder.Field{
			Name: "hasModPermission",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryHasModPermissionBoolean) EqualsIfPresent(value *bool) memberWithPrismaHasModPermissionEqualsParam {
	if value == nil {
		return memberWithPrismaHasModPermissionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryHasModPermissionBoolean) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "hasModPermission",
			Value: direction,
		},
	}
}

func (r memberQueryHasModPermissionBoolean) Cursor(cursor bool) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "hasModPermission",
			Value: cursor,
		},
	}
}

func (r memberQueryHasModPermissionBoolean) Field() memberPrismaFields {
	return memberFieldHasModPermission
}

// base struct
type memberQueryHasSendPermissionBoolean struct{}

// Set the required value of HasSendPermission
func (r memberQueryHasSendPermissionBoolean) Set(value bool) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "hasSendPermission",
			Value: value,
		},
	}

}

// Set the optional value of HasSendPermission dynamically
func (r memberQueryHasSendPermissionBoolean) SetIfPresent(value *Boolean) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryHasSendPermissionBoolean) Equals(value bool) memberWithPrismaHasSendPermissionEqualsParam {

	return memberWithPrismaHasSendPermissionEqualsParam{
		data: builder.Field{
			Name: "hasSendPermission",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryHasSendPermissionBoolean) EqualsIfPresent(value *bool) memberWithPrismaHasSendPermissionEqualsParam {
	if value == nil {
		return memberWithPrismaHasSendPermissionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryHasSendPermissionBoolean) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "hasSendPermission",
			Value: direction,
		},
	}
}

func (r memberQueryHasSendPermissionBoolean) Cursor(cursor bool) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "hasSendPermission",
			Value: cursor,
		},
	}
}

func (r memberQueryHasSendPermissionBoolean) Field() memberPrismaFields {
	return memberFieldHasSendPermission
}

// base struct
type memberQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r memberQueryCreatedAtDateTime) Set(value DateTime) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r memberQueryCreatedAtDateTime) SetIfPresent(value *DateTime) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryCreatedAtDateTime) Equals(value DateTime) memberWithPrismaCreatedAtEqualsParam {

	return memberWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) memberWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return memberWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryCreatedAtDateTime) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r memberQueryCreatedAtDateTime) Cursor(cursor DateTime) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r memberQueryCreatedAtDateTime) In(value []DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) InIfPresent(value []DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.In(value)
}

func (r memberQueryCreatedAtDateTime) NotIn(value []DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.NotIn(value)
}

func (r memberQueryCreatedAtDateTime) Lt(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) LtIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lt(*value)
}

func (r memberQueryCreatedAtDateTime) Lte(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) LteIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lte(*value)
}

func (r memberQueryCreatedAtDateTime) Gt(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) GtIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gt(*value)
}

func (r memberQueryCreatedAtDateTime) Gte(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) GteIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gte(*value)
}

func (r memberQueryCreatedAtDateTime) Not(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryCreatedAtDateTime) NotIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r memberQueryCreatedAtDateTime) Before(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r memberQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r memberQueryCreatedAtDateTime) After(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r memberQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r memberQueryCreatedAtDateTime) BeforeEquals(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r memberQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r memberQueryCreatedAtDateTime) AfterEquals(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r memberQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r memberQueryCreatedAtDateTime) Field() memberPrismaFields {
	return memberFieldCreatedAt
}

// base struct
type memberQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r memberQueryUpdatedAtDateTime) Set(value DateTime) memberSetParam {

	return memberSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r memberQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) memberSetParam {
	if value == nil {
		return memberSetParam{}
	}

	return r.Set(*value)
}

func (r memberQueryUpdatedAtDateTime) Equals(value DateTime) memberWithPrismaUpdatedAtEqualsParam {

	return memberWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) memberWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return memberWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r memberQueryUpdatedAtDateTime) Order(direction SortOrder) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r memberQueryUpdatedAtDateTime) Cursor(cursor DateTime) memberCursorParam {
	return memberCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r memberQueryUpdatedAtDateTime) In(value []DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) InIfPresent(value []DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.In(value)
}

func (r memberQueryUpdatedAtDateTime) NotIn(value []DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.NotIn(value)
}

func (r memberQueryUpdatedAtDateTime) Lt(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lt(*value)
}

func (r memberQueryUpdatedAtDateTime) Lte(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Lte(*value)
}

func (r memberQueryUpdatedAtDateTime) Gt(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gt(*value)
}

func (r memberQueryUpdatedAtDateTime) Gte(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Gte(*value)
}

func (r memberQueryUpdatedAtDateTime) Not(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r memberQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r memberQueryUpdatedAtDateTime) Before(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r memberQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r memberQueryUpdatedAtDateTime) After(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r memberQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r memberQueryUpdatedAtDateTime) BeforeEquals(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r memberQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r memberQueryUpdatedAtDateTime) AfterEquals(value DateTime) memberDefaultParam {
	return memberDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r memberQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) memberDefaultParam {
	if value == nil {
		return memberDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r memberQueryUpdatedAtDateTime) Field() memberPrismaFields {
	return memberFieldUpdatedAt
}

// base struct
type memberQueryChatChat struct{}

type memberQueryChatRelations struct{}

// Member -> Chat
//
// @relation
// @required
func (memberQueryChatRelations) Where(
	params ...ChatWhereParam,
) memberDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return memberDefaultParam{
		data: builder.Field{
			Name: "chat",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (memberQueryChatRelations) Fetch() memberToChatFindUnique {
	var v memberToChatFindUnique

	v.query.Operation = "query"
	v.query.Method = "chat"
	v.query.Outputs = chatOutput

	return v
}

func (r memberQueryChatRelations) Link(
	params ChatWhereParam,
) memberWithPrismaChatSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return memberWithPrismaChatSetParam{}
	}

	fields = append(fields, f)

	return memberWithPrismaChatSetParam{
		data: builder.Field{
			Name: "chat",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r memberQueryChatRelations) Unlink() memberWithPrismaChatSetParam {
	var v memberWithPrismaChatSetParam

	v = memberWithPrismaChatSetParam{
		data: builder.Field{
			Name: "chat",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r memberQueryChatChat) Field() memberPrismaFields {
	return memberFieldChat
}

// Message acts as a namespaces to access query methods for the Message model
var Message = messageQuery{}

// messageQuery exposes query functions for the message model
type messageQuery struct {

	// ID
	//
	// @required
	ID messageQueryIDBytes

	// ChatID
	//
	// @required
	ChatID messageQueryChatIDString

	// SenderID
	//
	// @optional
	SenderID messageQuerySenderIDString

	// Version
	//
	// @required
	Version messageQueryVersionInt

	// ContentType
	//
	// @required
	ContentType messageQueryContentTypeInt

	// Content
	//
	// @required
	Content messageQueryContentBytes

	// CreatedAt
	//
	// @required
	CreatedAt messageQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt messageQueryUpdatedAtDateTime
}

func (messageQuery) Not(params ...MessageWhereParam) messageDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (messageQuery) Or(params ...MessageWhereParam) messageDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (messageQuery) And(params ...MessageWhereParam) messageDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type messageQueryIDBytes struct{}

// Set the required value of ID
func (r messageQueryIDBytes) Set(value Bytes) messageWithPrismaIDSetParam {

	return messageWithPrismaIDSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r messageQueryIDBytes) SetIfPresent(value *Bytes) messageWithPrismaIDSetParam {
	if value == nil {
		return messageWithPrismaIDSetParam{}
	}

	return r.Set(*value)
}

func (r messageQueryIDBytes) Equals(value Bytes) messageWithPrismaIDEqualsUniqueParam {

	return messageWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryIDBytes) EqualsIfPresent(value *Bytes) messageWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return messageWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryIDBytes) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r messageQueryIDBytes) Cursor(cursor Bytes) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r messageQueryIDBytes) In(value []Bytes) messageParamUnique {
	return messageParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryIDBytes) InIfPresent(value []Bytes) messageParamUnique {
	if value == nil {
		return messageParamUnique{}
	}
	return r.In(value)
}

func (r messageQueryIDBytes) NotIn(value []Bytes) messageParamUnique {
	return messageParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryIDBytes) NotInIfPresent(value []Bytes) messageParamUnique {
	if value == nil {
		return messageParamUnique{}
	}
	return r.NotIn(value)
}

func (r messageQueryIDBytes) Not(value Bytes) messageParamUnique {
	return messageParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryIDBytes) NotIfPresent(value *Bytes) messageParamUnique {
	if value == nil {
		return messageParamUnique{}
	}
	return r.Not(*value)
}

func (r messageQueryIDBytes) Field() messagePrismaFields {
	return messageFieldID
}

// base struct
type messageQueryChatIDString struct{}

// Set the required value of ChatID
func (r messageQueryChatIDString) Set(value string) messageWithPrismaChatIDSetParam {

	return messageWithPrismaChatIDSetParam{
		data: builder.Field{
			Name:  "chatId",
			Value: value,
		},
	}

}

// Set the optional value of ChatID dynamically
func (r messageQueryChatIDString) SetIfPresent(value *String) messageWithPrismaChatIDSetParam {
	if value == nil {
		return messageWithPrismaChatIDSetParam{}
	}

	return r.Set(*value)
}

func (r messageQueryChatIDString) Equals(value string) messageWithPrismaChatIDEqualsParam {

	return messageWithPrismaChatIDEqualsParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) EqualsIfPresent(value *string) messageWithPrismaChatIDEqualsParam {
	if value == nil {
		return messageWithPrismaChatIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryChatIDString) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "chatId",
			Value: direction,
		},
	}
}

func (r messageQueryChatIDString) Cursor(cursor string) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "chatId",
			Value: cursor,
		},
	}
}

func (r messageQueryChatIDString) In(value []string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) InIfPresent(value []string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQueryChatIDString) NotIn(value []string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) NotInIfPresent(value []string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQueryChatIDString) Lt(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) LtIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lt(*value)
}

func (r messageQueryChatIDString) Lte(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) LteIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lte(*value)
}

func (r messageQueryChatIDString) Gt(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) GtIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gt(*value)
}

func (r messageQueryChatIDString) Gte(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) GteIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gte(*value)
}

func (r messageQueryChatIDString) Contains(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) ContainsIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Contains(*value)
}

func (r messageQueryChatIDString) StartsWith(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) StartsWithIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r messageQueryChatIDString) EndsWith(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) EndsWithIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r messageQueryChatIDString) Mode(value QueryMode) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) ModeIfPresent(value *QueryMode) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Mode(*value)
}

func (r messageQueryChatIDString) Not(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryChatIDString) NotIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r messageQueryChatIDString) HasPrefix(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r messageQueryChatIDString) HasPrefixIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r messageQueryChatIDString) HasSuffix(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r messageQueryChatIDString) HasSuffixIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r messageQueryChatIDString) Field() messagePrismaFields {
	return messageFieldChatID
}

// base struct
type messageQuerySenderIDString struct{}

// Set the optional value of SenderID
func (r messageQuerySenderIDString) Set(value string) messageSetParam {

	return messageSetParam{
		data: builder.Field{
			Name:  "senderId",
			Value: value,
		},
	}

}

// Set the optional value of SenderID dynamically
func (r messageQuerySenderIDString) SetIfPresent(value *String) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of SenderID dynamically
func (r messageQuerySenderIDString) SetOptional(value *String) messageSetParam {
	if value == nil {

		var v *string
		return messageSetParam{
			data: builder.Field{
				Name:  "senderId",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r messageQuerySenderIDString) Equals(value string) messageWithPrismaSenderIDEqualsParam {

	return messageWithPrismaSenderIDEqualsParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) EqualsIfPresent(value *string) messageWithPrismaSenderIDEqualsParam {
	if value == nil {
		return messageWithPrismaSenderIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQuerySenderIDString) EqualsOptional(value *String) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) IsNull() messageDefaultParam {
	var str *string = nil
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "senderId",
			Value: direction,
		},
	}
}

func (r messageQuerySenderIDString) Cursor(cursor string) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "senderId",
			Value: cursor,
		},
	}
}

func (r messageQuerySenderIDString) In(value []string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) InIfPresent(value []string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQuerySenderIDString) NotIn(value []string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) NotInIfPresent(value []string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQuerySenderIDString) Lt(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) LtIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lt(*value)
}

func (r messageQuerySenderIDString) Lte(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) LteIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lte(*value)
}

func (r messageQuerySenderIDString) Gt(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) GtIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gt(*value)
}

func (r messageQuerySenderIDString) Gte(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) GteIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gte(*value)
}

func (r messageQuerySenderIDString) Contains(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) ContainsIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Contains(*value)
}

func (r messageQuerySenderIDString) StartsWith(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) StartsWithIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r messageQuerySenderIDString) EndsWith(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) EndsWithIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r messageQuerySenderIDString) Mode(value QueryMode) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) ModeIfPresent(value *QueryMode) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Mode(*value)
}

func (r messageQuerySenderIDString) Not(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQuerySenderIDString) NotIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r messageQuerySenderIDString) HasPrefix(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r messageQuerySenderIDString) HasPrefixIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r messageQuerySenderIDString) HasSuffix(value string) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "senderId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r messageQuerySenderIDString) HasSuffixIfPresent(value *string) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r messageQuerySenderIDString) Field() messagePrismaFields {
	return messageFieldSenderID
}

// base struct
type messageQueryVersionInt struct{}

// Set the required value of Version
func (r messageQueryVersionInt) Set(value int) messageSetParam {

	return messageSetParam{
		data: builder.Field{
			Name:  "version",
			Value: value,
		},
	}

}

// Set the optional value of Version dynamically
func (r messageQueryVersionInt) SetIfPresent(value *Int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of Version
func (r messageQueryVersionInt) Increment(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) IncrementIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of Version
func (r messageQueryVersionInt) Decrement(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) DecrementIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of Version
func (r messageQueryVersionInt) Multiply(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) MultiplyIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of Version
func (r messageQueryVersionInt) Divide(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) DivideIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Divide(*value)
}

func (r messageQueryVersionInt) Equals(value int) messageWithPrismaVersionEqualsParam {

	return messageWithPrismaVersionEqualsParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) EqualsIfPresent(value *int) messageWithPrismaVersionEqualsParam {
	if value == nil {
		return messageWithPrismaVersionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryVersionInt) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "version",
			Value: direction,
		},
	}
}

func (r messageQueryVersionInt) Cursor(cursor int) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "version",
			Value: cursor,
		},
	}
}

func (r messageQueryVersionInt) In(value []int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) InIfPresent(value []int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQueryVersionInt) NotIn(value []int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) NotInIfPresent(value []int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQueryVersionInt) Lt(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) LtIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lt(*value)
}

func (r messageQueryVersionInt) Lte(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) LteIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lte(*value)
}

func (r messageQueryVersionInt) Gt(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) GtIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gt(*value)
}

func (r messageQueryVersionInt) Gte(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) GteIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gte(*value)
}

func (r messageQueryVersionInt) Not(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryVersionInt) NotIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r messageQueryVersionInt) LT(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r messageQueryVersionInt) LTIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r messageQueryVersionInt) LTE(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r messageQueryVersionInt) LTEIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r messageQueryVersionInt) GT(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r messageQueryVersionInt) GTIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r messageQueryVersionInt) GTE(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "version",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r messageQueryVersionInt) GTEIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.GTE(*value)
}

func (r messageQueryVersionInt) Field() messagePrismaFields {
	return messageFieldVersion
}

// base struct
type messageQueryContentTypeInt struct{}

// Set the required value of ContentType
func (r messageQueryContentTypeInt) Set(value int) messageSetParam {

	return messageSetParam{
		data: builder.Field{
			Name:  "contentType",
			Value: value,
		},
	}

}

// Set the optional value of ContentType dynamically
func (r messageQueryContentTypeInt) SetIfPresent(value *Int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ContentType
func (r messageQueryContentTypeInt) Increment(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) IncrementIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ContentType
func (r messageQueryContentTypeInt) Decrement(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) DecrementIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ContentType
func (r messageQueryContentTypeInt) Multiply(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) MultiplyIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ContentType
func (r messageQueryContentTypeInt) Divide(value int) messageSetParam {
	return messageSetParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) DivideIfPresent(value *int) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}
	return r.Divide(*value)
}

func (r messageQueryContentTypeInt) Equals(value int) messageWithPrismaContentTypeEqualsParam {

	return messageWithPrismaContentTypeEqualsParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) EqualsIfPresent(value *int) messageWithPrismaContentTypeEqualsParam {
	if value == nil {
		return messageWithPrismaContentTypeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryContentTypeInt) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "contentType",
			Value: direction,
		},
	}
}

func (r messageQueryContentTypeInt) Cursor(cursor int) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "contentType",
			Value: cursor,
		},
	}
}

func (r messageQueryContentTypeInt) In(value []int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) InIfPresent(value []int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQueryContentTypeInt) NotIn(value []int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) NotInIfPresent(value []int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQueryContentTypeInt) Lt(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) LtIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lt(*value)
}

func (r messageQueryContentTypeInt) Lte(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) LteIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lte(*value)
}

func (r messageQueryContentTypeInt) Gt(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) GtIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gt(*value)
}

func (r messageQueryContentTypeInt) Gte(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) GteIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gte(*value)
}

func (r messageQueryContentTypeInt) Not(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentTypeInt) NotIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r messageQueryContentTypeInt) LT(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r messageQueryContentTypeInt) LTIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r messageQueryContentTypeInt) LTE(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r messageQueryContentTypeInt) LTEIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r messageQueryContentTypeInt) GT(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r messageQueryContentTypeInt) GTIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r messageQueryContentTypeInt) GTE(value int) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "contentType",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r messageQueryContentTypeInt) GTEIfPresent(value *int) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.GTE(*value)
}

func (r messageQueryContentTypeInt) Field() messagePrismaFields {
	return messageFieldContentType
}

// base struct
type messageQueryContentBytes struct{}

// Set the required value of Content
func (r messageQueryContentBytes) Set(value Bytes) messageWithPrismaContentSetParam {

	return messageWithPrismaContentSetParam{
		data: builder.Field{
			Name:  "content",
			Value: value,
		},
	}

}

// Set the optional value of Content dynamically
func (r messageQueryContentBytes) SetIfPresent(value *Bytes) messageWithPrismaContentSetParam {
	if value == nil {
		return messageWithPrismaContentSetParam{}
	}

	return r.Set(*value)
}

func (r messageQueryContentBytes) Equals(value Bytes) messageWithPrismaContentEqualsParam {

	return messageWithPrismaContentEqualsParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentBytes) EqualsIfPresent(value *Bytes) messageWithPrismaContentEqualsParam {
	if value == nil {
		return messageWithPrismaContentEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryContentBytes) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "content",
			Value: direction,
		},
	}
}

func (r messageQueryContentBytes) Cursor(cursor Bytes) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "content",
			Value: cursor,
		},
	}
}

func (r messageQueryContentBytes) In(value []Bytes) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentBytes) InIfPresent(value []Bytes) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQueryContentBytes) NotIn(value []Bytes) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentBytes) NotInIfPresent(value []Bytes) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQueryContentBytes) Not(value Bytes) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryContentBytes) NotIfPresent(value *Bytes) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

func (r messageQueryContentBytes) Field() messagePrismaFields {
	return messageFieldContent
}

// base struct
type messageQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r messageQueryCreatedAtDateTime) Set(value DateTime) messageSetParam {

	return messageSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r messageQueryCreatedAtDateTime) SetIfPresent(value *DateTime) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}

	return r.Set(*value)
}

func (r messageQueryCreatedAtDateTime) Equals(value DateTime) messageWithPrismaCreatedAtEqualsParam {

	return messageWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) messageWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return messageWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryCreatedAtDateTime) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r messageQueryCreatedAtDateTime) Cursor(cursor DateTime) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r messageQueryCreatedAtDateTime) In(value []DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) InIfPresent(value []DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQueryCreatedAtDateTime) NotIn(value []DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQueryCreatedAtDateTime) Lt(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) LtIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lt(*value)
}

func (r messageQueryCreatedAtDateTime) Lte(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) LteIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lte(*value)
}

func (r messageQueryCreatedAtDateTime) Gt(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) GtIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gt(*value)
}

func (r messageQueryCreatedAtDateTime) Gte(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) GteIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gte(*value)
}

func (r messageQueryCreatedAtDateTime) Not(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryCreatedAtDateTime) NotIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r messageQueryCreatedAtDateTime) Before(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r messageQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r messageQueryCreatedAtDateTime) After(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r messageQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r messageQueryCreatedAtDateTime) BeforeEquals(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r messageQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r messageQueryCreatedAtDateTime) AfterEquals(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r messageQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r messageQueryCreatedAtDateTime) Field() messagePrismaFields {
	return messageFieldCreatedAt
}

// base struct
type messageQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r messageQueryUpdatedAtDateTime) Set(value DateTime) messageSetParam {

	return messageSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r messageQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) messageSetParam {
	if value == nil {
		return messageSetParam{}
	}

	return r.Set(*value)
}

func (r messageQueryUpdatedAtDateTime) Equals(value DateTime) messageWithPrismaUpdatedAtEqualsParam {

	return messageWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) messageWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return messageWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r messageQueryUpdatedAtDateTime) Order(direction SortOrder) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) Cursor(cursor DateTime) messageCursorParam {
	return messageCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) In(value []DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) InIfPresent(value []DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.In(value)
}

func (r messageQueryUpdatedAtDateTime) NotIn(value []DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.NotIn(value)
}

func (r messageQueryUpdatedAtDateTime) Lt(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lt(*value)
}

func (r messageQueryUpdatedAtDateTime) Lte(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Lte(*value)
}

func (r messageQueryUpdatedAtDateTime) Gt(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gt(*value)
}

func (r messageQueryUpdatedAtDateTime) Gte(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Gte(*value)
}

func (r messageQueryUpdatedAtDateTime) Not(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r messageQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r messageQueryUpdatedAtDateTime) Before(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r messageQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r messageQueryUpdatedAtDateTime) After(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r messageQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r messageQueryUpdatedAtDateTime) BeforeEquals(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r messageQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r messageQueryUpdatedAtDateTime) AfterEquals(value DateTime) messageDefaultParam {
	return messageDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r messageQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) messageDefaultParam {
	if value == nil {
		return messageDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r messageQueryUpdatedAtDateTime) Field() messagePrismaFields {
	return messageFieldUpdatedAt
}

// Pointer acts as a namespaces to access query methods for the Pointer model
var Pointer = pointerQuery{}

// pointerQuery exposes query functions for the pointer model
type pointerQuery struct {

	// ChatID
	//
	// @required
	ChatID pointerQueryChatIDString

	// UserID
	//
	// @required
	UserID pointerQueryUserIDString

	// Type
	//
	// @required
	Type pointerQueryTypeInt

	// Value
	//
	// @required
	Value pointerQueryValueString

	// CreatedAt
	//
	// @required
	CreatedAt pointerQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt pointerQueryUpdatedAtDateTime
}

func (pointerQuery) Not(params ...PointerWhereParam) pointerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pointerDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pointerQuery) Or(params ...PointerWhereParam) pointerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pointerDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pointerQuery) And(params ...PointerWhereParam) pointerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pointerDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pointerQuery) ChatIDUserIDType(
	_chatID PointerWithPrismaChatIDWhereParam,

	_userID PointerWithPrismaUserIDWhereParam,

	_type PointerWithPrismaTypeWhereParam,
) PointerEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _chatID.field())
	fields = append(fields, _userID.field())
	fields = append(fields, _type.field())

	return pointerEqualsUniqueParam{
		data: builder.Field{
			Name:   "chatId_userId_type",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type pointerQueryChatIDString struct{}

// Set the required value of ChatID
func (r pointerQueryChatIDString) Set(value string) pointerWithPrismaChatIDSetParam {

	return pointerWithPrismaChatIDSetParam{
		data: builder.Field{
			Name:  "chatId",
			Value: value,
		},
	}

}

// Set the optional value of ChatID dynamically
func (r pointerQueryChatIDString) SetIfPresent(value *String) pointerWithPrismaChatIDSetParam {
	if value == nil {
		return pointerWithPrismaChatIDSetParam{}
	}

	return r.Set(*value)
}

func (r pointerQueryChatIDString) Equals(value string) pointerWithPrismaChatIDEqualsParam {

	return pointerWithPrismaChatIDEqualsParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) EqualsIfPresent(value *string) pointerWithPrismaChatIDEqualsParam {
	if value == nil {
		return pointerWithPrismaChatIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pointerQueryChatIDString) Order(direction SortOrder) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name:  "chatId",
			Value: direction,
		},
	}
}

func (r pointerQueryChatIDString) Cursor(cursor string) pointerCursorParam {
	return pointerCursorParam{
		data: builder.Field{
			Name:  "chatId",
			Value: cursor,
		},
	}
}

func (r pointerQueryChatIDString) In(value []string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) InIfPresent(value []string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.In(value)
}

func (r pointerQueryChatIDString) NotIn(value []string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) NotInIfPresent(value []string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pointerQueryChatIDString) Lt(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) LtIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pointerQueryChatIDString) Lte(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) LteIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pointerQueryChatIDString) Gt(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) GtIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pointerQueryChatIDString) Gte(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) GteIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pointerQueryChatIDString) Contains(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) ContainsIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pointerQueryChatIDString) StartsWith(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) StartsWithIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pointerQueryChatIDString) EndsWith(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) EndsWithIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pointerQueryChatIDString) Mode(value QueryMode) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) ModeIfPresent(value *QueryMode) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pointerQueryChatIDString) Not(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryChatIDString) NotIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pointerQueryChatIDString) HasPrefix(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pointerQueryChatIDString) HasPrefixIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pointerQueryChatIDString) HasSuffix(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "chatId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pointerQueryChatIDString) HasSuffixIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pointerQueryChatIDString) Field() pointerPrismaFields {
	return pointerFieldChatID
}

// base struct
type pointerQueryUserIDString struct{}

// Set the required value of UserID
func (r pointerQueryUserIDString) Set(value string) pointerWithPrismaUserIDSetParam {

	return pointerWithPrismaUserIDSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r pointerQueryUserIDString) SetIfPresent(value *String) pointerWithPrismaUserIDSetParam {
	if value == nil {
		return pointerWithPrismaUserIDSetParam{}
	}

	return r.Set(*value)
}

func (r pointerQueryUserIDString) Equals(value string) pointerWithPrismaUserIDEqualsParam {

	return pointerWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) EqualsIfPresent(value *string) pointerWithPrismaUserIDEqualsParam {
	if value == nil {
		return pointerWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pointerQueryUserIDString) Order(direction SortOrder) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r pointerQueryUserIDString) Cursor(cursor string) pointerCursorParam {
	return pointerCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r pointerQueryUserIDString) In(value []string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) InIfPresent(value []string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.In(value)
}

func (r pointerQueryUserIDString) NotIn(value []string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) NotInIfPresent(value []string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pointerQueryUserIDString) Lt(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) LtIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pointerQueryUserIDString) Lte(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) LteIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pointerQueryUserIDString) Gt(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) GtIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pointerQueryUserIDString) Gte(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) GteIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pointerQueryUserIDString) Contains(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) ContainsIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pointerQueryUserIDString) StartsWith(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) StartsWithIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pointerQueryUserIDString) EndsWith(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) EndsWithIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pointerQueryUserIDString) Mode(value QueryMode) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) ModeIfPresent(value *QueryMode) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pointerQueryUserIDString) Not(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUserIDString) NotIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pointerQueryUserIDString) HasPrefix(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pointerQueryUserIDString) HasPrefixIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pointerQueryUserIDString) HasSuffix(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pointerQueryUserIDString) HasSuffixIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pointerQueryUserIDString) Field() pointerPrismaFields {
	return pointerFieldUserID
}

// base struct
type pointerQueryTypeInt struct{}

// Set the required value of Type
func (r pointerQueryTypeInt) Set(value int) pointerSetParam {

	return pointerSetParam{
		data: builder.Field{
			Name:  "type",
			Value: value,
		},
	}

}

// Set the optional value of Type dynamically
func (r pointerQueryTypeInt) SetIfPresent(value *Int) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of Type
func (r pointerQueryTypeInt) Increment(value int) pointerSetParam {
	return pointerSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) IncrementIfPresent(value *int) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of Type
func (r pointerQueryTypeInt) Decrement(value int) pointerSetParam {
	return pointerSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) DecrementIfPresent(value *int) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of Type
func (r pointerQueryTypeInt) Multiply(value int) pointerSetParam {
	return pointerSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) MultiplyIfPresent(value *int) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of Type
func (r pointerQueryTypeInt) Divide(value int) pointerSetParam {
	return pointerSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) DivideIfPresent(value *int) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}
	return r.Divide(*value)
}

func (r pointerQueryTypeInt) Equals(value int) pointerWithPrismaTypeEqualsParam {

	return pointerWithPrismaTypeEqualsParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) EqualsIfPresent(value *int) pointerWithPrismaTypeEqualsParam {
	if value == nil {
		return pointerWithPrismaTypeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pointerQueryTypeInt) Order(direction SortOrder) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name:  "type",
			Value: direction,
		},
	}
}

func (r pointerQueryTypeInt) Cursor(cursor int) pointerCursorParam {
	return pointerCursorParam{
		data: builder.Field{
			Name:  "type",
			Value: cursor,
		},
	}
}

func (r pointerQueryTypeInt) In(value []int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) InIfPresent(value []int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.In(value)
}

func (r pointerQueryTypeInt) NotIn(value []int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) NotInIfPresent(value []int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pointerQueryTypeInt) Lt(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) LtIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pointerQueryTypeInt) Lte(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) LteIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pointerQueryTypeInt) Gt(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) GtIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pointerQueryTypeInt) Gte(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) GteIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pointerQueryTypeInt) Not(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryTypeInt) NotIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pointerQueryTypeInt) LT(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pointerQueryTypeInt) LTIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r pointerQueryTypeInt) LTE(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pointerQueryTypeInt) LTEIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r pointerQueryTypeInt) GT(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pointerQueryTypeInt) GTIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r pointerQueryTypeInt) GTE(value int) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pointerQueryTypeInt) GTEIfPresent(value *int) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.GTE(*value)
}

func (r pointerQueryTypeInt) Field() pointerPrismaFields {
	return pointerFieldType
}

// base struct
type pointerQueryValueString struct{}

// Set the required value of Value
func (r pointerQueryValueString) Set(value string) pointerWithPrismaValueSetParam {

	return pointerWithPrismaValueSetParam{
		data: builder.Field{
			Name:  "value",
			Value: value,
		},
	}

}

// Set the optional value of Value dynamically
func (r pointerQueryValueString) SetIfPresent(value *String) pointerWithPrismaValueSetParam {
	if value == nil {
		return pointerWithPrismaValueSetParam{}
	}

	return r.Set(*value)
}

func (r pointerQueryValueString) Equals(value string) pointerWithPrismaValueEqualsParam {

	return pointerWithPrismaValueEqualsParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) EqualsIfPresent(value *string) pointerWithPrismaValueEqualsParam {
	if value == nil {
		return pointerWithPrismaValueEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pointerQueryValueString) Order(direction SortOrder) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name:  "value",
			Value: direction,
		},
	}
}

func (r pointerQueryValueString) Cursor(cursor string) pointerCursorParam {
	return pointerCursorParam{
		data: builder.Field{
			Name:  "value",
			Value: cursor,
		},
	}
}

func (r pointerQueryValueString) In(value []string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) InIfPresent(value []string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.In(value)
}

func (r pointerQueryValueString) NotIn(value []string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) NotInIfPresent(value []string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pointerQueryValueString) Lt(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) LtIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pointerQueryValueString) Lte(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) LteIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pointerQueryValueString) Gt(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) GtIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pointerQueryValueString) Gte(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) GteIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pointerQueryValueString) Contains(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) ContainsIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pointerQueryValueString) StartsWith(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) StartsWithIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pointerQueryValueString) EndsWith(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) EndsWithIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pointerQueryValueString) Mode(value QueryMode) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) ModeIfPresent(value *QueryMode) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pointerQueryValueString) Not(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryValueString) NotIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pointerQueryValueString) HasPrefix(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pointerQueryValueString) HasPrefixIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pointerQueryValueString) HasSuffix(value string) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "value",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pointerQueryValueString) HasSuffixIfPresent(value *string) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pointerQueryValueString) Field() pointerPrismaFields {
	return pointerFieldValue
}

// base struct
type pointerQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r pointerQueryCreatedAtDateTime) Set(value DateTime) pointerSetParam {

	return pointerSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r pointerQueryCreatedAtDateTime) SetIfPresent(value *DateTime) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}

	return r.Set(*value)
}

func (r pointerQueryCreatedAtDateTime) Equals(value DateTime) pointerWithPrismaCreatedAtEqualsParam {

	return pointerWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) pointerWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return pointerWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pointerQueryCreatedAtDateTime) Order(direction SortOrder) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r pointerQueryCreatedAtDateTime) Cursor(cursor DateTime) pointerCursorParam {
	return pointerCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r pointerQueryCreatedAtDateTime) In(value []DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) InIfPresent(value []DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.In(value)
}

func (r pointerQueryCreatedAtDateTime) NotIn(value []DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pointerQueryCreatedAtDateTime) Lt(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) LtIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pointerQueryCreatedAtDateTime) Lte(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) LteIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pointerQueryCreatedAtDateTime) Gt(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) GtIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pointerQueryCreatedAtDateTime) Gte(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) GteIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pointerQueryCreatedAtDateTime) Not(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryCreatedAtDateTime) NotIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pointerQueryCreatedAtDateTime) Before(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pointerQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r pointerQueryCreatedAtDateTime) After(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pointerQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r pointerQueryCreatedAtDateTime) BeforeEquals(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pointerQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r pointerQueryCreatedAtDateTime) AfterEquals(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pointerQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r pointerQueryCreatedAtDateTime) Field() pointerPrismaFields {
	return pointerFieldCreatedAt
}

// base struct
type pointerQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r pointerQueryUpdatedAtDateTime) Set(value DateTime) pointerSetParam {

	return pointerSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r pointerQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) pointerSetParam {
	if value == nil {
		return pointerSetParam{}
	}

	return r.Set(*value)
}

func (r pointerQueryUpdatedAtDateTime) Equals(value DateTime) pointerWithPrismaUpdatedAtEqualsParam {

	return pointerWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) pointerWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return pointerWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pointerQueryUpdatedAtDateTime) Order(direction SortOrder) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) Cursor(cursor DateTime) pointerCursorParam {
	return pointerCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) In(value []DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) InIfPresent(value []DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.In(value)
}

func (r pointerQueryUpdatedAtDateTime) NotIn(value []DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pointerQueryUpdatedAtDateTime) Lt(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pointerQueryUpdatedAtDateTime) Lte(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pointerQueryUpdatedAtDateTime) Gt(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pointerQueryUpdatedAtDateTime) Gte(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pointerQueryUpdatedAtDateTime) Not(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pointerQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pointerQueryUpdatedAtDateTime) Before(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pointerQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r pointerQueryUpdatedAtDateTime) After(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pointerQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r pointerQueryUpdatedAtDateTime) BeforeEquals(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pointerQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r pointerQueryUpdatedAtDateTime) AfterEquals(value DateTime) pointerDefaultParam {
	return pointerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pointerQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) pointerDefaultParam {
	if value == nil {
		return pointerDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r pointerQueryUpdatedAtDateTime) Field() pointerPrismaFields {
	return pointerFieldUpdatedAt
}

// PushToken acts as a namespaces to access query methods for the PushToken model
var PushToken = pushTokenQuery{}

// pushTokenQuery exposes query functions for the pushToken model
type pushTokenQuery struct {

	// UserID
	//
	// @required
	UserID pushTokenQueryUserIDString

	// AppInstallID
	//
	// @required
	AppInstallID pushTokenQueryAppInstallIDString

	// Token
	//
	// @required
	Token pushTokenQueryTokenString

	// Type
	//
	// @required
	Type pushTokenQueryTypeInt

	// CreatedAt
	//
	// @required
	CreatedAt pushTokenQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt pushTokenQueryUpdatedAtDateTime
}

func (pushTokenQuery) Not(params ...PushTokenWhereParam) pushTokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pushTokenDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pushTokenQuery) Or(params ...PushTokenWhereParam) pushTokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pushTokenDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pushTokenQuery) And(params ...PushTokenWhereParam) pushTokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pushTokenDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pushTokenQuery) UserIDAppInstallID(
	_userID PushTokenWithPrismaUserIDWhereParam,

	_appInstallID PushTokenWithPrismaAppInstallIDWhereParam,
) PushTokenEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _userID.field())
	fields = append(fields, _appInstallID.field())

	return pushTokenEqualsUniqueParam{
		data: builder.Field{
			Name:   "userId_appInstallId",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type pushTokenQueryUserIDString struct{}

// Set the required value of UserID
func (r pushTokenQueryUserIDString) Set(value string) pushTokenWithPrismaUserIDSetParam {

	return pushTokenWithPrismaUserIDSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r pushTokenQueryUserIDString) SetIfPresent(value *String) pushTokenWithPrismaUserIDSetParam {
	if value == nil {
		return pushTokenWithPrismaUserIDSetParam{}
	}

	return r.Set(*value)
}

func (r pushTokenQueryUserIDString) Equals(value string) pushTokenWithPrismaUserIDEqualsParam {

	return pushTokenWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) EqualsIfPresent(value *string) pushTokenWithPrismaUserIDEqualsParam {
	if value == nil {
		return pushTokenWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pushTokenQueryUserIDString) Order(direction SortOrder) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r pushTokenQueryUserIDString) Cursor(cursor string) pushTokenCursorParam {
	return pushTokenCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r pushTokenQueryUserIDString) In(value []string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) InIfPresent(value []string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.In(value)
}

func (r pushTokenQueryUserIDString) NotIn(value []string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) NotInIfPresent(value []string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pushTokenQueryUserIDString) Lt(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) LtIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pushTokenQueryUserIDString) Lte(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) LteIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pushTokenQueryUserIDString) Gt(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) GtIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pushTokenQueryUserIDString) Gte(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) GteIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pushTokenQueryUserIDString) Contains(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) ContainsIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pushTokenQueryUserIDString) StartsWith(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) StartsWithIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pushTokenQueryUserIDString) EndsWith(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) EndsWithIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pushTokenQueryUserIDString) Mode(value QueryMode) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) ModeIfPresent(value *QueryMode) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pushTokenQueryUserIDString) Not(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUserIDString) NotIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pushTokenQueryUserIDString) HasPrefix(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pushTokenQueryUserIDString) HasPrefixIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pushTokenQueryUserIDString) HasSuffix(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pushTokenQueryUserIDString) HasSuffixIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pushTokenQueryUserIDString) Field() pushTokenPrismaFields {
	return pushTokenFieldUserID
}

// base struct
type pushTokenQueryAppInstallIDString struct{}

// Set the required value of AppInstallID
func (r pushTokenQueryAppInstallIDString) Set(value string) pushTokenWithPrismaAppInstallIDSetParam {

	return pushTokenWithPrismaAppInstallIDSetParam{
		data: builder.Field{
			Name:  "appInstallId",
			Value: value,
		},
	}

}

// Set the optional value of AppInstallID dynamically
func (r pushTokenQueryAppInstallIDString) SetIfPresent(value *String) pushTokenWithPrismaAppInstallIDSetParam {
	if value == nil {
		return pushTokenWithPrismaAppInstallIDSetParam{}
	}

	return r.Set(*value)
}

func (r pushTokenQueryAppInstallIDString) Equals(value string) pushTokenWithPrismaAppInstallIDEqualsParam {

	return pushTokenWithPrismaAppInstallIDEqualsParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) EqualsIfPresent(value *string) pushTokenWithPrismaAppInstallIDEqualsParam {
	if value == nil {
		return pushTokenWithPrismaAppInstallIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pushTokenQueryAppInstallIDString) Order(direction SortOrder) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name:  "appInstallId",
			Value: direction,
		},
	}
}

func (r pushTokenQueryAppInstallIDString) Cursor(cursor string) pushTokenCursorParam {
	return pushTokenCursorParam{
		data: builder.Field{
			Name:  "appInstallId",
			Value: cursor,
		},
	}
}

func (r pushTokenQueryAppInstallIDString) In(value []string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) InIfPresent(value []string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.In(value)
}

func (r pushTokenQueryAppInstallIDString) NotIn(value []string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) NotInIfPresent(value []string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pushTokenQueryAppInstallIDString) Lt(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) LtIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pushTokenQueryAppInstallIDString) Lte(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) LteIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pushTokenQueryAppInstallIDString) Gt(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) GtIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pushTokenQueryAppInstallIDString) Gte(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) GteIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pushTokenQueryAppInstallIDString) Contains(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) ContainsIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pushTokenQueryAppInstallIDString) StartsWith(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) StartsWithIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pushTokenQueryAppInstallIDString) EndsWith(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) EndsWithIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pushTokenQueryAppInstallIDString) Mode(value QueryMode) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) ModeIfPresent(value *QueryMode) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pushTokenQueryAppInstallIDString) Not(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryAppInstallIDString) NotIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pushTokenQueryAppInstallIDString) HasPrefix(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pushTokenQueryAppInstallIDString) HasPrefixIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pushTokenQueryAppInstallIDString) HasSuffix(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "appInstallId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pushTokenQueryAppInstallIDString) HasSuffixIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pushTokenQueryAppInstallIDString) Field() pushTokenPrismaFields {
	return pushTokenFieldAppInstallID
}

// base struct
type pushTokenQueryTokenString struct{}

// Set the required value of Token
func (r pushTokenQueryTokenString) Set(value string) pushTokenWithPrismaTokenSetParam {

	return pushTokenWithPrismaTokenSetParam{
		data: builder.Field{
			Name:  "token",
			Value: value,
		},
	}

}

// Set the optional value of Token dynamically
func (r pushTokenQueryTokenString) SetIfPresent(value *String) pushTokenWithPrismaTokenSetParam {
	if value == nil {
		return pushTokenWithPrismaTokenSetParam{}
	}

	return r.Set(*value)
}

func (r pushTokenQueryTokenString) Equals(value string) pushTokenWithPrismaTokenEqualsParam {

	return pushTokenWithPrismaTokenEqualsParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) EqualsIfPresent(value *string) pushTokenWithPrismaTokenEqualsParam {
	if value == nil {
		return pushTokenWithPrismaTokenEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pushTokenQueryTokenString) Order(direction SortOrder) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name:  "token",
			Value: direction,
		},
	}
}

func (r pushTokenQueryTokenString) Cursor(cursor string) pushTokenCursorParam {
	return pushTokenCursorParam{
		data: builder.Field{
			Name:  "token",
			Value: cursor,
		},
	}
}

func (r pushTokenQueryTokenString) In(value []string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) InIfPresent(value []string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.In(value)
}

func (r pushTokenQueryTokenString) NotIn(value []string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) NotInIfPresent(value []string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pushTokenQueryTokenString) Lt(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) LtIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pushTokenQueryTokenString) Lte(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) LteIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pushTokenQueryTokenString) Gt(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) GtIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pushTokenQueryTokenString) Gte(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) GteIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pushTokenQueryTokenString) Contains(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) ContainsIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pushTokenQueryTokenString) StartsWith(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) StartsWithIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pushTokenQueryTokenString) EndsWith(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) EndsWithIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pushTokenQueryTokenString) Mode(value QueryMode) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) ModeIfPresent(value *QueryMode) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pushTokenQueryTokenString) Not(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTokenString) NotIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pushTokenQueryTokenString) HasPrefix(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pushTokenQueryTokenString) HasPrefixIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pushTokenQueryTokenString) HasSuffix(value string) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pushTokenQueryTokenString) HasSuffixIfPresent(value *string) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pushTokenQueryTokenString) Field() pushTokenPrismaFields {
	return pushTokenFieldToken
}

// base struct
type pushTokenQueryTypeInt struct{}

// Set the required value of Type
func (r pushTokenQueryTypeInt) Set(value int) pushTokenSetParam {

	return pushTokenSetParam{
		data: builder.Field{
			Name:  "type",
			Value: value,
		},
	}

}

// Set the optional value of Type dynamically
func (r pushTokenQueryTypeInt) SetIfPresent(value *Int) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of Type
func (r pushTokenQueryTypeInt) Increment(value int) pushTokenSetParam {
	return pushTokenSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) IncrementIfPresent(value *int) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of Type
func (r pushTokenQueryTypeInt) Decrement(value int) pushTokenSetParam {
	return pushTokenSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) DecrementIfPresent(value *int) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of Type
func (r pushTokenQueryTypeInt) Multiply(value int) pushTokenSetParam {
	return pushTokenSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) MultiplyIfPresent(value *int) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of Type
func (r pushTokenQueryTypeInt) Divide(value int) pushTokenSetParam {
	return pushTokenSetParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) DivideIfPresent(value *int) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}
	return r.Divide(*value)
}

func (r pushTokenQueryTypeInt) Equals(value int) pushTokenWithPrismaTypeEqualsParam {

	return pushTokenWithPrismaTypeEqualsParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) EqualsIfPresent(value *int) pushTokenWithPrismaTypeEqualsParam {
	if value == nil {
		return pushTokenWithPrismaTypeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pushTokenQueryTypeInt) Order(direction SortOrder) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name:  "type",
			Value: direction,
		},
	}
}

func (r pushTokenQueryTypeInt) Cursor(cursor int) pushTokenCursorParam {
	return pushTokenCursorParam{
		data: builder.Field{
			Name:  "type",
			Value: cursor,
		},
	}
}

func (r pushTokenQueryTypeInt) In(value []int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) InIfPresent(value []int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.In(value)
}

func (r pushTokenQueryTypeInt) NotIn(value []int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) NotInIfPresent(value []int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pushTokenQueryTypeInt) Lt(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) LtIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pushTokenQueryTypeInt) Lte(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) LteIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pushTokenQueryTypeInt) Gt(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) GtIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pushTokenQueryTypeInt) Gte(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) GteIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pushTokenQueryTypeInt) Not(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryTypeInt) NotIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pushTokenQueryTypeInt) LT(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pushTokenQueryTypeInt) LTIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r pushTokenQueryTypeInt) LTE(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pushTokenQueryTypeInt) LTEIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r pushTokenQueryTypeInt) GT(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pushTokenQueryTypeInt) GTIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r pushTokenQueryTypeInt) GTE(value int) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "type",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pushTokenQueryTypeInt) GTEIfPresent(value *int) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.GTE(*value)
}

func (r pushTokenQueryTypeInt) Field() pushTokenPrismaFields {
	return pushTokenFieldType
}

// base struct
type pushTokenQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r pushTokenQueryCreatedAtDateTime) Set(value DateTime) pushTokenSetParam {

	return pushTokenSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r pushTokenQueryCreatedAtDateTime) SetIfPresent(value *DateTime) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}

	return r.Set(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Equals(value DateTime) pushTokenWithPrismaCreatedAtEqualsParam {

	return pushTokenWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) pushTokenWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return pushTokenWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Order(direction SortOrder) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) Cursor(cursor DateTime) pushTokenCursorParam {
	return pushTokenCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) In(value []DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) InIfPresent(value []DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.In(value)
}

func (r pushTokenQueryCreatedAtDateTime) NotIn(value []DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pushTokenQueryCreatedAtDateTime) Lt(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) LtIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Lte(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) LteIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Gt(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) GtIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Gte(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) GteIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Not(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryCreatedAtDateTime) NotIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pushTokenQueryCreatedAtDateTime) Before(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pushTokenQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r pushTokenQueryCreatedAtDateTime) After(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pushTokenQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r pushTokenQueryCreatedAtDateTime) BeforeEquals(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pushTokenQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r pushTokenQueryCreatedAtDateTime) AfterEquals(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pushTokenQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r pushTokenQueryCreatedAtDateTime) Field() pushTokenPrismaFields {
	return pushTokenFieldCreatedAt
}

// base struct
type pushTokenQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r pushTokenQueryUpdatedAtDateTime) Set(value DateTime) pushTokenSetParam {

	return pushTokenSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r pushTokenQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) pushTokenSetParam {
	if value == nil {
		return pushTokenSetParam{}
	}

	return r.Set(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Equals(value DateTime) pushTokenWithPrismaUpdatedAtEqualsParam {

	return pushTokenWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) pushTokenWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return pushTokenWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Order(direction SortOrder) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) Cursor(cursor DateTime) pushTokenCursorParam {
	return pushTokenCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) In(value []DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) InIfPresent(value []DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.In(value)
}

func (r pushTokenQueryUpdatedAtDateTime) NotIn(value []DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pushTokenQueryUpdatedAtDateTime) Lt(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Lte(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Gt(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Gte(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Not(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pushTokenQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pushTokenQueryUpdatedAtDateTime) Before(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pushTokenQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r pushTokenQueryUpdatedAtDateTime) After(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pushTokenQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r pushTokenQueryUpdatedAtDateTime) BeforeEquals(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pushTokenQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r pushTokenQueryUpdatedAtDateTime) AfterEquals(value DateTime) pushTokenDefaultParam {
	return pushTokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pushTokenQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) pushTokenDefaultParam {
	if value == nil {
		return pushTokenDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r pushTokenQueryUpdatedAtDateTime) Field() pushTokenPrismaFields {
	return pushTokenFieldUpdatedAt
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "displayName"},
	{Name: "isStaff"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaDisplayNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	displayNameField()
}

type UserWithPrismaDisplayNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	displayNameField()
}

type userWithPrismaDisplayNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDisplayNameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaDisplayNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDisplayNameSetParam) userModel() {}

func (p userWithPrismaDisplayNameSetParam) displayNameField() {}

type UserWithPrismaDisplayNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	displayNameField()
}

type userWithPrismaDisplayNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDisplayNameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaDisplayNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDisplayNameEqualsParam) userModel() {}

func (p userWithPrismaDisplayNameEqualsParam) displayNameField() {}

func (userWithPrismaDisplayNameSetParam) settable()  {}
func (userWithPrismaDisplayNameEqualsParam) equals() {}

type userWithPrismaDisplayNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDisplayNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaDisplayNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDisplayNameEqualsUniqueParam) userModel()        {}
func (p userWithPrismaDisplayNameEqualsUniqueParam) displayNameField() {}

func (userWithPrismaDisplayNameEqualsUniqueParam) unique() {}
func (userWithPrismaDisplayNameEqualsUniqueParam) equals() {}

type UserWithPrismaIsStaffEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	isStaffField()
}

type UserWithPrismaIsStaffSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isStaffField()
}

type userWithPrismaIsStaffSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIsStaffSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIsStaffSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIsStaffSetParam) userModel() {}

func (p userWithPrismaIsStaffSetParam) isStaffField() {}

type UserWithPrismaIsStaffWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isStaffField()
}

type userWithPrismaIsStaffEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIsStaffEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIsStaffEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIsStaffEqualsParam) userModel() {}

func (p userWithPrismaIsStaffEqualsParam) isStaffField() {}

func (userWithPrismaIsStaffSetParam) settable()  {}
func (userWithPrismaIsStaffEqualsParam) equals() {}

type userWithPrismaIsStaffEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIsStaffEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIsStaffEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIsStaffEqualsUniqueParam) userModel()    {}
func (p userWithPrismaIsStaffEqualsUniqueParam) isStaffField() {}

func (userWithPrismaIsStaffEqualsUniqueParam) unique() {}
func (userWithPrismaIsStaffEqualsUniqueParam) equals() {}

type UserWithPrismaPublicKeysEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	publicKeysField()
}

type UserWithPrismaPublicKeysSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	publicKeysField()
}

type userWithPrismaPublicKeysSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPublicKeysSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPublicKeysSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPublicKeysSetParam) userModel() {}

func (p userWithPrismaPublicKeysSetParam) publicKeysField() {}

type UserWithPrismaPublicKeysWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	publicKeysField()
}

type userWithPrismaPublicKeysEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPublicKeysEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPublicKeysEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPublicKeysEqualsParam) userModel() {}

func (p userWithPrismaPublicKeysEqualsParam) publicKeysField() {}

func (userWithPrismaPublicKeysSetParam) settable()  {}
func (userWithPrismaPublicKeysEqualsParam) equals() {}

type userWithPrismaPublicKeysEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPublicKeysEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPublicKeysEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPublicKeysEqualsUniqueParam) userModel()       {}
func (p userWithPrismaPublicKeysEqualsUniqueParam) publicKeysField() {}

func (userWithPrismaPublicKeysEqualsUniqueParam) unique() {}
func (userWithPrismaPublicKeysEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type UserWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParam) userModel() {}

func (p userWithPrismaCreatedAtSetParam) createdAtField() {}

type UserWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParam) userModel() {}

func (p userWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userWithPrismaCreatedAtSetParam) settable()  {}
func (userWithPrismaCreatedAtEqualsParam) equals() {}

type userWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (userWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type UserWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParam) userModel() {}

func (p userWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParam) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParam) settable()  {}
func (userWithPrismaUpdatedAtEqualsParam) equals() {}

type userWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type publicKeyActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var publicKeyOutput = []builder.Output{
	{Name: "key"},
	{Name: "userId"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type PublicKeyRelationWith interface {
	getQuery() builder.Query
	with()
	publicKeyRelation()
}

type PublicKeyWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
}

type publicKeyDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyDefaultParam) field() builder.Field {
	return p.data
}

func (p publicKeyDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyDefaultParam) publicKeyModel() {}

type PublicKeyOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
}

type publicKeyOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyOrderByParam) field() builder.Field {
	return p.data
}

func (p publicKeyOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyOrderByParam) publicKeyModel() {}

type PublicKeyCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	isCursor()
}

type publicKeyCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyCursorParam) field() builder.Field {
	return p.data
}

func (p publicKeyCursorParam) isCursor() {}

func (p publicKeyCursorParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyCursorParam) publicKeyModel() {}

type PublicKeyParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	publicKeyModel()
}

type publicKeyParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyParamUnique) publicKeyModel() {}

func (publicKeyParamUnique) unique() {}

func (p publicKeyParamUnique) field() builder.Field {
	return p.data
}

func (p publicKeyParamUnique) getQuery() builder.Query {
	return p.query
}

type PublicKeyEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicKeyModel()
}

type publicKeyEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyEqualsParam) publicKeyModel() {}

func (publicKeyEqualsParam) equals() {}

func (p publicKeyEqualsParam) field() builder.Field {
	return p.data
}

func (p publicKeyEqualsParam) getQuery() builder.Query {
	return p.query
}

type PublicKeyEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	publicKeyModel()
}

type publicKeyEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyEqualsUniqueParam) publicKeyModel() {}

func (publicKeyEqualsUniqueParam) unique() {}
func (publicKeyEqualsUniqueParam) equals() {}

func (p publicKeyEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicKeyEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PublicKeySetParam interface {
	field() builder.Field
	settable()
	publicKeyModel()
}

type publicKeySetParam struct {
	data builder.Field
}

func (publicKeySetParam) settable() {}

func (p publicKeySetParam) field() builder.Field {
	return p.data
}

func (p publicKeySetParam) publicKeyModel() {}

type PublicKeyWithPrismaKeyEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicKeyModel()
	keyField()
}

type PublicKeyWithPrismaKeySetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	keyField()
}

type publicKeyWithPrismaKeySetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaKeySetParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaKeySetParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaKeySetParam) publicKeyModel() {}

func (p publicKeyWithPrismaKeySetParam) keyField() {}

type PublicKeyWithPrismaKeyWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	keyField()
}

type publicKeyWithPrismaKeyEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaKeyEqualsParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaKeyEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaKeyEqualsParam) publicKeyModel() {}

func (p publicKeyWithPrismaKeyEqualsParam) keyField() {}

func (publicKeyWithPrismaKeySetParam) settable()  {}
func (publicKeyWithPrismaKeyEqualsParam) equals() {}

type publicKeyWithPrismaKeyEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaKeyEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaKeyEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaKeyEqualsUniqueParam) publicKeyModel() {}
func (p publicKeyWithPrismaKeyEqualsUniqueParam) keyField()       {}

func (publicKeyWithPrismaKeyEqualsUniqueParam) unique() {}
func (publicKeyWithPrismaKeyEqualsUniqueParam) equals() {}

type PublicKeyWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicKeyModel()
	userIDField()
}

type PublicKeyWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	userIDField()
}

type publicKeyWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUserIDSetParam) publicKeyModel() {}

func (p publicKeyWithPrismaUserIDSetParam) userIDField() {}

type PublicKeyWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	userIDField()
}

type publicKeyWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUserIDEqualsParam) publicKeyModel() {}

func (p publicKeyWithPrismaUserIDEqualsParam) userIDField() {}

func (publicKeyWithPrismaUserIDSetParam) settable()  {}
func (publicKeyWithPrismaUserIDEqualsParam) equals() {}

type publicKeyWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUserIDEqualsUniqueParam) publicKeyModel() {}
func (p publicKeyWithPrismaUserIDEqualsUniqueParam) userIDField()    {}

func (publicKeyWithPrismaUserIDEqualsUniqueParam) unique() {}
func (publicKeyWithPrismaUserIDEqualsUniqueParam) equals() {}

type PublicKeyWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicKeyModel()
	createdAtField()
}

type PublicKeyWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	createdAtField()
}

type publicKeyWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaCreatedAtSetParam) publicKeyModel() {}

func (p publicKeyWithPrismaCreatedAtSetParam) createdAtField() {}

type PublicKeyWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	createdAtField()
}

type publicKeyWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaCreatedAtEqualsParam) publicKeyModel() {}

func (p publicKeyWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (publicKeyWithPrismaCreatedAtSetParam) settable()  {}
func (publicKeyWithPrismaCreatedAtEqualsParam) equals() {}

type publicKeyWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaCreatedAtEqualsUniqueParam) publicKeyModel() {}
func (p publicKeyWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (publicKeyWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (publicKeyWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PublicKeyWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicKeyModel()
	updatedAtField()
}

type PublicKeyWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	updatedAtField()
}

type publicKeyWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUpdatedAtSetParam) publicKeyModel() {}

func (p publicKeyWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PublicKeyWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	updatedAtField()
}

type publicKeyWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUpdatedAtEqualsParam) publicKeyModel() {}

func (p publicKeyWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (publicKeyWithPrismaUpdatedAtSetParam) settable()  {}
func (publicKeyWithPrismaUpdatedAtEqualsParam) equals() {}

type publicKeyWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUpdatedAtEqualsUniqueParam) publicKeyModel() {}
func (p publicKeyWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (publicKeyWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (publicKeyWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type PublicKeyWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicKeyModel()
	userField()
}

type PublicKeyWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	userField()
}

type publicKeyWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUserSetParam) publicKeyModel() {}

func (p publicKeyWithPrismaUserSetParam) userField() {}

type PublicKeyWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicKeyModel()
	userField()
}

type publicKeyWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUserEqualsParam) publicKeyModel() {}

func (p publicKeyWithPrismaUserEqualsParam) userField() {}

func (publicKeyWithPrismaUserSetParam) settable()  {}
func (publicKeyWithPrismaUserEqualsParam) equals() {}

type publicKeyWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicKeyWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicKeyWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicKeyWithPrismaUserEqualsUniqueParam) publicKeyModel() {}
func (p publicKeyWithPrismaUserEqualsUniqueParam) userField()      {}

func (publicKeyWithPrismaUserEqualsUniqueParam) unique() {}
func (publicKeyWithPrismaUserEqualsUniqueParam) equals() {}

type intentActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var intentOutput = []builder.Output{
	{Name: "id"},
	{Name: "isFulfilled"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type IntentRelationWith interface {
	getQuery() builder.Query
	with()
	intentRelation()
}

type IntentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
}

type intentDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentDefaultParam) field() builder.Field {
	return p.data
}

func (p intentDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p intentDefaultParam) intentModel() {}

type IntentOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
}

type intentOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentOrderByParam) field() builder.Field {
	return p.data
}

func (p intentOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p intentOrderByParam) intentModel() {}

type IntentCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	isCursor()
}

type intentCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentCursorParam) field() builder.Field {
	return p.data
}

func (p intentCursorParam) isCursor() {}

func (p intentCursorParam) getQuery() builder.Query {
	return p.query
}

func (p intentCursorParam) intentModel() {}

type IntentParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	intentModel()
}

type intentParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p intentParamUnique) intentModel() {}

func (intentParamUnique) unique() {}

func (p intentParamUnique) field() builder.Field {
	return p.data
}

func (p intentParamUnique) getQuery() builder.Query {
	return p.query
}

type IntentEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	intentModel()
}

type intentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentEqualsParam) intentModel() {}

func (intentEqualsParam) equals() {}

func (p intentEqualsParam) field() builder.Field {
	return p.data
}

func (p intentEqualsParam) getQuery() builder.Query {
	return p.query
}

type IntentEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	intentModel()
}

type intentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentEqualsUniqueParam) intentModel() {}

func (intentEqualsUniqueParam) unique() {}
func (intentEqualsUniqueParam) equals() {}

func (p intentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p intentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type IntentSetParam interface {
	field() builder.Field
	settable()
	intentModel()
}

type intentSetParam struct {
	data builder.Field
}

func (intentSetParam) settable() {}

func (p intentSetParam) field() builder.Field {
	return p.data
}

func (p intentSetParam) intentModel() {}

type IntentWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	intentModel()
	idField()
}

type IntentWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	idField()
}

type intentWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaIDSetParam) intentModel() {}

func (p intentWithPrismaIDSetParam) idField() {}

type IntentWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	idField()
}

type intentWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaIDEqualsParam) intentModel() {}

func (p intentWithPrismaIDEqualsParam) idField() {}

func (intentWithPrismaIDSetParam) settable()  {}
func (intentWithPrismaIDEqualsParam) equals() {}

type intentWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaIDEqualsUniqueParam) intentModel() {}
func (p intentWithPrismaIDEqualsUniqueParam) idField()     {}

func (intentWithPrismaIDEqualsUniqueParam) unique() {}
func (intentWithPrismaIDEqualsUniqueParam) equals() {}

type IntentWithPrismaIsFulfilledEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	intentModel()
	isFulfilledField()
}

type IntentWithPrismaIsFulfilledSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	isFulfilledField()
}

type intentWithPrismaIsFulfilledSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaIsFulfilledSetParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaIsFulfilledSetParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaIsFulfilledSetParam) intentModel() {}

func (p intentWithPrismaIsFulfilledSetParam) isFulfilledField() {}

type IntentWithPrismaIsFulfilledWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	isFulfilledField()
}

type intentWithPrismaIsFulfilledEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaIsFulfilledEqualsParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaIsFulfilledEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaIsFulfilledEqualsParam) intentModel() {}

func (p intentWithPrismaIsFulfilledEqualsParam) isFulfilledField() {}

func (intentWithPrismaIsFulfilledSetParam) settable()  {}
func (intentWithPrismaIsFulfilledEqualsParam) equals() {}

type intentWithPrismaIsFulfilledEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaIsFulfilledEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaIsFulfilledEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaIsFulfilledEqualsUniqueParam) intentModel()      {}
func (p intentWithPrismaIsFulfilledEqualsUniqueParam) isFulfilledField() {}

func (intentWithPrismaIsFulfilledEqualsUniqueParam) unique() {}
func (intentWithPrismaIsFulfilledEqualsUniqueParam) equals() {}

type IntentWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	intentModel()
	createdAtField()
}

type IntentWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	createdAtField()
}

type intentWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaCreatedAtSetParam) intentModel() {}

func (p intentWithPrismaCreatedAtSetParam) createdAtField() {}

type IntentWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	createdAtField()
}

type intentWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaCreatedAtEqualsParam) intentModel() {}

func (p intentWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (intentWithPrismaCreatedAtSetParam) settable()  {}
func (intentWithPrismaCreatedAtEqualsParam) equals() {}

type intentWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaCreatedAtEqualsUniqueParam) intentModel()    {}
func (p intentWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (intentWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (intentWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type IntentWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	intentModel()
	updatedAtField()
}

type IntentWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	updatedAtField()
}

type intentWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaUpdatedAtSetParam) intentModel() {}

func (p intentWithPrismaUpdatedAtSetParam) updatedAtField() {}

type IntentWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	intentModel()
	updatedAtField()
}

type intentWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaUpdatedAtEqualsParam) intentModel() {}

func (p intentWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (intentWithPrismaUpdatedAtSetParam) settable()  {}
func (intentWithPrismaUpdatedAtEqualsParam) equals() {}

type intentWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p intentWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p intentWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p intentWithPrismaUpdatedAtEqualsUniqueParam) intentModel()    {}
func (p intentWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (intentWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (intentWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type chatActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var chatOutput = []builder.Output{
	{Name: "id"},
	{Name: "title"},
	{Name: "roomNumber"},
	{Name: "coverCharge"},
	{Name: "type"},
	{Name: "createdBy"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "lastActivityAt"},
}

type ChatRelationWith interface {
	getQuery() builder.Query
	with()
	chatRelation()
}

type ChatWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
}

type chatDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatDefaultParam) field() builder.Field {
	return p.data
}

func (p chatDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p chatDefaultParam) chatModel() {}

type ChatOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
}

type chatOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatOrderByParam) field() builder.Field {
	return p.data
}

func (p chatOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p chatOrderByParam) chatModel() {}

type ChatCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	isCursor()
}

type chatCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatCursorParam) field() builder.Field {
	return p.data
}

func (p chatCursorParam) isCursor() {}

func (p chatCursorParam) getQuery() builder.Query {
	return p.query
}

func (p chatCursorParam) chatModel() {}

type ChatParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	chatModel()
}

type chatParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p chatParamUnique) chatModel() {}

func (chatParamUnique) unique() {}

func (p chatParamUnique) field() builder.Field {
	return p.data
}

func (p chatParamUnique) getQuery() builder.Query {
	return p.query
}

type ChatEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
}

type chatEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatEqualsParam) chatModel() {}

func (chatEqualsParam) equals() {}

func (p chatEqualsParam) field() builder.Field {
	return p.data
}

func (p chatEqualsParam) getQuery() builder.Query {
	return p.query
}

type ChatEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	chatModel()
}

type chatEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatEqualsUniqueParam) chatModel() {}

func (chatEqualsUniqueParam) unique() {}
func (chatEqualsUniqueParam) equals() {}

func (p chatEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type ChatSetParam interface {
	field() builder.Field
	settable()
	chatModel()
}

type chatSetParam struct {
	data builder.Field
}

func (chatSetParam) settable() {}

func (p chatSetParam) field() builder.Field {
	return p.data
}

func (p chatSetParam) chatModel() {}

type ChatWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	idField()
}

type ChatWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	idField()
}

type chatWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaIDSetParam) chatModel() {}

func (p chatWithPrismaIDSetParam) idField() {}

type ChatWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	idField()
}

type chatWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaIDEqualsParam) chatModel() {}

func (p chatWithPrismaIDEqualsParam) idField() {}

func (chatWithPrismaIDSetParam) settable()  {}
func (chatWithPrismaIDEqualsParam) equals() {}

type chatWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaIDEqualsUniqueParam) chatModel() {}
func (p chatWithPrismaIDEqualsUniqueParam) idField()   {}

func (chatWithPrismaIDEqualsUniqueParam) unique() {}
func (chatWithPrismaIDEqualsUniqueParam) equals() {}

type ChatWithPrismaTitleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	titleField()
}

type ChatWithPrismaTitleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	titleField()
}

type chatWithPrismaTitleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaTitleSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaTitleSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaTitleSetParam) chatModel() {}

func (p chatWithPrismaTitleSetParam) titleField() {}

type ChatWithPrismaTitleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	titleField()
}

type chatWithPrismaTitleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaTitleEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaTitleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaTitleEqualsParam) chatModel() {}

func (p chatWithPrismaTitleEqualsParam) titleField() {}

func (chatWithPrismaTitleSetParam) settable()  {}
func (chatWithPrismaTitleEqualsParam) equals() {}

type chatWithPrismaTitleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaTitleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaTitleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaTitleEqualsUniqueParam) chatModel()  {}
func (p chatWithPrismaTitleEqualsUniqueParam) titleField() {}

func (chatWithPrismaTitleEqualsUniqueParam) unique() {}
func (chatWithPrismaTitleEqualsUniqueParam) equals() {}

type ChatWithPrismaRoomNumberEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	roomNumberField()
}

type ChatWithPrismaRoomNumberSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	roomNumberField()
}

type chatWithPrismaRoomNumberSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaRoomNumberSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaRoomNumberSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaRoomNumberSetParam) chatModel() {}

func (p chatWithPrismaRoomNumberSetParam) roomNumberField() {}

type ChatWithPrismaRoomNumberWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	roomNumberField()
}

type chatWithPrismaRoomNumberEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaRoomNumberEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaRoomNumberEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaRoomNumberEqualsParam) chatModel() {}

func (p chatWithPrismaRoomNumberEqualsParam) roomNumberField() {}

func (chatWithPrismaRoomNumberSetParam) settable()  {}
func (chatWithPrismaRoomNumberEqualsParam) equals() {}

type chatWithPrismaRoomNumberEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaRoomNumberEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaRoomNumberEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaRoomNumberEqualsUniqueParam) chatModel()       {}
func (p chatWithPrismaRoomNumberEqualsUniqueParam) roomNumberField() {}

func (chatWithPrismaRoomNumberEqualsUniqueParam) unique() {}
func (chatWithPrismaRoomNumberEqualsUniqueParam) equals() {}

type ChatWithPrismaCoverChargeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	coverChargeField()
}

type ChatWithPrismaCoverChargeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	coverChargeField()
}

type chatWithPrismaCoverChargeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCoverChargeSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCoverChargeSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCoverChargeSetParam) chatModel() {}

func (p chatWithPrismaCoverChargeSetParam) coverChargeField() {}

type ChatWithPrismaCoverChargeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	coverChargeField()
}

type chatWithPrismaCoverChargeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCoverChargeEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCoverChargeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCoverChargeEqualsParam) chatModel() {}

func (p chatWithPrismaCoverChargeEqualsParam) coverChargeField() {}

func (chatWithPrismaCoverChargeSetParam) settable()  {}
func (chatWithPrismaCoverChargeEqualsParam) equals() {}

type chatWithPrismaCoverChargeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCoverChargeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCoverChargeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCoverChargeEqualsUniqueParam) chatModel()        {}
func (p chatWithPrismaCoverChargeEqualsUniqueParam) coverChargeField() {}

func (chatWithPrismaCoverChargeEqualsUniqueParam) unique() {}
func (chatWithPrismaCoverChargeEqualsUniqueParam) equals() {}

type ChatWithPrismaTypeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	typeField()
}

type ChatWithPrismaTypeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	typeField()
}

type chatWithPrismaTypeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaTypeSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaTypeSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaTypeSetParam) chatModel() {}

func (p chatWithPrismaTypeSetParam) typeField() {}

type ChatWithPrismaTypeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	typeField()
}

type chatWithPrismaTypeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaTypeEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaTypeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaTypeEqualsParam) chatModel() {}

func (p chatWithPrismaTypeEqualsParam) typeField() {}

func (chatWithPrismaTypeSetParam) settable()  {}
func (chatWithPrismaTypeEqualsParam) equals() {}

type chatWithPrismaTypeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaTypeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaTypeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaTypeEqualsUniqueParam) chatModel() {}
func (p chatWithPrismaTypeEqualsUniqueParam) typeField() {}

func (chatWithPrismaTypeEqualsUniqueParam) unique() {}
func (chatWithPrismaTypeEqualsUniqueParam) equals() {}

type ChatWithPrismaCreatedByEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	createdByField()
}

type ChatWithPrismaCreatedBySetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	createdByField()
}

type chatWithPrismaCreatedBySetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCreatedBySetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCreatedBySetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCreatedBySetParam) chatModel() {}

func (p chatWithPrismaCreatedBySetParam) createdByField() {}

type ChatWithPrismaCreatedByWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	createdByField()
}

type chatWithPrismaCreatedByEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCreatedByEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCreatedByEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCreatedByEqualsParam) chatModel() {}

func (p chatWithPrismaCreatedByEqualsParam) createdByField() {}

func (chatWithPrismaCreatedBySetParam) settable()  {}
func (chatWithPrismaCreatedByEqualsParam) equals() {}

type chatWithPrismaCreatedByEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCreatedByEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCreatedByEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCreatedByEqualsUniqueParam) chatModel()      {}
func (p chatWithPrismaCreatedByEqualsUniqueParam) createdByField() {}

func (chatWithPrismaCreatedByEqualsUniqueParam) unique() {}
func (chatWithPrismaCreatedByEqualsUniqueParam) equals() {}

type ChatWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	createdAtField()
}

type ChatWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	createdAtField()
}

type chatWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCreatedAtSetParam) chatModel() {}

func (p chatWithPrismaCreatedAtSetParam) createdAtField() {}

type ChatWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	createdAtField()
}

type chatWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCreatedAtEqualsParam) chatModel() {}

func (p chatWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (chatWithPrismaCreatedAtSetParam) settable()  {}
func (chatWithPrismaCreatedAtEqualsParam) equals() {}

type chatWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaCreatedAtEqualsUniqueParam) chatModel()      {}
func (p chatWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (chatWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (chatWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type ChatWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	updatedAtField()
}

type ChatWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	updatedAtField()
}

type chatWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaUpdatedAtSetParam) chatModel() {}

func (p chatWithPrismaUpdatedAtSetParam) updatedAtField() {}

type ChatWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	updatedAtField()
}

type chatWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaUpdatedAtEqualsParam) chatModel() {}

func (p chatWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (chatWithPrismaUpdatedAtSetParam) settable()  {}
func (chatWithPrismaUpdatedAtEqualsParam) equals() {}

type chatWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaUpdatedAtEqualsUniqueParam) chatModel()      {}
func (p chatWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (chatWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (chatWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type ChatWithPrismaLastActivityAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	lastActivityAtField()
}

type ChatWithPrismaLastActivityAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	lastActivityAtField()
}

type chatWithPrismaLastActivityAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaLastActivityAtSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaLastActivityAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaLastActivityAtSetParam) chatModel() {}

func (p chatWithPrismaLastActivityAtSetParam) lastActivityAtField() {}

type ChatWithPrismaLastActivityAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	lastActivityAtField()
}

type chatWithPrismaLastActivityAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaLastActivityAtEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaLastActivityAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaLastActivityAtEqualsParam) chatModel() {}

func (p chatWithPrismaLastActivityAtEqualsParam) lastActivityAtField() {}

func (chatWithPrismaLastActivityAtSetParam) settable()  {}
func (chatWithPrismaLastActivityAtEqualsParam) equals() {}

type chatWithPrismaLastActivityAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaLastActivityAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaLastActivityAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaLastActivityAtEqualsUniqueParam) chatModel()           {}
func (p chatWithPrismaLastActivityAtEqualsUniqueParam) lastActivityAtField() {}

func (chatWithPrismaLastActivityAtEqualsUniqueParam) unique() {}
func (chatWithPrismaLastActivityAtEqualsUniqueParam) equals() {}

type ChatWithPrismaMembersEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	chatModel()
	membersField()
}

type ChatWithPrismaMembersSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	membersField()
}

type chatWithPrismaMembersSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaMembersSetParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaMembersSetParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaMembersSetParam) chatModel() {}

func (p chatWithPrismaMembersSetParam) membersField() {}

type ChatWithPrismaMembersWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	chatModel()
	membersField()
}

type chatWithPrismaMembersEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaMembersEqualsParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaMembersEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaMembersEqualsParam) chatModel() {}

func (p chatWithPrismaMembersEqualsParam) membersField() {}

func (chatWithPrismaMembersSetParam) settable()  {}
func (chatWithPrismaMembersEqualsParam) equals() {}

type chatWithPrismaMembersEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p chatWithPrismaMembersEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p chatWithPrismaMembersEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p chatWithPrismaMembersEqualsUniqueParam) chatModel()    {}
func (p chatWithPrismaMembersEqualsUniqueParam) membersField() {}

func (chatWithPrismaMembersEqualsUniqueParam) unique() {}
func (chatWithPrismaMembersEqualsUniqueParam) equals() {}

type memberActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var memberOutput = []builder.Output{
	{Name: "chatId"},
	{Name: "userId"},
	{Name: "addedById"},
	{Name: "numUnread"},
	{Name: "isMuted"},
	{Name: "isPushEnabled"},
	{Name: "hasModPermission"},
	{Name: "hasSendPermission"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type MemberRelationWith interface {
	getQuery() builder.Query
	with()
	memberRelation()
}

type MemberWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
}

type memberDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberDefaultParam) field() builder.Field {
	return p.data
}

func (p memberDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p memberDefaultParam) memberModel() {}

type MemberOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
}

type memberOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberOrderByParam) field() builder.Field {
	return p.data
}

func (p memberOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p memberOrderByParam) memberModel() {}

type MemberCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	isCursor()
}

type memberCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberCursorParam) field() builder.Field {
	return p.data
}

func (p memberCursorParam) isCursor() {}

func (p memberCursorParam) getQuery() builder.Query {
	return p.query
}

func (p memberCursorParam) memberModel() {}

type MemberParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	memberModel()
}

type memberParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p memberParamUnique) memberModel() {}

func (memberParamUnique) unique() {}

func (p memberParamUnique) field() builder.Field {
	return p.data
}

func (p memberParamUnique) getQuery() builder.Query {
	return p.query
}

type MemberEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
}

type memberEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberEqualsParam) memberModel() {}

func (memberEqualsParam) equals() {}

func (p memberEqualsParam) field() builder.Field {
	return p.data
}

func (p memberEqualsParam) getQuery() builder.Query {
	return p.query
}

type MemberEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	memberModel()
}

type memberEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberEqualsUniqueParam) memberModel() {}

func (memberEqualsUniqueParam) unique() {}
func (memberEqualsUniqueParam) equals() {}

func (p memberEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type MemberSetParam interface {
	field() builder.Field
	settable()
	memberModel()
}

type memberSetParam struct {
	data builder.Field
}

func (memberSetParam) settable() {}

func (p memberSetParam) field() builder.Field {
	return p.data
}

func (p memberSetParam) memberModel() {}

type MemberWithPrismaChatIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	chatIDField()
}

type MemberWithPrismaChatIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	chatIDField()
}

type memberWithPrismaChatIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaChatIDSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaChatIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaChatIDSetParam) memberModel() {}

func (p memberWithPrismaChatIDSetParam) chatIDField() {}

type MemberWithPrismaChatIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	chatIDField()
}

type memberWithPrismaChatIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaChatIDEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaChatIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaChatIDEqualsParam) memberModel() {}

func (p memberWithPrismaChatIDEqualsParam) chatIDField() {}

func (memberWithPrismaChatIDSetParam) settable()  {}
func (memberWithPrismaChatIDEqualsParam) equals() {}

type memberWithPrismaChatIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaChatIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaChatIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaChatIDEqualsUniqueParam) memberModel() {}
func (p memberWithPrismaChatIDEqualsUniqueParam) chatIDField() {}

func (memberWithPrismaChatIDEqualsUniqueParam) unique() {}
func (memberWithPrismaChatIDEqualsUniqueParam) equals() {}

type MemberWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	userIDField()
}

type MemberWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	userIDField()
}

type memberWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaUserIDSetParam) memberModel() {}

func (p memberWithPrismaUserIDSetParam) userIDField() {}

type MemberWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	userIDField()
}

type memberWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaUserIDEqualsParam) memberModel() {}

func (p memberWithPrismaUserIDEqualsParam) userIDField() {}

func (memberWithPrismaUserIDSetParam) settable()  {}
func (memberWithPrismaUserIDEqualsParam) equals() {}

type memberWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaUserIDEqualsUniqueParam) memberModel() {}
func (p memberWithPrismaUserIDEqualsUniqueParam) userIDField() {}

func (memberWithPrismaUserIDEqualsUniqueParam) unique() {}
func (memberWithPrismaUserIDEqualsUniqueParam) equals() {}

type MemberWithPrismaAddedByIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	addedByIDField()
}

type MemberWithPrismaAddedByIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	addedByIDField()
}

type memberWithPrismaAddedByIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaAddedByIDSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaAddedByIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaAddedByIDSetParam) memberModel() {}

func (p memberWithPrismaAddedByIDSetParam) addedByIDField() {}

type MemberWithPrismaAddedByIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	addedByIDField()
}

type memberWithPrismaAddedByIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaAddedByIDEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaAddedByIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaAddedByIDEqualsParam) memberModel() {}

func (p memberWithPrismaAddedByIDEqualsParam) addedByIDField() {}

func (memberWithPrismaAddedByIDSetParam) settable()  {}
func (memberWithPrismaAddedByIDEqualsParam) equals() {}

type memberWithPrismaAddedByIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaAddedByIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaAddedByIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaAddedByIDEqualsUniqueParam) memberModel()    {}
func (p memberWithPrismaAddedByIDEqualsUniqueParam) addedByIDField() {}

func (memberWithPrismaAddedByIDEqualsUniqueParam) unique() {}
func (memberWithPrismaAddedByIDEqualsUniqueParam) equals() {}

type MemberWithPrismaNumUnreadEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	numUnreadField()
}

type MemberWithPrismaNumUnreadSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	numUnreadField()
}

type memberWithPrismaNumUnreadSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaNumUnreadSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaNumUnreadSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaNumUnreadSetParam) memberModel() {}

func (p memberWithPrismaNumUnreadSetParam) numUnreadField() {}

type MemberWithPrismaNumUnreadWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	numUnreadField()
}

type memberWithPrismaNumUnreadEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaNumUnreadEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaNumUnreadEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaNumUnreadEqualsParam) memberModel() {}

func (p memberWithPrismaNumUnreadEqualsParam) numUnreadField() {}

func (memberWithPrismaNumUnreadSetParam) settable()  {}
func (memberWithPrismaNumUnreadEqualsParam) equals() {}

type memberWithPrismaNumUnreadEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaNumUnreadEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaNumUnreadEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaNumUnreadEqualsUniqueParam) memberModel()    {}
func (p memberWithPrismaNumUnreadEqualsUniqueParam) numUnreadField() {}

func (memberWithPrismaNumUnreadEqualsUniqueParam) unique() {}
func (memberWithPrismaNumUnreadEqualsUniqueParam) equals() {}

type MemberWithPrismaIsMutedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	isMutedField()
}

type MemberWithPrismaIsMutedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	isMutedField()
}

type memberWithPrismaIsMutedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaIsMutedSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaIsMutedSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaIsMutedSetParam) memberModel() {}

func (p memberWithPrismaIsMutedSetParam) isMutedField() {}

type MemberWithPrismaIsMutedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	isMutedField()
}

type memberWithPrismaIsMutedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaIsMutedEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaIsMutedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaIsMutedEqualsParam) memberModel() {}

func (p memberWithPrismaIsMutedEqualsParam) isMutedField() {}

func (memberWithPrismaIsMutedSetParam) settable()  {}
func (memberWithPrismaIsMutedEqualsParam) equals() {}

type memberWithPrismaIsMutedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaIsMutedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaIsMutedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaIsMutedEqualsUniqueParam) memberModel()  {}
func (p memberWithPrismaIsMutedEqualsUniqueParam) isMutedField() {}

func (memberWithPrismaIsMutedEqualsUniqueParam) unique() {}
func (memberWithPrismaIsMutedEqualsUniqueParam) equals() {}

type MemberWithPrismaIsPushEnabledEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	isPushEnabledField()
}

type MemberWithPrismaIsPushEnabledSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	isPushEnabledField()
}

type memberWithPrismaIsPushEnabledSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaIsPushEnabledSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaIsPushEnabledSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaIsPushEnabledSetParam) memberModel() {}

func (p memberWithPrismaIsPushEnabledSetParam) isPushEnabledField() {}

type MemberWithPrismaIsPushEnabledWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	isPushEnabledField()
}

type memberWithPrismaIsPushEnabledEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaIsPushEnabledEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaIsPushEnabledEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaIsPushEnabledEqualsParam) memberModel() {}

func (p memberWithPrismaIsPushEnabledEqualsParam) isPushEnabledField() {}

func (memberWithPrismaIsPushEnabledSetParam) settable()  {}
func (memberWithPrismaIsPushEnabledEqualsParam) equals() {}

type memberWithPrismaIsPushEnabledEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaIsPushEnabledEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaIsPushEnabledEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaIsPushEnabledEqualsUniqueParam) memberModel()        {}
func (p memberWithPrismaIsPushEnabledEqualsUniqueParam) isPushEnabledField() {}

func (memberWithPrismaIsPushEnabledEqualsUniqueParam) unique() {}
func (memberWithPrismaIsPushEnabledEqualsUniqueParam) equals() {}

type MemberWithPrismaHasModPermissionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	hasModPermissionField()
}

type MemberWithPrismaHasModPermissionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	hasModPermissionField()
}

type memberWithPrismaHasModPermissionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaHasModPermissionSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaHasModPermissionSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaHasModPermissionSetParam) memberModel() {}

func (p memberWithPrismaHasModPermissionSetParam) hasModPermissionField() {}

type MemberWithPrismaHasModPermissionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	hasModPermissionField()
}

type memberWithPrismaHasModPermissionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaHasModPermissionEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaHasModPermissionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaHasModPermissionEqualsParam) memberModel() {}

func (p memberWithPrismaHasModPermissionEqualsParam) hasModPermissionField() {}

func (memberWithPrismaHasModPermissionSetParam) settable()  {}
func (memberWithPrismaHasModPermissionEqualsParam) equals() {}

type memberWithPrismaHasModPermissionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaHasModPermissionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaHasModPermissionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaHasModPermissionEqualsUniqueParam) memberModel()           {}
func (p memberWithPrismaHasModPermissionEqualsUniqueParam) hasModPermissionField() {}

func (memberWithPrismaHasModPermissionEqualsUniqueParam) unique() {}
func (memberWithPrismaHasModPermissionEqualsUniqueParam) equals() {}

type MemberWithPrismaHasSendPermissionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	hasSendPermissionField()
}

type MemberWithPrismaHasSendPermissionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	hasSendPermissionField()
}

type memberWithPrismaHasSendPermissionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaHasSendPermissionSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaHasSendPermissionSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaHasSendPermissionSetParam) memberModel() {}

func (p memberWithPrismaHasSendPermissionSetParam) hasSendPermissionField() {}

type MemberWithPrismaHasSendPermissionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	hasSendPermissionField()
}

type memberWithPrismaHasSendPermissionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaHasSendPermissionEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaHasSendPermissionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaHasSendPermissionEqualsParam) memberModel() {}

func (p memberWithPrismaHasSendPermissionEqualsParam) hasSendPermissionField() {}

func (memberWithPrismaHasSendPermissionSetParam) settable()  {}
func (memberWithPrismaHasSendPermissionEqualsParam) equals() {}

type memberWithPrismaHasSendPermissionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaHasSendPermissionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaHasSendPermissionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaHasSendPermissionEqualsUniqueParam) memberModel()            {}
func (p memberWithPrismaHasSendPermissionEqualsUniqueParam) hasSendPermissionField() {}

func (memberWithPrismaHasSendPermissionEqualsUniqueParam) unique() {}
func (memberWithPrismaHasSendPermissionEqualsUniqueParam) equals() {}

type MemberWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	createdAtField()
}

type MemberWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	createdAtField()
}

type memberWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaCreatedAtSetParam) memberModel() {}

func (p memberWithPrismaCreatedAtSetParam) createdAtField() {}

type MemberWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	createdAtField()
}

type memberWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaCreatedAtEqualsParam) memberModel() {}

func (p memberWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (memberWithPrismaCreatedAtSetParam) settable()  {}
func (memberWithPrismaCreatedAtEqualsParam) equals() {}

type memberWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaCreatedAtEqualsUniqueParam) memberModel()    {}
func (p memberWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (memberWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (memberWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type MemberWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	updatedAtField()
}

type MemberWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	updatedAtField()
}

type memberWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaUpdatedAtSetParam) memberModel() {}

func (p memberWithPrismaUpdatedAtSetParam) updatedAtField() {}

type MemberWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	updatedAtField()
}

type memberWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaUpdatedAtEqualsParam) memberModel() {}

func (p memberWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (memberWithPrismaUpdatedAtSetParam) settable()  {}
func (memberWithPrismaUpdatedAtEqualsParam) equals() {}

type memberWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaUpdatedAtEqualsUniqueParam) memberModel()    {}
func (p memberWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (memberWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (memberWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type MemberWithPrismaChatEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	memberModel()
	chatField()
}

type MemberWithPrismaChatSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	chatField()
}

type memberWithPrismaChatSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaChatSetParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaChatSetParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaChatSetParam) memberModel() {}

func (p memberWithPrismaChatSetParam) chatField() {}

type MemberWithPrismaChatWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	memberModel()
	chatField()
}

type memberWithPrismaChatEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaChatEqualsParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaChatEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaChatEqualsParam) memberModel() {}

func (p memberWithPrismaChatEqualsParam) chatField() {}

func (memberWithPrismaChatSetParam) settable()  {}
func (memberWithPrismaChatEqualsParam) equals() {}

type memberWithPrismaChatEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p memberWithPrismaChatEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p memberWithPrismaChatEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p memberWithPrismaChatEqualsUniqueParam) memberModel() {}
func (p memberWithPrismaChatEqualsUniqueParam) chatField()   {}

func (memberWithPrismaChatEqualsUniqueParam) unique() {}
func (memberWithPrismaChatEqualsUniqueParam) equals() {}

type messageActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var messageOutput = []builder.Output{
	{Name: "id"},
	{Name: "chatId"},
	{Name: "senderId"},
	{Name: "version"},
	{Name: "contentType"},
	{Name: "content"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type MessageRelationWith interface {
	getQuery() builder.Query
	with()
	messageRelation()
}

type MessageWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
}

type messageDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageDefaultParam) field() builder.Field {
	return p.data
}

func (p messageDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p messageDefaultParam) messageModel() {}

type MessageOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
}

type messageOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageOrderByParam) field() builder.Field {
	return p.data
}

func (p messageOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p messageOrderByParam) messageModel() {}

type MessageCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	isCursor()
}

type messageCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageCursorParam) field() builder.Field {
	return p.data
}

func (p messageCursorParam) isCursor() {}

func (p messageCursorParam) getQuery() builder.Query {
	return p.query
}

func (p messageCursorParam) messageModel() {}

type MessageParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	messageModel()
}

type messageParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageParamUnique) messageModel() {}

func (messageParamUnique) unique() {}

func (p messageParamUnique) field() builder.Field {
	return p.data
}

func (p messageParamUnique) getQuery() builder.Query {
	return p.query
}

type MessageEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
}

type messageEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageEqualsParam) messageModel() {}

func (messageEqualsParam) equals() {}

func (p messageEqualsParam) field() builder.Field {
	return p.data
}

func (p messageEqualsParam) getQuery() builder.Query {
	return p.query
}

type MessageEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	messageModel()
}

type messageEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageEqualsUniqueParam) messageModel() {}

func (messageEqualsUniqueParam) unique() {}
func (messageEqualsUniqueParam) equals() {}

func (p messageEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type MessageSetParam interface {
	field() builder.Field
	settable()
	messageModel()
}

type messageSetParam struct {
	data builder.Field
}

func (messageSetParam) settable() {}

func (p messageSetParam) field() builder.Field {
	return p.data
}

func (p messageSetParam) messageModel() {}

type MessageWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	idField()
}

type MessageWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	idField()
}

type messageWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaIDSetParam) messageModel() {}

func (p messageWithPrismaIDSetParam) idField() {}

type MessageWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	idField()
}

type messageWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaIDEqualsParam) messageModel() {}

func (p messageWithPrismaIDEqualsParam) idField() {}

func (messageWithPrismaIDSetParam) settable()  {}
func (messageWithPrismaIDEqualsParam) equals() {}

type messageWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaIDEqualsUniqueParam) messageModel() {}
func (p messageWithPrismaIDEqualsUniqueParam) idField()      {}

func (messageWithPrismaIDEqualsUniqueParam) unique() {}
func (messageWithPrismaIDEqualsUniqueParam) equals() {}

type MessageWithPrismaChatIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	chatIDField()
}

type MessageWithPrismaChatIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	chatIDField()
}

type messageWithPrismaChatIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaChatIDSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaChatIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaChatIDSetParam) messageModel() {}

func (p messageWithPrismaChatIDSetParam) chatIDField() {}

type MessageWithPrismaChatIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	chatIDField()
}

type messageWithPrismaChatIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaChatIDEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaChatIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaChatIDEqualsParam) messageModel() {}

func (p messageWithPrismaChatIDEqualsParam) chatIDField() {}

func (messageWithPrismaChatIDSetParam) settable()  {}
func (messageWithPrismaChatIDEqualsParam) equals() {}

type messageWithPrismaChatIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaChatIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaChatIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaChatIDEqualsUniqueParam) messageModel() {}
func (p messageWithPrismaChatIDEqualsUniqueParam) chatIDField()  {}

func (messageWithPrismaChatIDEqualsUniqueParam) unique() {}
func (messageWithPrismaChatIDEqualsUniqueParam) equals() {}

type MessageWithPrismaSenderIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	senderIDField()
}

type MessageWithPrismaSenderIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	senderIDField()
}

type messageWithPrismaSenderIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaSenderIDSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaSenderIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaSenderIDSetParam) messageModel() {}

func (p messageWithPrismaSenderIDSetParam) senderIDField() {}

type MessageWithPrismaSenderIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	senderIDField()
}

type messageWithPrismaSenderIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaSenderIDEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaSenderIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaSenderIDEqualsParam) messageModel() {}

func (p messageWithPrismaSenderIDEqualsParam) senderIDField() {}

func (messageWithPrismaSenderIDSetParam) settable()  {}
func (messageWithPrismaSenderIDEqualsParam) equals() {}

type messageWithPrismaSenderIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaSenderIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaSenderIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaSenderIDEqualsUniqueParam) messageModel()  {}
func (p messageWithPrismaSenderIDEqualsUniqueParam) senderIDField() {}

func (messageWithPrismaSenderIDEqualsUniqueParam) unique() {}
func (messageWithPrismaSenderIDEqualsUniqueParam) equals() {}

type MessageWithPrismaVersionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	versionField()
}

type MessageWithPrismaVersionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	versionField()
}

type messageWithPrismaVersionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaVersionSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaVersionSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaVersionSetParam) messageModel() {}

func (p messageWithPrismaVersionSetParam) versionField() {}

type MessageWithPrismaVersionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	versionField()
}

type messageWithPrismaVersionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaVersionEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaVersionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaVersionEqualsParam) messageModel() {}

func (p messageWithPrismaVersionEqualsParam) versionField() {}

func (messageWithPrismaVersionSetParam) settable()  {}
func (messageWithPrismaVersionEqualsParam) equals() {}

type messageWithPrismaVersionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaVersionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaVersionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaVersionEqualsUniqueParam) messageModel() {}
func (p messageWithPrismaVersionEqualsUniqueParam) versionField() {}

func (messageWithPrismaVersionEqualsUniqueParam) unique() {}
func (messageWithPrismaVersionEqualsUniqueParam) equals() {}

type MessageWithPrismaContentTypeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	contentTypeField()
}

type MessageWithPrismaContentTypeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	contentTypeField()
}

type messageWithPrismaContentTypeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentTypeSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentTypeSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentTypeSetParam) messageModel() {}

func (p messageWithPrismaContentTypeSetParam) contentTypeField() {}

type MessageWithPrismaContentTypeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	contentTypeField()
}

type messageWithPrismaContentTypeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentTypeEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentTypeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentTypeEqualsParam) messageModel() {}

func (p messageWithPrismaContentTypeEqualsParam) contentTypeField() {}

func (messageWithPrismaContentTypeSetParam) settable()  {}
func (messageWithPrismaContentTypeEqualsParam) equals() {}

type messageWithPrismaContentTypeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentTypeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentTypeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentTypeEqualsUniqueParam) messageModel()     {}
func (p messageWithPrismaContentTypeEqualsUniqueParam) contentTypeField() {}

func (messageWithPrismaContentTypeEqualsUniqueParam) unique() {}
func (messageWithPrismaContentTypeEqualsUniqueParam) equals() {}

type MessageWithPrismaContentEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	contentField()
}

type MessageWithPrismaContentSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	contentField()
}

type messageWithPrismaContentSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentSetParam) messageModel() {}

func (p messageWithPrismaContentSetParam) contentField() {}

type MessageWithPrismaContentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	contentField()
}

type messageWithPrismaContentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentEqualsParam) messageModel() {}

func (p messageWithPrismaContentEqualsParam) contentField() {}

func (messageWithPrismaContentSetParam) settable()  {}
func (messageWithPrismaContentEqualsParam) equals() {}

type messageWithPrismaContentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentEqualsUniqueParam) messageModel() {}
func (p messageWithPrismaContentEqualsUniqueParam) contentField() {}

func (messageWithPrismaContentEqualsUniqueParam) unique() {}
func (messageWithPrismaContentEqualsUniqueParam) equals() {}

type MessageWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	createdAtField()
}

type MessageWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	createdAtField()
}

type messageWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaCreatedAtSetParam) messageModel() {}

func (p messageWithPrismaCreatedAtSetParam) createdAtField() {}

type MessageWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	createdAtField()
}

type messageWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaCreatedAtEqualsParam) messageModel() {}

func (p messageWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (messageWithPrismaCreatedAtSetParam) settable()  {}
func (messageWithPrismaCreatedAtEqualsParam) equals() {}

type messageWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaCreatedAtEqualsUniqueParam) messageModel()   {}
func (p messageWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (messageWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (messageWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type MessageWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	updatedAtField()
}

type MessageWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	updatedAtField()
}

type messageWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaUpdatedAtSetParam) messageModel() {}

func (p messageWithPrismaUpdatedAtSetParam) updatedAtField() {}

type MessageWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	updatedAtField()
}

type messageWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaUpdatedAtEqualsParam) messageModel() {}

func (p messageWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (messageWithPrismaUpdatedAtSetParam) settable()  {}
func (messageWithPrismaUpdatedAtEqualsParam) equals() {}

type messageWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p messageWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaUpdatedAtEqualsUniqueParam) messageModel()   {}
func (p messageWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (messageWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (messageWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type pointerActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var pointerOutput = []builder.Output{
	{Name: "chatId"},
	{Name: "userId"},
	{Name: "type"},
	{Name: "value"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type PointerRelationWith interface {
	getQuery() builder.Query
	with()
	pointerRelation()
}

type PointerWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
}

type pointerDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerDefaultParam) field() builder.Field {
	return p.data
}

func (p pointerDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p pointerDefaultParam) pointerModel() {}

type PointerOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
}

type pointerOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerOrderByParam) field() builder.Field {
	return p.data
}

func (p pointerOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p pointerOrderByParam) pointerModel() {}

type PointerCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	isCursor()
}

type pointerCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerCursorParam) field() builder.Field {
	return p.data
}

func (p pointerCursorParam) isCursor() {}

func (p pointerCursorParam) getQuery() builder.Query {
	return p.query
}

func (p pointerCursorParam) pointerModel() {}

type PointerParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	pointerModel()
}

type pointerParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p pointerParamUnique) pointerModel() {}

func (pointerParamUnique) unique() {}

func (p pointerParamUnique) field() builder.Field {
	return p.data
}

func (p pointerParamUnique) getQuery() builder.Query {
	return p.query
}

type PointerEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
}

type pointerEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerEqualsParam) pointerModel() {}

func (pointerEqualsParam) equals() {}

func (p pointerEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerEqualsParam) getQuery() builder.Query {
	return p.query
}

type PointerEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	pointerModel()
}

type pointerEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerEqualsUniqueParam) pointerModel() {}

func (pointerEqualsUniqueParam) unique() {}
func (pointerEqualsUniqueParam) equals() {}

func (p pointerEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PointerSetParam interface {
	field() builder.Field
	settable()
	pointerModel()
}

type pointerSetParam struct {
	data builder.Field
}

func (pointerSetParam) settable() {}

func (p pointerSetParam) field() builder.Field {
	return p.data
}

func (p pointerSetParam) pointerModel() {}

type PointerWithPrismaChatIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
	chatIDField()
}

type PointerWithPrismaChatIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	chatIDField()
}

type pointerWithPrismaChatIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaChatIDSetParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaChatIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaChatIDSetParam) pointerModel() {}

func (p pointerWithPrismaChatIDSetParam) chatIDField() {}

type PointerWithPrismaChatIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	chatIDField()
}

type pointerWithPrismaChatIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaChatIDEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaChatIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaChatIDEqualsParam) pointerModel() {}

func (p pointerWithPrismaChatIDEqualsParam) chatIDField() {}

func (pointerWithPrismaChatIDSetParam) settable()  {}
func (pointerWithPrismaChatIDEqualsParam) equals() {}

type pointerWithPrismaChatIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaChatIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaChatIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaChatIDEqualsUniqueParam) pointerModel() {}
func (p pointerWithPrismaChatIDEqualsUniqueParam) chatIDField()  {}

func (pointerWithPrismaChatIDEqualsUniqueParam) unique() {}
func (pointerWithPrismaChatIDEqualsUniqueParam) equals() {}

type PointerWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
	userIDField()
}

type PointerWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	userIDField()
}

type pointerWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaUserIDSetParam) pointerModel() {}

func (p pointerWithPrismaUserIDSetParam) userIDField() {}

type PointerWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	userIDField()
}

type pointerWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaUserIDEqualsParam) pointerModel() {}

func (p pointerWithPrismaUserIDEqualsParam) userIDField() {}

func (pointerWithPrismaUserIDSetParam) settable()  {}
func (pointerWithPrismaUserIDEqualsParam) equals() {}

type pointerWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaUserIDEqualsUniqueParam) pointerModel() {}
func (p pointerWithPrismaUserIDEqualsUniqueParam) userIDField()  {}

func (pointerWithPrismaUserIDEqualsUniqueParam) unique() {}
func (pointerWithPrismaUserIDEqualsUniqueParam) equals() {}

type PointerWithPrismaTypeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
	typeField()
}

type PointerWithPrismaTypeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	typeField()
}

type pointerWithPrismaTypeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaTypeSetParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaTypeSetParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaTypeSetParam) pointerModel() {}

func (p pointerWithPrismaTypeSetParam) typeField() {}

type PointerWithPrismaTypeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	typeField()
}

type pointerWithPrismaTypeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaTypeEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaTypeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaTypeEqualsParam) pointerModel() {}

func (p pointerWithPrismaTypeEqualsParam) typeField() {}

func (pointerWithPrismaTypeSetParam) settable()  {}
func (pointerWithPrismaTypeEqualsParam) equals() {}

type pointerWithPrismaTypeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaTypeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaTypeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaTypeEqualsUniqueParam) pointerModel() {}
func (p pointerWithPrismaTypeEqualsUniqueParam) typeField()    {}

func (pointerWithPrismaTypeEqualsUniqueParam) unique() {}
func (pointerWithPrismaTypeEqualsUniqueParam) equals() {}

type PointerWithPrismaValueEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
	valueField()
}

type PointerWithPrismaValueSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	valueField()
}

type pointerWithPrismaValueSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaValueSetParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaValueSetParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaValueSetParam) pointerModel() {}

func (p pointerWithPrismaValueSetParam) valueField() {}

type PointerWithPrismaValueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	valueField()
}

type pointerWithPrismaValueEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaValueEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaValueEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaValueEqualsParam) pointerModel() {}

func (p pointerWithPrismaValueEqualsParam) valueField() {}

func (pointerWithPrismaValueSetParam) settable()  {}
func (pointerWithPrismaValueEqualsParam) equals() {}

type pointerWithPrismaValueEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaValueEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaValueEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaValueEqualsUniqueParam) pointerModel() {}
func (p pointerWithPrismaValueEqualsUniqueParam) valueField()   {}

func (pointerWithPrismaValueEqualsUniqueParam) unique() {}
func (pointerWithPrismaValueEqualsUniqueParam) equals() {}

type PointerWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
	createdAtField()
}

type PointerWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	createdAtField()
}

type pointerWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaCreatedAtSetParam) pointerModel() {}

func (p pointerWithPrismaCreatedAtSetParam) createdAtField() {}

type PointerWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	createdAtField()
}

type pointerWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaCreatedAtEqualsParam) pointerModel() {}

func (p pointerWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (pointerWithPrismaCreatedAtSetParam) settable()  {}
func (pointerWithPrismaCreatedAtEqualsParam) equals() {}

type pointerWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaCreatedAtEqualsUniqueParam) pointerModel()   {}
func (p pointerWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (pointerWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (pointerWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PointerWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pointerModel()
	updatedAtField()
}

type PointerWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	updatedAtField()
}

type pointerWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaUpdatedAtSetParam) pointerModel() {}

func (p pointerWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PointerWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pointerModel()
	updatedAtField()
}

type pointerWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaUpdatedAtEqualsParam) pointerModel() {}

func (p pointerWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (pointerWithPrismaUpdatedAtSetParam) settable()  {}
func (pointerWithPrismaUpdatedAtEqualsParam) equals() {}

type pointerWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pointerWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pointerWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pointerWithPrismaUpdatedAtEqualsUniqueParam) pointerModel()   {}
func (p pointerWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (pointerWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (pointerWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type pushTokenActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var pushTokenOutput = []builder.Output{
	{Name: "userId"},
	{Name: "appInstallId"},
	{Name: "token"},
	{Name: "type"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type PushTokenRelationWith interface {
	getQuery() builder.Query
	with()
	pushTokenRelation()
}

type PushTokenWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
}

type pushTokenDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenDefaultParam) field() builder.Field {
	return p.data
}

func (p pushTokenDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenDefaultParam) pushTokenModel() {}

type PushTokenOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
}

type pushTokenOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenOrderByParam) field() builder.Field {
	return p.data
}

func (p pushTokenOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenOrderByParam) pushTokenModel() {}

type PushTokenCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	isCursor()
}

type pushTokenCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenCursorParam) field() builder.Field {
	return p.data
}

func (p pushTokenCursorParam) isCursor() {}

func (p pushTokenCursorParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenCursorParam) pushTokenModel() {}

type PushTokenParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	pushTokenModel()
}

type pushTokenParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenParamUnique) pushTokenModel() {}

func (pushTokenParamUnique) unique() {}

func (p pushTokenParamUnique) field() builder.Field {
	return p.data
}

func (p pushTokenParamUnique) getQuery() builder.Query {
	return p.query
}

type PushTokenEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
}

type pushTokenEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenEqualsParam) pushTokenModel() {}

func (pushTokenEqualsParam) equals() {}

func (p pushTokenEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenEqualsParam) getQuery() builder.Query {
	return p.query
}

type PushTokenEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	pushTokenModel()
}

type pushTokenEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenEqualsUniqueParam) pushTokenModel() {}

func (pushTokenEqualsUniqueParam) unique() {}
func (pushTokenEqualsUniqueParam) equals() {}

func (p pushTokenEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PushTokenSetParam interface {
	field() builder.Field
	settable()
	pushTokenModel()
}

type pushTokenSetParam struct {
	data builder.Field
}

func (pushTokenSetParam) settable() {}

func (p pushTokenSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenSetParam) pushTokenModel() {}

type PushTokenWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
	userIDField()
}

type PushTokenWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	userIDField()
}

type pushTokenWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaUserIDSetParam) pushTokenModel() {}

func (p pushTokenWithPrismaUserIDSetParam) userIDField() {}

type PushTokenWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	userIDField()
}

type pushTokenWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaUserIDEqualsParam) pushTokenModel() {}

func (p pushTokenWithPrismaUserIDEqualsParam) userIDField() {}

func (pushTokenWithPrismaUserIDSetParam) settable()  {}
func (pushTokenWithPrismaUserIDEqualsParam) equals() {}

type pushTokenWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaUserIDEqualsUniqueParam) pushTokenModel() {}
func (p pushTokenWithPrismaUserIDEqualsUniqueParam) userIDField()    {}

func (pushTokenWithPrismaUserIDEqualsUniqueParam) unique() {}
func (pushTokenWithPrismaUserIDEqualsUniqueParam) equals() {}

type PushTokenWithPrismaAppInstallIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
	appInstallIDField()
}

type PushTokenWithPrismaAppInstallIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	appInstallIDField()
}

type pushTokenWithPrismaAppInstallIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaAppInstallIDSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaAppInstallIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaAppInstallIDSetParam) pushTokenModel() {}

func (p pushTokenWithPrismaAppInstallIDSetParam) appInstallIDField() {}

type PushTokenWithPrismaAppInstallIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	appInstallIDField()
}

type pushTokenWithPrismaAppInstallIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaAppInstallIDEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaAppInstallIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaAppInstallIDEqualsParam) pushTokenModel() {}

func (p pushTokenWithPrismaAppInstallIDEqualsParam) appInstallIDField() {}

func (pushTokenWithPrismaAppInstallIDSetParam) settable()  {}
func (pushTokenWithPrismaAppInstallIDEqualsParam) equals() {}

type pushTokenWithPrismaAppInstallIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaAppInstallIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaAppInstallIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaAppInstallIDEqualsUniqueParam) pushTokenModel()    {}
func (p pushTokenWithPrismaAppInstallIDEqualsUniqueParam) appInstallIDField() {}

func (pushTokenWithPrismaAppInstallIDEqualsUniqueParam) unique() {}
func (pushTokenWithPrismaAppInstallIDEqualsUniqueParam) equals() {}

type PushTokenWithPrismaTokenEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
	tokenField()
}

type PushTokenWithPrismaTokenSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	tokenField()
}

type pushTokenWithPrismaTokenSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaTokenSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaTokenSetParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaTokenSetParam) pushTokenModel() {}

func (p pushTokenWithPrismaTokenSetParam) tokenField() {}

type PushTokenWithPrismaTokenWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	tokenField()
}

type pushTokenWithPrismaTokenEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaTokenEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaTokenEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaTokenEqualsParam) pushTokenModel() {}

func (p pushTokenWithPrismaTokenEqualsParam) tokenField() {}

func (pushTokenWithPrismaTokenSetParam) settable()  {}
func (pushTokenWithPrismaTokenEqualsParam) equals() {}

type pushTokenWithPrismaTokenEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaTokenEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaTokenEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaTokenEqualsUniqueParam) pushTokenModel() {}
func (p pushTokenWithPrismaTokenEqualsUniqueParam) tokenField()     {}

func (pushTokenWithPrismaTokenEqualsUniqueParam) unique() {}
func (pushTokenWithPrismaTokenEqualsUniqueParam) equals() {}

type PushTokenWithPrismaTypeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
	typeField()
}

type PushTokenWithPrismaTypeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	typeField()
}

type pushTokenWithPrismaTypeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaTypeSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaTypeSetParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaTypeSetParam) pushTokenModel() {}

func (p pushTokenWithPrismaTypeSetParam) typeField() {}

type PushTokenWithPrismaTypeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	typeField()
}

type pushTokenWithPrismaTypeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaTypeEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaTypeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaTypeEqualsParam) pushTokenModel() {}

func (p pushTokenWithPrismaTypeEqualsParam) typeField() {}

func (pushTokenWithPrismaTypeSetParam) settable()  {}
func (pushTokenWithPrismaTypeEqualsParam) equals() {}

type pushTokenWithPrismaTypeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaTypeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaTypeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaTypeEqualsUniqueParam) pushTokenModel() {}
func (p pushTokenWithPrismaTypeEqualsUniqueParam) typeField()      {}

func (pushTokenWithPrismaTypeEqualsUniqueParam) unique() {}
func (pushTokenWithPrismaTypeEqualsUniqueParam) equals() {}

type PushTokenWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
	createdAtField()
}

type PushTokenWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	createdAtField()
}

type pushTokenWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaCreatedAtSetParam) pushTokenModel() {}

func (p pushTokenWithPrismaCreatedAtSetParam) createdAtField() {}

type PushTokenWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	createdAtField()
}

type pushTokenWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaCreatedAtEqualsParam) pushTokenModel() {}

func (p pushTokenWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (pushTokenWithPrismaCreatedAtSetParam) settable()  {}
func (pushTokenWithPrismaCreatedAtEqualsParam) equals() {}

type pushTokenWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaCreatedAtEqualsUniqueParam) pushTokenModel() {}
func (p pushTokenWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (pushTokenWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (pushTokenWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PushTokenWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pushTokenModel()
	updatedAtField()
}

type PushTokenWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	updatedAtField()
}

type pushTokenWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaUpdatedAtSetParam) pushTokenModel() {}

func (p pushTokenWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PushTokenWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pushTokenModel()
	updatedAtField()
}

type pushTokenWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaUpdatedAtEqualsParam) pushTokenModel() {}

func (p pushTokenWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (pushTokenWithPrismaUpdatedAtSetParam) settable()  {}
func (pushTokenWithPrismaUpdatedAtEqualsParam) equals() {}

type pushTokenWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pushTokenWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pushTokenWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pushTokenWithPrismaUpdatedAtEqualsUniqueParam) pushTokenModel() {}
func (p pushTokenWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (pushTokenWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (pushTokenWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_id UserWithPrismaIDSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _id.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single publicKey.
func (r publicKeyActions) CreateOne(
	_key PublicKeyWithPrismaKeySetParam,
	_user PublicKeyWithPrismaUserSetParam,

	optional ...PublicKeySetParam,
) publicKeyCreateOne {
	var v publicKeyCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "PublicKey"
	v.query.Outputs = publicKeyOutput

	var fields []builder.Field

	fields = append(fields, _key.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r publicKeyCreateOne) With(params ...PublicKeyRelationWith) publicKeyCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type publicKeyCreateOne struct {
	query builder.Query
}

func (p publicKeyCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p publicKeyCreateOne) publicKeyModel() {}

func (r publicKeyCreateOne) Exec(ctx context.Context) (*PublicKeyModel, error) {
	var v PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyCreateOne) Tx() PublicKeyUniqueTxResult {
	v := newPublicKeyUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single intent.
func (r intentActions) CreateOne(
	_id IntentWithPrismaIDSetParam,
	_isFulfilled IntentWithPrismaIsFulfilledSetParam,

	optional ...IntentSetParam,
) intentCreateOne {
	var v intentCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Intent"
	v.query.Outputs = intentOutput

	var fields []builder.Field

	fields = append(fields, _id.field())
	fields = append(fields, _isFulfilled.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r intentCreateOne) With(params ...IntentRelationWith) intentCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type intentCreateOne struct {
	query builder.Query
}

func (p intentCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p intentCreateOne) intentModel() {}

func (r intentCreateOne) Exec(ctx context.Context) (*IntentModel, error) {
	var v IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r intentCreateOne) Tx() IntentUniqueTxResult {
	v := newIntentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single chat.
func (r chatActions) CreateOne(
	_id ChatWithPrismaIDSetParam,
	_title ChatWithPrismaTitleSetParam,

	optional ...ChatSetParam,
) chatCreateOne {
	var v chatCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Chat"
	v.query.Outputs = chatOutput

	var fields []builder.Field

	fields = append(fields, _id.field())
	fields = append(fields, _title.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r chatCreateOne) With(params ...ChatRelationWith) chatCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type chatCreateOne struct {
	query builder.Query
}

func (p chatCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p chatCreateOne) chatModel() {}

func (r chatCreateOne) Exec(ctx context.Context) (*ChatModel, error) {
	var v ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatCreateOne) Tx() ChatUniqueTxResult {
	v := newChatUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single member.
func (r memberActions) CreateOne(
	_userID MemberWithPrismaUserIDSetParam,
	_chat MemberWithPrismaChatSetParam,

	optional ...MemberSetParam,
) memberCreateOne {
	var v memberCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Member"
	v.query.Outputs = memberOutput

	var fields []builder.Field

	fields = append(fields, _userID.field())
	fields = append(fields, _chat.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r memberCreateOne) With(params ...MemberRelationWith) memberCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type memberCreateOne struct {
	query builder.Query
}

func (p memberCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p memberCreateOne) memberModel() {}

func (r memberCreateOne) Exec(ctx context.Context) (*MemberModel, error) {
	var v MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberCreateOne) Tx() MemberUniqueTxResult {
	v := newMemberUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single message.
func (r messageActions) CreateOne(
	_id MessageWithPrismaIDSetParam,
	_chatID MessageWithPrismaChatIDSetParam,
	_content MessageWithPrismaContentSetParam,

	optional ...MessageSetParam,
) messageCreateOne {
	var v messageCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	var fields []builder.Field

	fields = append(fields, _id.field())
	fields = append(fields, _chatID.field())
	fields = append(fields, _content.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r messageCreateOne) With(params ...MessageRelationWith) messageCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type messageCreateOne struct {
	query builder.Query
}

func (p messageCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p messageCreateOne) messageModel() {}

func (r messageCreateOne) Exec(ctx context.Context) (*MessageModel, error) {
	var v MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r messageCreateOne) Tx() MessageUniqueTxResult {
	v := newMessageUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single pointer.
func (r pointerActions) CreateOne(
	_chatID PointerWithPrismaChatIDSetParam,
	_userID PointerWithPrismaUserIDSetParam,
	_value PointerWithPrismaValueSetParam,

	optional ...PointerSetParam,
) pointerCreateOne {
	var v pointerCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Pointer"
	v.query.Outputs = pointerOutput

	var fields []builder.Field

	fields = append(fields, _chatID.field())
	fields = append(fields, _userID.field())
	fields = append(fields, _value.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r pointerCreateOne) With(params ...PointerRelationWith) pointerCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type pointerCreateOne struct {
	query builder.Query
}

func (p pointerCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p pointerCreateOne) pointerModel() {}

func (r pointerCreateOne) Exec(ctx context.Context) (*PointerModel, error) {
	var v PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pointerCreateOne) Tx() PointerUniqueTxResult {
	v := newPointerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single pushToken.
func (r pushTokenActions) CreateOne(
	_userID PushTokenWithPrismaUserIDSetParam,
	_appInstallID PushTokenWithPrismaAppInstallIDSetParam,
	_token PushTokenWithPrismaTokenSetParam,

	optional ...PushTokenSetParam,
) pushTokenCreateOne {
	var v pushTokenCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "PushToken"
	v.query.Outputs = pushTokenOutput

	var fields []builder.Field

	fields = append(fields, _userID.field())
	fields = append(fields, _appInstallID.field())
	fields = append(fields, _token.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r pushTokenCreateOne) With(params ...PushTokenRelationWith) pushTokenCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type pushTokenCreateOne struct {
	query builder.Query
}

func (p pushTokenCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p pushTokenCreateOne) pushTokenModel() {}

func (r pushTokenCreateOne) Exec(ctx context.Context) (*PushTokenModel, error) {
	var v PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pushTokenCreateOne) Tx() PushTokenUniqueTxResult {
	v := newPushTokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userToPublicKeysFindUnique struct {
	query builder.Query
}

func (r userToPublicKeysFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysFindUnique) with()         {}
func (r userToPublicKeysFindUnique) userModel()    {}
func (r userToPublicKeysFindUnique) userRelation() {}

func (r userToPublicKeysFindUnique) With(params ...PublicKeyRelationWith) userToPublicKeysFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPublicKeysFindUnique) Select(params ...userPrismaFields) userToPublicKeysFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToPublicKeysFindUnique) Omit(params ...userPrismaFields) userToPublicKeysFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToPublicKeysFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPublicKeysFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPublicKeysFindUnique) Update(params ...UserSetParam) userToPublicKeysUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToPublicKeysUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToPublicKeysUpdateUnique struct {
	query builder.Query
}

func (r userToPublicKeysUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysUpdateUnique) userModel() {}

func (r userToPublicKeysUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicKeysUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToPublicKeysFindUnique) Delete() userToPublicKeysDeleteUnique {
	var v userToPublicKeysDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToPublicKeysDeleteUnique struct {
	query builder.Query
}

func (r userToPublicKeysDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToPublicKeysDeleteUnique) userModel() {}

func (r userToPublicKeysDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicKeysDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToPublicKeysFindFirst struct {
	query builder.Query
}

func (r userToPublicKeysFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysFindFirst) with()         {}
func (r userToPublicKeysFindFirst) userModel()    {}
func (r userToPublicKeysFindFirst) userRelation() {}

func (r userToPublicKeysFindFirst) With(params ...PublicKeyRelationWith) userToPublicKeysFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPublicKeysFindFirst) Select(params ...userPrismaFields) userToPublicKeysFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToPublicKeysFindFirst) Omit(params ...userPrismaFields) userToPublicKeysFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToPublicKeysFindFirst) OrderBy(params ...PublicKeyOrderByParam) userToPublicKeysFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToPublicKeysFindFirst) Skip(count int) userToPublicKeysFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToPublicKeysFindFirst) Take(count int) userToPublicKeysFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToPublicKeysFindFirst) Cursor(cursor UserCursorParam) userToPublicKeysFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToPublicKeysFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPublicKeysFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToPublicKeysFindMany struct {
	query builder.Query
}

func (r userToPublicKeysFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysFindMany) with()         {}
func (r userToPublicKeysFindMany) userModel()    {}
func (r userToPublicKeysFindMany) userRelation() {}

func (r userToPublicKeysFindMany) With(params ...PublicKeyRelationWith) userToPublicKeysFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPublicKeysFindMany) Select(params ...userPrismaFields) userToPublicKeysFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToPublicKeysFindMany) Omit(params ...userPrismaFields) userToPublicKeysFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToPublicKeysFindMany) OrderBy(params ...PublicKeyOrderByParam) userToPublicKeysFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToPublicKeysFindMany) Skip(count int) userToPublicKeysFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToPublicKeysFindMany) Take(count int) userToPublicKeysFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToPublicKeysFindMany) Cursor(cursor UserCursorParam) userToPublicKeysFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToPublicKeysFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToPublicKeysFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToPublicKeysFindMany) Update(params ...UserSetParam) userToPublicKeysUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToPublicKeysUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToPublicKeysUpdateMany struct {
	query builder.Query
}

func (r userToPublicKeysUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicKeysUpdateMany) userModel() {}

func (r userToPublicKeysUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicKeysUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToPublicKeysFindMany) Delete() userToPublicKeysDeleteMany {
	var v userToPublicKeysDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToPublicKeysDeleteMany struct {
	query builder.Query
}

func (r userToPublicKeysDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToPublicKeysDeleteMany) userModel() {}

func (r userToPublicKeysDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicKeysDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Select(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Omit(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) Select(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) Omit(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) Select(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) Omit(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicKeyToUserFindUnique struct {
	query builder.Query
}

func (r publicKeyToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserFindUnique) with()              {}
func (r publicKeyToUserFindUnique) publicKeyModel()    {}
func (r publicKeyToUserFindUnique) publicKeyRelation() {}

func (r publicKeyToUserFindUnique) With(params ...UserRelationWith) publicKeyToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicKeyToUserFindUnique) Select(params ...publicKeyPrismaFields) publicKeyToUserFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyToUserFindUnique) Omit(params ...publicKeyPrismaFields) publicKeyToUserFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range publicKeyOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyToUserFindUnique) Exec(ctx context.Context) (
	*PublicKeyModel,
	error,
) {
	var v *PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicKeyToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerPublicKey,
	error,
) {
	var v *InnerPublicKey
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicKeyToUserFindUnique) Update(params ...PublicKeySetParam) publicKeyToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PublicKey"

	var v publicKeyToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicKeyToUserUpdateUnique struct {
	query builder.Query
}

func (r publicKeyToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserUpdateUnique) publicKeyModel() {}

func (r publicKeyToUserUpdateUnique) Exec(ctx context.Context) (*PublicKeyModel, error) {
	var v PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyToUserUpdateUnique) Tx() PublicKeyUniqueTxResult {
	v := newPublicKeyUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicKeyToUserFindUnique) Delete() publicKeyToUserDeleteUnique {
	var v publicKeyToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PublicKey"

	return v
}

type publicKeyToUserDeleteUnique struct {
	query builder.Query
}

func (r publicKeyToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p publicKeyToUserDeleteUnique) publicKeyModel() {}

func (r publicKeyToUserDeleteUnique) Exec(ctx context.Context) (*PublicKeyModel, error) {
	var v PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyToUserDeleteUnique) Tx() PublicKeyUniqueTxResult {
	v := newPublicKeyUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicKeyToUserFindFirst struct {
	query builder.Query
}

func (r publicKeyToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserFindFirst) with()              {}
func (r publicKeyToUserFindFirst) publicKeyModel()    {}
func (r publicKeyToUserFindFirst) publicKeyRelation() {}

func (r publicKeyToUserFindFirst) With(params ...UserRelationWith) publicKeyToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicKeyToUserFindFirst) Select(params ...publicKeyPrismaFields) publicKeyToUserFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyToUserFindFirst) Omit(params ...publicKeyPrismaFields) publicKeyToUserFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range publicKeyOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyToUserFindFirst) OrderBy(params ...UserOrderByParam) publicKeyToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicKeyToUserFindFirst) Skip(count int) publicKeyToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicKeyToUserFindFirst) Take(count int) publicKeyToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicKeyToUserFindFirst) Cursor(cursor PublicKeyCursorParam) publicKeyToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicKeyToUserFindFirst) Exec(ctx context.Context) (
	*PublicKeyModel,
	error,
) {
	var v *PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicKeyToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerPublicKey,
	error,
) {
	var v *InnerPublicKey
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type publicKeyToUserFindMany struct {
	query builder.Query
}

func (r publicKeyToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserFindMany) with()              {}
func (r publicKeyToUserFindMany) publicKeyModel()    {}
func (r publicKeyToUserFindMany) publicKeyRelation() {}

func (r publicKeyToUserFindMany) With(params ...UserRelationWith) publicKeyToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicKeyToUserFindMany) Select(params ...publicKeyPrismaFields) publicKeyToUserFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyToUserFindMany) Omit(params ...publicKeyPrismaFields) publicKeyToUserFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range publicKeyOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyToUserFindMany) OrderBy(params ...UserOrderByParam) publicKeyToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicKeyToUserFindMany) Skip(count int) publicKeyToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicKeyToUserFindMany) Take(count int) publicKeyToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicKeyToUserFindMany) Cursor(cursor PublicKeyCursorParam) publicKeyToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicKeyToUserFindMany) Exec(ctx context.Context) (
	[]PublicKeyModel,
	error,
) {
	var v []PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicKeyToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerPublicKey,
	error,
) {
	var v []InnerPublicKey
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicKeyToUserFindMany) Update(params ...PublicKeySetParam) publicKeyToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PublicKey"

	r.query.Outputs = countOutput

	var v publicKeyToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicKeyToUserUpdateMany struct {
	query builder.Query
}

func (r publicKeyToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyToUserUpdateMany) publicKeyModel() {}

func (r publicKeyToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyToUserUpdateMany) Tx() PublicKeyManyTxResult {
	v := newPublicKeyManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicKeyToUserFindMany) Delete() publicKeyToUserDeleteMany {
	var v publicKeyToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PublicKey"

	v.query.Outputs = countOutput

	return v
}

type publicKeyToUserDeleteMany struct {
	query builder.Query
}

func (r publicKeyToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p publicKeyToUserDeleteMany) publicKeyModel() {}

func (r publicKeyToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyToUserDeleteMany) Tx() PublicKeyManyTxResult {
	v := newPublicKeyManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicKeyFindUnique struct {
	query builder.Query
}

func (r publicKeyFindUnique) getQuery() builder.Query {
	return r.query
}

func (r publicKeyFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyFindUnique) with()              {}
func (r publicKeyFindUnique) publicKeyModel()    {}
func (r publicKeyFindUnique) publicKeyRelation() {}

func (r publicKeyActions) FindUnique(
	params PublicKeyEqualsUniqueWhereParam,
) publicKeyFindUnique {
	var v publicKeyFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "PublicKey"
	v.query.Outputs = publicKeyOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r publicKeyFindUnique) With(params ...PublicKeyRelationWith) publicKeyFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicKeyFindUnique) Select(params ...publicKeyPrismaFields) publicKeyFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyFindUnique) Omit(params ...publicKeyPrismaFields) publicKeyFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range publicKeyOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyFindUnique) Exec(ctx context.Context) (
	*PublicKeyModel,
	error,
) {
	var v *PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicKeyFindUnique) ExecInner(ctx context.Context) (
	*InnerPublicKey,
	error,
) {
	var v *InnerPublicKey
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicKeyFindUnique) Update(params ...PublicKeySetParam) publicKeyUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PublicKey"

	var v publicKeyUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicKeyUpdateUnique struct {
	query builder.Query
}

func (r publicKeyUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyUpdateUnique) publicKeyModel() {}

func (r publicKeyUpdateUnique) Exec(ctx context.Context) (*PublicKeyModel, error) {
	var v PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyUpdateUnique) Tx() PublicKeyUniqueTxResult {
	v := newPublicKeyUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicKeyFindUnique) Delete() publicKeyDeleteUnique {
	var v publicKeyDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PublicKey"

	return v
}

type publicKeyDeleteUnique struct {
	query builder.Query
}

func (r publicKeyDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p publicKeyDeleteUnique) publicKeyModel() {}

func (r publicKeyDeleteUnique) Exec(ctx context.Context) (*PublicKeyModel, error) {
	var v PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyDeleteUnique) Tx() PublicKeyUniqueTxResult {
	v := newPublicKeyUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicKeyFindFirst struct {
	query builder.Query
}

func (r publicKeyFindFirst) getQuery() builder.Query {
	return r.query
}

func (r publicKeyFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyFindFirst) with()              {}
func (r publicKeyFindFirst) publicKeyModel()    {}
func (r publicKeyFindFirst) publicKeyRelation() {}

func (r publicKeyActions) FindFirst(
	params ...PublicKeyWhereParam,
) publicKeyFindFirst {
	var v publicKeyFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "PublicKey"
	v.query.Outputs = publicKeyOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r publicKeyFindFirst) With(params ...PublicKeyRelationWith) publicKeyFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicKeyFindFirst) Select(params ...publicKeyPrismaFields) publicKeyFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyFindFirst) Omit(params ...publicKeyPrismaFields) publicKeyFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range publicKeyOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyFindFirst) OrderBy(params ...PublicKeyOrderByParam) publicKeyFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicKeyFindFirst) Skip(count int) publicKeyFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicKeyFindFirst) Take(count int) publicKeyFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicKeyFindFirst) Cursor(cursor PublicKeyCursorParam) publicKeyFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicKeyFindFirst) Exec(ctx context.Context) (
	*PublicKeyModel,
	error,
) {
	var v *PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicKeyFindFirst) ExecInner(ctx context.Context) (
	*InnerPublicKey,
	error,
) {
	var v *InnerPublicKey
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type publicKeyFindMany struct {
	query builder.Query
}

func (r publicKeyFindMany) getQuery() builder.Query {
	return r.query
}

func (r publicKeyFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyFindMany) with()              {}
func (r publicKeyFindMany) publicKeyModel()    {}
func (r publicKeyFindMany) publicKeyRelation() {}

func (r publicKeyActions) FindMany(
	params ...PublicKeyWhereParam,
) publicKeyFindMany {
	var v publicKeyFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "PublicKey"
	v.query.Outputs = publicKeyOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r publicKeyFindMany) With(params ...PublicKeyRelationWith) publicKeyFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicKeyFindMany) Select(params ...publicKeyPrismaFields) publicKeyFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyFindMany) Omit(params ...publicKeyPrismaFields) publicKeyFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range publicKeyOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r publicKeyFindMany) OrderBy(params ...PublicKeyOrderByParam) publicKeyFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicKeyFindMany) Skip(count int) publicKeyFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicKeyFindMany) Take(count int) publicKeyFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicKeyFindMany) Cursor(cursor PublicKeyCursorParam) publicKeyFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicKeyFindMany) Exec(ctx context.Context) (
	[]PublicKeyModel,
	error,
) {
	var v []PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicKeyFindMany) ExecInner(ctx context.Context) (
	[]InnerPublicKey,
	error,
) {
	var v []InnerPublicKey
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicKeyFindMany) Update(params ...PublicKeySetParam) publicKeyUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PublicKey"

	r.query.Outputs = countOutput

	var v publicKeyUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicKeyUpdateMany struct {
	query builder.Query
}

func (r publicKeyUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyUpdateMany) publicKeyModel() {}

func (r publicKeyUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyUpdateMany) Tx() PublicKeyManyTxResult {
	v := newPublicKeyManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicKeyFindMany) Delete() publicKeyDeleteMany {
	var v publicKeyDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PublicKey"

	v.query.Outputs = countOutput

	return v
}

type publicKeyDeleteMany struct {
	query builder.Query
}

func (r publicKeyDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p publicKeyDeleteMany) publicKeyModel() {}

func (r publicKeyDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyDeleteMany) Tx() PublicKeyManyTxResult {
	v := newPublicKeyManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type intentFindUnique struct {
	query builder.Query
}

func (r intentFindUnique) getQuery() builder.Query {
	return r.query
}

func (r intentFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r intentFindUnique) with()           {}
func (r intentFindUnique) intentModel()    {}
func (r intentFindUnique) intentRelation() {}

func (r intentActions) FindUnique(
	params IntentEqualsUniqueWhereParam,
) intentFindUnique {
	var v intentFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Intent"
	v.query.Outputs = intentOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r intentFindUnique) With(params ...IntentRelationWith) intentFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r intentFindUnique) Select(params ...intentPrismaFields) intentFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r intentFindUnique) Omit(params ...intentPrismaFields) intentFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range intentOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r intentFindUnique) Exec(ctx context.Context) (
	*IntentModel,
	error,
) {
	var v *IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r intentFindUnique) ExecInner(ctx context.Context) (
	*InnerIntent,
	error,
) {
	var v *InnerIntent
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r intentFindUnique) Update(params ...IntentSetParam) intentUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Intent"

	var v intentUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type intentUpdateUnique struct {
	query builder.Query
}

func (r intentUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r intentUpdateUnique) intentModel() {}

func (r intentUpdateUnique) Exec(ctx context.Context) (*IntentModel, error) {
	var v IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r intentUpdateUnique) Tx() IntentUniqueTxResult {
	v := newIntentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r intentFindUnique) Delete() intentDeleteUnique {
	var v intentDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Intent"

	return v
}

type intentDeleteUnique struct {
	query builder.Query
}

func (r intentDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p intentDeleteUnique) intentModel() {}

func (r intentDeleteUnique) Exec(ctx context.Context) (*IntentModel, error) {
	var v IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r intentDeleteUnique) Tx() IntentUniqueTxResult {
	v := newIntentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type intentFindFirst struct {
	query builder.Query
}

func (r intentFindFirst) getQuery() builder.Query {
	return r.query
}

func (r intentFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r intentFindFirst) with()           {}
func (r intentFindFirst) intentModel()    {}
func (r intentFindFirst) intentRelation() {}

func (r intentActions) FindFirst(
	params ...IntentWhereParam,
) intentFindFirst {
	var v intentFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Intent"
	v.query.Outputs = intentOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r intentFindFirst) With(params ...IntentRelationWith) intentFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r intentFindFirst) Select(params ...intentPrismaFields) intentFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r intentFindFirst) Omit(params ...intentPrismaFields) intentFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range intentOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r intentFindFirst) OrderBy(params ...IntentOrderByParam) intentFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r intentFindFirst) Skip(count int) intentFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r intentFindFirst) Take(count int) intentFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r intentFindFirst) Cursor(cursor IntentCursorParam) intentFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r intentFindFirst) Exec(ctx context.Context) (
	*IntentModel,
	error,
) {
	var v *IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r intentFindFirst) ExecInner(ctx context.Context) (
	*InnerIntent,
	error,
) {
	var v *InnerIntent
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type intentFindMany struct {
	query builder.Query
}

func (r intentFindMany) getQuery() builder.Query {
	return r.query
}

func (r intentFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r intentFindMany) with()           {}
func (r intentFindMany) intentModel()    {}
func (r intentFindMany) intentRelation() {}

func (r intentActions) FindMany(
	params ...IntentWhereParam,
) intentFindMany {
	var v intentFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Intent"
	v.query.Outputs = intentOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r intentFindMany) With(params ...IntentRelationWith) intentFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r intentFindMany) Select(params ...intentPrismaFields) intentFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r intentFindMany) Omit(params ...intentPrismaFields) intentFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range intentOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r intentFindMany) OrderBy(params ...IntentOrderByParam) intentFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r intentFindMany) Skip(count int) intentFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r intentFindMany) Take(count int) intentFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r intentFindMany) Cursor(cursor IntentCursorParam) intentFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r intentFindMany) Exec(ctx context.Context) (
	[]IntentModel,
	error,
) {
	var v []IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r intentFindMany) ExecInner(ctx context.Context) (
	[]InnerIntent,
	error,
) {
	var v []InnerIntent
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r intentFindMany) Update(params ...IntentSetParam) intentUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Intent"

	r.query.Outputs = countOutput

	var v intentUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type intentUpdateMany struct {
	query builder.Query
}

func (r intentUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r intentUpdateMany) intentModel() {}

func (r intentUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r intentUpdateMany) Tx() IntentManyTxResult {
	v := newIntentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r intentFindMany) Delete() intentDeleteMany {
	var v intentDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Intent"

	v.query.Outputs = countOutput

	return v
}

type intentDeleteMany struct {
	query builder.Query
}

func (r intentDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p intentDeleteMany) intentModel() {}

func (r intentDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r intentDeleteMany) Tx() IntentManyTxResult {
	v := newIntentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type chatToMembersFindUnique struct {
	query builder.Query
}

func (r chatToMembersFindUnique) getQuery() builder.Query {
	return r.query
}

func (r chatToMembersFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r chatToMembersFindUnique) with()         {}
func (r chatToMembersFindUnique) chatModel()    {}
func (r chatToMembersFindUnique) chatRelation() {}

func (r chatToMembersFindUnique) With(params ...MemberRelationWith) chatToMembersFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r chatToMembersFindUnique) Select(params ...chatPrismaFields) chatToMembersFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r chatToMembersFindUnique) Omit(params ...chatPrismaFields) chatToMembersFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range chatOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r chatToMembersFindUnique) Exec(ctx context.Context) (
	*ChatModel,
	error,
) {
	var v *ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r chatToMembersFindUnique) ExecInner(ctx context.Context) (
	*InnerChat,
	error,
) {
	var v *InnerChat
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r chatToMembersFindUnique) Update(params ...ChatSetParam) chatToMembersUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Chat"

	var v chatToMembersUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type chatToMembersUpdateUnique struct {
	query builder.Query
}

func (r chatToMembersUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r chatToMembersUpdateUnique) chatModel() {}

func (r chatToMembersUpdateUnique) Exec(ctx context.Context) (*ChatModel, error) {
	var v ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatToMembersUpdateUnique) Tx() ChatUniqueTxResult {
	v := newChatUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r chatToMembersFindUnique) Delete() chatToMembersDeleteUnique {
	var v chatToMembersDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Chat"

	return v
}

type chatToMembersDeleteUnique struct {
	query builder.Query
}

func (r chatToMembersDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p chatToMembersDeleteUnique) chatModel() {}

func (r chatToMembersDeleteUnique) Exec(ctx context.Context) (*ChatModel, error) {
	var v ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatToMembersDeleteUnique) Tx() ChatUniqueTxResult {
	v := newChatUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type chatToMembersFindFirst struct {
	query builder.Query
}

func (r chatToMembersFindFirst) getQuery() builder.Query {
	return r.query
}

func (r chatToMembersFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r chatToMembersFindFirst) with()         {}
func (r chatToMembersFindFirst) chatModel()    {}
func (r chatToMembersFindFirst) chatRelation() {}

func (r chatToMembersFindFirst) With(params ...MemberRelationWith) chatToMembersFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r chatToMembersFindFirst) Select(params ...chatPrismaFields) chatToMembersFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r chatToMembersFindFirst) Omit(params ...chatPrismaFields) chatToMembersFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range chatOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r chatToMembersFindFirst) OrderBy(params ...MemberOrderByParam) chatToMembersFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r chatToMembersFindFirst) Skip(count int) chatToMembersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r chatToMembersFindFirst) Take(count int) chatToMembersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r chatToMembersFindFirst) Cursor(cursor ChatCursorParam) chatToMembersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r chatToMembersFindFirst) Exec(ctx context.Context) (
	*ChatModel,
	error,
) {
	var v *ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r chatToMembersFindFirst) ExecInner(ctx context.Context) (
	*InnerChat,
	error,
) {
	var v *InnerChat
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type chatToMembersFindMany struct {
	query builder.Query
}

func (r chatToMembersFindMany) getQuery() builder.Query {
	return r.query
}

func (r chatToMembersFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r chatToMembersFindMany) with()         {}
func (r chatToMembersFindMany) chatModel()    {}
func (r chatToMembersFindMany) chatRelation() {}

func (r chatToMembersFindMany) With(params ...MemberRelationWith) chatToMembersFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r chatToMembersFindMany) Select(params ...chatPrismaFields) chatToMembersFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r chatToMembersFindMany) Omit(params ...chatPrismaFields) chatToMembersFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range chatOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r chatToMembersFindMany) OrderBy(params ...MemberOrderByParam) chatToMembersFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r chatToMembersFindMany) Skip(count int) chatToMembersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r chatToMembersFindMany) Take(count int) chatToMembersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r chatToMembersFindMany) Cursor(cursor ChatCursorParam) chatToMembersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r chatToMembersFindMany) Exec(ctx context.Context) (
	[]ChatModel,
	error,
) {
	var v []ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r chatToMembersFindMany) ExecInner(ctx context.Context) (
	[]InnerChat,
	error,
) {
	var v []InnerChat
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r chatToMembersFindMany) Update(params ...ChatSetParam) chatToMembersUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Chat"

	r.query.Outputs = countOutput

	var v chatToMembersUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type chatToMembersUpdateMany struct {
	query builder.Query
}

func (r chatToMembersUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r chatToMembersUpdateMany) chatModel() {}

func (r chatToMembersUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatToMembersUpdateMany) Tx() ChatManyTxResult {
	v := newChatManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r chatToMembersFindMany) Delete() chatToMembersDeleteMany {
	var v chatToMembersDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Chat"

	v.query.Outputs = countOutput

	return v
}

type chatToMembersDeleteMany struct {
	query builder.Query
}

func (r chatToMembersDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p chatToMembersDeleteMany) chatModel() {}

func (r chatToMembersDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatToMembersDeleteMany) Tx() ChatManyTxResult {
	v := newChatManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type chatFindUnique struct {
	query builder.Query
}

func (r chatFindUnique) getQuery() builder.Query {
	return r.query
}

func (r chatFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r chatFindUnique) with()         {}
func (r chatFindUnique) chatModel()    {}
func (r chatFindUnique) chatRelation() {}

func (r chatActions) FindUnique(
	params ChatEqualsUniqueWhereParam,
) chatFindUnique {
	var v chatFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Chat"
	v.query.Outputs = chatOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r chatFindUnique) With(params ...ChatRelationWith) chatFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r chatFindUnique) Select(params ...chatPrismaFields) chatFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r chatFindUnique) Omit(params ...chatPrismaFields) chatFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range chatOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r chatFindUnique) Exec(ctx context.Context) (
	*ChatModel,
	error,
) {
	var v *ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r chatFindUnique) ExecInner(ctx context.Context) (
	*InnerChat,
	error,
) {
	var v *InnerChat
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r chatFindUnique) Update(params ...ChatSetParam) chatUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Chat"

	var v chatUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type chatUpdateUnique struct {
	query builder.Query
}

func (r chatUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r chatUpdateUnique) chatModel() {}

func (r chatUpdateUnique) Exec(ctx context.Context) (*ChatModel, error) {
	var v ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatUpdateUnique) Tx() ChatUniqueTxResult {
	v := newChatUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r chatFindUnique) Delete() chatDeleteUnique {
	var v chatDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Chat"

	return v
}

type chatDeleteUnique struct {
	query builder.Query
}

func (r chatDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p chatDeleteUnique) chatModel() {}

func (r chatDeleteUnique) Exec(ctx context.Context) (*ChatModel, error) {
	var v ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatDeleteUnique) Tx() ChatUniqueTxResult {
	v := newChatUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type chatFindFirst struct {
	query builder.Query
}

func (r chatFindFirst) getQuery() builder.Query {
	return r.query
}

func (r chatFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r chatFindFirst) with()         {}
func (r chatFindFirst) chatModel()    {}
func (r chatFindFirst) chatRelation() {}

func (r chatActions) FindFirst(
	params ...ChatWhereParam,
) chatFindFirst {
	var v chatFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Chat"
	v.query.Outputs = chatOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r chatFindFirst) With(params ...ChatRelationWith) chatFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r chatFindFirst) Select(params ...chatPrismaFields) chatFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r chatFindFirst) Omit(params ...chatPrismaFields) chatFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range chatOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r chatFindFirst) OrderBy(params ...ChatOrderByParam) chatFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r chatFindFirst) Skip(count int) chatFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r chatFindFirst) Take(count int) chatFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r chatFindFirst) Cursor(cursor ChatCursorParam) chatFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r chatFindFirst) Exec(ctx context.Context) (
	*ChatModel,
	error,
) {
	var v *ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r chatFindFirst) ExecInner(ctx context.Context) (
	*InnerChat,
	error,
) {
	var v *InnerChat
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type chatFindMany struct {
	query builder.Query
}

func (r chatFindMany) getQuery() builder.Query {
	return r.query
}

func (r chatFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r chatFindMany) with()         {}
func (r chatFindMany) chatModel()    {}
func (r chatFindMany) chatRelation() {}

func (r chatActions) FindMany(
	params ...ChatWhereParam,
) chatFindMany {
	var v chatFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Chat"
	v.query.Outputs = chatOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r chatFindMany) With(params ...ChatRelationWith) chatFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r chatFindMany) Select(params ...chatPrismaFields) chatFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r chatFindMany) Omit(params ...chatPrismaFields) chatFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range chatOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r chatFindMany) OrderBy(params ...ChatOrderByParam) chatFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r chatFindMany) Skip(count int) chatFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r chatFindMany) Take(count int) chatFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r chatFindMany) Cursor(cursor ChatCursorParam) chatFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r chatFindMany) Exec(ctx context.Context) (
	[]ChatModel,
	error,
) {
	var v []ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r chatFindMany) ExecInner(ctx context.Context) (
	[]InnerChat,
	error,
) {
	var v []InnerChat
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r chatFindMany) Update(params ...ChatSetParam) chatUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Chat"

	r.query.Outputs = countOutput

	var v chatUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type chatUpdateMany struct {
	query builder.Query
}

func (r chatUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r chatUpdateMany) chatModel() {}

func (r chatUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatUpdateMany) Tx() ChatManyTxResult {
	v := newChatManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r chatFindMany) Delete() chatDeleteMany {
	var v chatDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Chat"

	v.query.Outputs = countOutput

	return v
}

type chatDeleteMany struct {
	query builder.Query
}

func (r chatDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p chatDeleteMany) chatModel() {}

func (r chatDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatDeleteMany) Tx() ChatManyTxResult {
	v := newChatManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type memberToChatFindUnique struct {
	query builder.Query
}

func (r memberToChatFindUnique) getQuery() builder.Query {
	return r.query
}

func (r memberToChatFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r memberToChatFindUnique) with()           {}
func (r memberToChatFindUnique) memberModel()    {}
func (r memberToChatFindUnique) memberRelation() {}

func (r memberToChatFindUnique) With(params ...ChatRelationWith) memberToChatFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r memberToChatFindUnique) Select(params ...memberPrismaFields) memberToChatFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r memberToChatFindUnique) Omit(params ...memberPrismaFields) memberToChatFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range memberOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r memberToChatFindUnique) Exec(ctx context.Context) (
	*MemberModel,
	error,
) {
	var v *MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r memberToChatFindUnique) ExecInner(ctx context.Context) (
	*InnerMember,
	error,
) {
	var v *InnerMember
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r memberToChatFindUnique) Update(params ...MemberSetParam) memberToChatUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Member"

	var v memberToChatUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type memberToChatUpdateUnique struct {
	query builder.Query
}

func (r memberToChatUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r memberToChatUpdateUnique) memberModel() {}

func (r memberToChatUpdateUnique) Exec(ctx context.Context) (*MemberModel, error) {
	var v MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberToChatUpdateUnique) Tx() MemberUniqueTxResult {
	v := newMemberUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r memberToChatFindUnique) Delete() memberToChatDeleteUnique {
	var v memberToChatDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Member"

	return v
}

type memberToChatDeleteUnique struct {
	query builder.Query
}

func (r memberToChatDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p memberToChatDeleteUnique) memberModel() {}

func (r memberToChatDeleteUnique) Exec(ctx context.Context) (*MemberModel, error) {
	var v MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberToChatDeleteUnique) Tx() MemberUniqueTxResult {
	v := newMemberUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type memberToChatFindFirst struct {
	query builder.Query
}

func (r memberToChatFindFirst) getQuery() builder.Query {
	return r.query
}

func (r memberToChatFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r memberToChatFindFirst) with()           {}
func (r memberToChatFindFirst) memberModel()    {}
func (r memberToChatFindFirst) memberRelation() {}

func (r memberToChatFindFirst) With(params ...ChatRelationWith) memberToChatFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r memberToChatFindFirst) Select(params ...memberPrismaFields) memberToChatFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r memberToChatFindFirst) Omit(params ...memberPrismaFields) memberToChatFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range memberOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r memberToChatFindFirst) OrderBy(params ...ChatOrderByParam) memberToChatFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r memberToChatFindFirst) Skip(count int) memberToChatFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r memberToChatFindFirst) Take(count int) memberToChatFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r memberToChatFindFirst) Cursor(cursor MemberCursorParam) memberToChatFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r memberToChatFindFirst) Exec(ctx context.Context) (
	*MemberModel,
	error,
) {
	var v *MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r memberToChatFindFirst) ExecInner(ctx context.Context) (
	*InnerMember,
	error,
) {
	var v *InnerMember
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type memberToChatFindMany struct {
	query builder.Query
}

func (r memberToChatFindMany) getQuery() builder.Query {
	return r.query
}

func (r memberToChatFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r memberToChatFindMany) with()           {}
func (r memberToChatFindMany) memberModel()    {}
func (r memberToChatFindMany) memberRelation() {}

func (r memberToChatFindMany) With(params ...ChatRelationWith) memberToChatFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r memberToChatFindMany) Select(params ...memberPrismaFields) memberToChatFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r memberToChatFindMany) Omit(params ...memberPrismaFields) memberToChatFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range memberOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r memberToChatFindMany) OrderBy(params ...ChatOrderByParam) memberToChatFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r memberToChatFindMany) Skip(count int) memberToChatFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r memberToChatFindMany) Take(count int) memberToChatFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r memberToChatFindMany) Cursor(cursor MemberCursorParam) memberToChatFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r memberToChatFindMany) Exec(ctx context.Context) (
	[]MemberModel,
	error,
) {
	var v []MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r memberToChatFindMany) ExecInner(ctx context.Context) (
	[]InnerMember,
	error,
) {
	var v []InnerMember
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r memberToChatFindMany) Update(params ...MemberSetParam) memberToChatUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Member"

	r.query.Outputs = countOutput

	var v memberToChatUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type memberToChatUpdateMany struct {
	query builder.Query
}

func (r memberToChatUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r memberToChatUpdateMany) memberModel() {}

func (r memberToChatUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberToChatUpdateMany) Tx() MemberManyTxResult {
	v := newMemberManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r memberToChatFindMany) Delete() memberToChatDeleteMany {
	var v memberToChatDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Member"

	v.query.Outputs = countOutput

	return v
}

type memberToChatDeleteMany struct {
	query builder.Query
}

func (r memberToChatDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p memberToChatDeleteMany) memberModel() {}

func (r memberToChatDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberToChatDeleteMany) Tx() MemberManyTxResult {
	v := newMemberManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type memberFindUnique struct {
	query builder.Query
}

func (r memberFindUnique) getQuery() builder.Query {
	return r.query
}

func (r memberFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r memberFindUnique) with()           {}
func (r memberFindUnique) memberModel()    {}
func (r memberFindUnique) memberRelation() {}

func (r memberActions) FindUnique(
	params MemberEqualsUniqueWhereParam,
) memberFindUnique {
	var v memberFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Member"
	v.query.Outputs = memberOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r memberFindUnique) With(params ...MemberRelationWith) memberFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r memberFindUnique) Select(params ...memberPrismaFields) memberFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r memberFindUnique) Omit(params ...memberPrismaFields) memberFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range memberOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r memberFindUnique) Exec(ctx context.Context) (
	*MemberModel,
	error,
) {
	var v *MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r memberFindUnique) ExecInner(ctx context.Context) (
	*InnerMember,
	error,
) {
	var v *InnerMember
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r memberFindUnique) Update(params ...MemberSetParam) memberUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Member"

	var v memberUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type memberUpdateUnique struct {
	query builder.Query
}

func (r memberUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r memberUpdateUnique) memberModel() {}

func (r memberUpdateUnique) Exec(ctx context.Context) (*MemberModel, error) {
	var v MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberUpdateUnique) Tx() MemberUniqueTxResult {
	v := newMemberUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r memberFindUnique) Delete() memberDeleteUnique {
	var v memberDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Member"

	return v
}

type memberDeleteUnique struct {
	query builder.Query
}

func (r memberDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p memberDeleteUnique) memberModel() {}

func (r memberDeleteUnique) Exec(ctx context.Context) (*MemberModel, error) {
	var v MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberDeleteUnique) Tx() MemberUniqueTxResult {
	v := newMemberUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type memberFindFirst struct {
	query builder.Query
}

func (r memberFindFirst) getQuery() builder.Query {
	return r.query
}

func (r memberFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r memberFindFirst) with()           {}
func (r memberFindFirst) memberModel()    {}
func (r memberFindFirst) memberRelation() {}

func (r memberActions) FindFirst(
	params ...MemberWhereParam,
) memberFindFirst {
	var v memberFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Member"
	v.query.Outputs = memberOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r memberFindFirst) With(params ...MemberRelationWith) memberFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r memberFindFirst) Select(params ...memberPrismaFields) memberFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r memberFindFirst) Omit(params ...memberPrismaFields) memberFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range memberOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r memberFindFirst) OrderBy(params ...MemberOrderByParam) memberFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r memberFindFirst) Skip(count int) memberFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r memberFindFirst) Take(count int) memberFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r memberFindFirst) Cursor(cursor MemberCursorParam) memberFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r memberFindFirst) Exec(ctx context.Context) (
	*MemberModel,
	error,
) {
	var v *MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r memberFindFirst) ExecInner(ctx context.Context) (
	*InnerMember,
	error,
) {
	var v *InnerMember
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type memberFindMany struct {
	query builder.Query
}

func (r memberFindMany) getQuery() builder.Query {
	return r.query
}

func (r memberFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r memberFindMany) with()           {}
func (r memberFindMany) memberModel()    {}
func (r memberFindMany) memberRelation() {}

func (r memberActions) FindMany(
	params ...MemberWhereParam,
) memberFindMany {
	var v memberFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Member"
	v.query.Outputs = memberOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r memberFindMany) With(params ...MemberRelationWith) memberFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r memberFindMany) Select(params ...memberPrismaFields) memberFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r memberFindMany) Omit(params ...memberPrismaFields) memberFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range memberOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r memberFindMany) OrderBy(params ...MemberOrderByParam) memberFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r memberFindMany) Skip(count int) memberFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r memberFindMany) Take(count int) memberFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r memberFindMany) Cursor(cursor MemberCursorParam) memberFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r memberFindMany) Exec(ctx context.Context) (
	[]MemberModel,
	error,
) {
	var v []MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r memberFindMany) ExecInner(ctx context.Context) (
	[]InnerMember,
	error,
) {
	var v []InnerMember
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r memberFindMany) Update(params ...MemberSetParam) memberUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Member"

	r.query.Outputs = countOutput

	var v memberUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type memberUpdateMany struct {
	query builder.Query
}

func (r memberUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r memberUpdateMany) memberModel() {}

func (r memberUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberUpdateMany) Tx() MemberManyTxResult {
	v := newMemberManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r memberFindMany) Delete() memberDeleteMany {
	var v memberDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Member"

	v.query.Outputs = countOutput

	return v
}

type memberDeleteMany struct {
	query builder.Query
}

func (r memberDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p memberDeleteMany) memberModel() {}

func (r memberDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberDeleteMany) Tx() MemberManyTxResult {
	v := newMemberManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type messageFindUnique struct {
	query builder.Query
}

func (r messageFindUnique) getQuery() builder.Query {
	return r.query
}

func (r messageFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r messageFindUnique) with()            {}
func (r messageFindUnique) messageModel()    {}
func (r messageFindUnique) messageRelation() {}

func (r messageActions) FindUnique(
	params MessageEqualsUniqueWhereParam,
) messageFindUnique {
	var v messageFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r messageFindUnique) With(params ...MessageRelationWith) messageFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageFindUnique) Select(params ...messagePrismaFields) messageFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r messageFindUnique) Omit(params ...messagePrismaFields) messageFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range messageOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r messageFindUnique) Exec(ctx context.Context) (
	*MessageModel,
	error,
) {
	var v *MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r messageFindUnique) ExecInner(ctx context.Context) (
	*InnerMessage,
	error,
) {
	var v *InnerMessage
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r messageFindUnique) Update(params ...MessageSetParam) messageUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Message"

	var v messageUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageUpdateUnique struct {
	query builder.Query
}

func (r messageUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r messageUpdateUnique) messageModel() {}

func (r messageUpdateUnique) Exec(ctx context.Context) (*MessageModel, error) {
	var v MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r messageUpdateUnique) Tx() MessageUniqueTxResult {
	v := newMessageUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r messageFindUnique) Delete() messageDeleteUnique {
	var v messageDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Message"

	return v
}

type messageDeleteUnique struct {
	query builder.Query
}

func (r messageDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p messageDeleteUnique) messageModel() {}

func (r messageDeleteUnique) Exec(ctx context.Context) (*MessageModel, error) {
	var v MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r messageDeleteUnique) Tx() MessageUniqueTxResult {
	v := newMessageUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type messageFindFirst struct {
	query builder.Query
}

func (r messageFindFirst) getQuery() builder.Query {
	return r.query
}

func (r messageFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r messageFindFirst) with()            {}
func (r messageFindFirst) messageModel()    {}
func (r messageFindFirst) messageRelation() {}

func (r messageActions) FindFirst(
	params ...MessageWhereParam,
) messageFindFirst {
	var v messageFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messageFindFirst) With(params ...MessageRelationWith) messageFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageFindFirst) Select(params ...messagePrismaFields) messageFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r messageFindFirst) Omit(params ...messagePrismaFields) messageFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range messageOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r messageFindFirst) OrderBy(params ...MessageOrderByParam) messageFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r messageFindFirst) Skip(count int) messageFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messageFindFirst) Take(count int) messageFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messageFindFirst) Cursor(cursor MessageCursorParam) messageFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messageFindFirst) Exec(ctx context.Context) (
	*MessageModel,
	error,
) {
	var v *MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r messageFindFirst) ExecInner(ctx context.Context) (
	*InnerMessage,
	error,
) {
	var v *InnerMessage
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type messageFindMany struct {
	query builder.Query
}

func (r messageFindMany) getQuery() builder.Query {
	return r.query
}

func (r messageFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r messageFindMany) with()            {}
func (r messageFindMany) messageModel()    {}
func (r messageFindMany) messageRelation() {}

func (r messageActions) FindMany(
	params ...MessageWhereParam,
) messageFindMany {
	var v messageFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messageFindMany) With(params ...MessageRelationWith) messageFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageFindMany) Select(params ...messagePrismaFields) messageFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r messageFindMany) Omit(params ...messagePrismaFields) messageFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range messageOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r messageFindMany) OrderBy(params ...MessageOrderByParam) messageFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r messageFindMany) Skip(count int) messageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messageFindMany) Take(count int) messageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messageFindMany) Cursor(cursor MessageCursorParam) messageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messageFindMany) Exec(ctx context.Context) (
	[]MessageModel,
	error,
) {
	var v []MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r messageFindMany) ExecInner(ctx context.Context) (
	[]InnerMessage,
	error,
) {
	var v []InnerMessage
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r messageFindMany) Update(params ...MessageSetParam) messageUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Message"

	r.query.Outputs = countOutput

	var v messageUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageUpdateMany struct {
	query builder.Query
}

func (r messageUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r messageUpdateMany) messageModel() {}

func (r messageUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r messageUpdateMany) Tx() MessageManyTxResult {
	v := newMessageManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r messageFindMany) Delete() messageDeleteMany {
	var v messageDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Message"

	v.query.Outputs = countOutput

	return v
}

type messageDeleteMany struct {
	query builder.Query
}

func (r messageDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p messageDeleteMany) messageModel() {}

func (r messageDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r messageDeleteMany) Tx() MessageManyTxResult {
	v := newMessageManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pointerFindUnique struct {
	query builder.Query
}

func (r pointerFindUnique) getQuery() builder.Query {
	return r.query
}

func (r pointerFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r pointerFindUnique) with()            {}
func (r pointerFindUnique) pointerModel()    {}
func (r pointerFindUnique) pointerRelation() {}

func (r pointerActions) FindUnique(
	params PointerEqualsUniqueWhereParam,
) pointerFindUnique {
	var v pointerFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Pointer"
	v.query.Outputs = pointerOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r pointerFindUnique) With(params ...PointerRelationWith) pointerFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pointerFindUnique) Select(params ...pointerPrismaFields) pointerFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pointerFindUnique) Omit(params ...pointerPrismaFields) pointerFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pointerOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pointerFindUnique) Exec(ctx context.Context) (
	*PointerModel,
	error,
) {
	var v *PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pointerFindUnique) ExecInner(ctx context.Context) (
	*InnerPointer,
	error,
) {
	var v *InnerPointer
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pointerFindUnique) Update(params ...PointerSetParam) pointerUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Pointer"

	var v pointerUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type pointerUpdateUnique struct {
	query builder.Query
}

func (r pointerUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r pointerUpdateUnique) pointerModel() {}

func (r pointerUpdateUnique) Exec(ctx context.Context) (*PointerModel, error) {
	var v PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pointerUpdateUnique) Tx() PointerUniqueTxResult {
	v := newPointerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r pointerFindUnique) Delete() pointerDeleteUnique {
	var v pointerDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Pointer"

	return v
}

type pointerDeleteUnique struct {
	query builder.Query
}

func (r pointerDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p pointerDeleteUnique) pointerModel() {}

func (r pointerDeleteUnique) Exec(ctx context.Context) (*PointerModel, error) {
	var v PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pointerDeleteUnique) Tx() PointerUniqueTxResult {
	v := newPointerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pointerFindFirst struct {
	query builder.Query
}

func (r pointerFindFirst) getQuery() builder.Query {
	return r.query
}

func (r pointerFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r pointerFindFirst) with()            {}
func (r pointerFindFirst) pointerModel()    {}
func (r pointerFindFirst) pointerRelation() {}

func (r pointerActions) FindFirst(
	params ...PointerWhereParam,
) pointerFindFirst {
	var v pointerFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Pointer"
	v.query.Outputs = pointerOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r pointerFindFirst) With(params ...PointerRelationWith) pointerFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pointerFindFirst) Select(params ...pointerPrismaFields) pointerFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pointerFindFirst) Omit(params ...pointerPrismaFields) pointerFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pointerOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pointerFindFirst) OrderBy(params ...PointerOrderByParam) pointerFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r pointerFindFirst) Skip(count int) pointerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r pointerFindFirst) Take(count int) pointerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r pointerFindFirst) Cursor(cursor PointerCursorParam) pointerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r pointerFindFirst) Exec(ctx context.Context) (
	*PointerModel,
	error,
) {
	var v *PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pointerFindFirst) ExecInner(ctx context.Context) (
	*InnerPointer,
	error,
) {
	var v *InnerPointer
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type pointerFindMany struct {
	query builder.Query
}

func (r pointerFindMany) getQuery() builder.Query {
	return r.query
}

func (r pointerFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r pointerFindMany) with()            {}
func (r pointerFindMany) pointerModel()    {}
func (r pointerFindMany) pointerRelation() {}

func (r pointerActions) FindMany(
	params ...PointerWhereParam,
) pointerFindMany {
	var v pointerFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Pointer"
	v.query.Outputs = pointerOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r pointerFindMany) With(params ...PointerRelationWith) pointerFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pointerFindMany) Select(params ...pointerPrismaFields) pointerFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pointerFindMany) Omit(params ...pointerPrismaFields) pointerFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pointerOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pointerFindMany) OrderBy(params ...PointerOrderByParam) pointerFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r pointerFindMany) Skip(count int) pointerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r pointerFindMany) Take(count int) pointerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r pointerFindMany) Cursor(cursor PointerCursorParam) pointerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r pointerFindMany) Exec(ctx context.Context) (
	[]PointerModel,
	error,
) {
	var v []PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r pointerFindMany) ExecInner(ctx context.Context) (
	[]InnerPointer,
	error,
) {
	var v []InnerPointer
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r pointerFindMany) Update(params ...PointerSetParam) pointerUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Pointer"

	r.query.Outputs = countOutput

	var v pointerUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type pointerUpdateMany struct {
	query builder.Query
}

func (r pointerUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r pointerUpdateMany) pointerModel() {}

func (r pointerUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pointerUpdateMany) Tx() PointerManyTxResult {
	v := newPointerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r pointerFindMany) Delete() pointerDeleteMany {
	var v pointerDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Pointer"

	v.query.Outputs = countOutput

	return v
}

type pointerDeleteMany struct {
	query builder.Query
}

func (r pointerDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p pointerDeleteMany) pointerModel() {}

func (r pointerDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pointerDeleteMany) Tx() PointerManyTxResult {
	v := newPointerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pushTokenFindUnique struct {
	query builder.Query
}

func (r pushTokenFindUnique) getQuery() builder.Query {
	return r.query
}

func (r pushTokenFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r pushTokenFindUnique) with()              {}
func (r pushTokenFindUnique) pushTokenModel()    {}
func (r pushTokenFindUnique) pushTokenRelation() {}

func (r pushTokenActions) FindUnique(
	params PushTokenEqualsUniqueWhereParam,
) pushTokenFindUnique {
	var v pushTokenFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "PushToken"
	v.query.Outputs = pushTokenOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r pushTokenFindUnique) With(params ...PushTokenRelationWith) pushTokenFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pushTokenFindUnique) Select(params ...pushTokenPrismaFields) pushTokenFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pushTokenFindUnique) Omit(params ...pushTokenPrismaFields) pushTokenFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pushTokenOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pushTokenFindUnique) Exec(ctx context.Context) (
	*PushTokenModel,
	error,
) {
	var v *PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pushTokenFindUnique) ExecInner(ctx context.Context) (
	*InnerPushToken,
	error,
) {
	var v *InnerPushToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pushTokenFindUnique) Update(params ...PushTokenSetParam) pushTokenUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PushToken"

	var v pushTokenUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type pushTokenUpdateUnique struct {
	query builder.Query
}

func (r pushTokenUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r pushTokenUpdateUnique) pushTokenModel() {}

func (r pushTokenUpdateUnique) Exec(ctx context.Context) (*PushTokenModel, error) {
	var v PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pushTokenUpdateUnique) Tx() PushTokenUniqueTxResult {
	v := newPushTokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r pushTokenFindUnique) Delete() pushTokenDeleteUnique {
	var v pushTokenDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PushToken"

	return v
}

type pushTokenDeleteUnique struct {
	query builder.Query
}

func (r pushTokenDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p pushTokenDeleteUnique) pushTokenModel() {}

func (r pushTokenDeleteUnique) Exec(ctx context.Context) (*PushTokenModel, error) {
	var v PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pushTokenDeleteUnique) Tx() PushTokenUniqueTxResult {
	v := newPushTokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pushTokenFindFirst struct {
	query builder.Query
}

func (r pushTokenFindFirst) getQuery() builder.Query {
	return r.query
}

func (r pushTokenFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r pushTokenFindFirst) with()              {}
func (r pushTokenFindFirst) pushTokenModel()    {}
func (r pushTokenFindFirst) pushTokenRelation() {}

func (r pushTokenActions) FindFirst(
	params ...PushTokenWhereParam,
) pushTokenFindFirst {
	var v pushTokenFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "PushToken"
	v.query.Outputs = pushTokenOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r pushTokenFindFirst) With(params ...PushTokenRelationWith) pushTokenFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pushTokenFindFirst) Select(params ...pushTokenPrismaFields) pushTokenFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pushTokenFindFirst) Omit(params ...pushTokenPrismaFields) pushTokenFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pushTokenOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pushTokenFindFirst) OrderBy(params ...PushTokenOrderByParam) pushTokenFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r pushTokenFindFirst) Skip(count int) pushTokenFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r pushTokenFindFirst) Take(count int) pushTokenFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r pushTokenFindFirst) Cursor(cursor PushTokenCursorParam) pushTokenFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r pushTokenFindFirst) Exec(ctx context.Context) (
	*PushTokenModel,
	error,
) {
	var v *PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pushTokenFindFirst) ExecInner(ctx context.Context) (
	*InnerPushToken,
	error,
) {
	var v *InnerPushToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type pushTokenFindMany struct {
	query builder.Query
}

func (r pushTokenFindMany) getQuery() builder.Query {
	return r.query
}

func (r pushTokenFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r pushTokenFindMany) with()              {}
func (r pushTokenFindMany) pushTokenModel()    {}
func (r pushTokenFindMany) pushTokenRelation() {}

func (r pushTokenActions) FindMany(
	params ...PushTokenWhereParam,
) pushTokenFindMany {
	var v pushTokenFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "PushToken"
	v.query.Outputs = pushTokenOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r pushTokenFindMany) With(params ...PushTokenRelationWith) pushTokenFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pushTokenFindMany) Select(params ...pushTokenPrismaFields) pushTokenFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pushTokenFindMany) Omit(params ...pushTokenPrismaFields) pushTokenFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pushTokenOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pushTokenFindMany) OrderBy(params ...PushTokenOrderByParam) pushTokenFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r pushTokenFindMany) Skip(count int) pushTokenFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r pushTokenFindMany) Take(count int) pushTokenFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r pushTokenFindMany) Cursor(cursor PushTokenCursorParam) pushTokenFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r pushTokenFindMany) Exec(ctx context.Context) (
	[]PushTokenModel,
	error,
) {
	var v []PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r pushTokenFindMany) ExecInner(ctx context.Context) (
	[]InnerPushToken,
	error,
) {
	var v []InnerPushToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r pushTokenFindMany) Update(params ...PushTokenSetParam) pushTokenUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PushToken"

	r.query.Outputs = countOutput

	var v pushTokenUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type pushTokenUpdateMany struct {
	query builder.Query
}

func (r pushTokenUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r pushTokenUpdateMany) pushTokenModel() {}

func (r pushTokenUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pushTokenUpdateMany) Tx() PushTokenManyTxResult {
	v := newPushTokenManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r pushTokenFindMany) Delete() pushTokenDeleteMany {
	var v pushTokenDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PushToken"

	v.query.Outputs = countOutput

	return v
}

type pushTokenDeleteMany struct {
	query builder.Query
}

func (r pushTokenDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p pushTokenDeleteMany) pushTokenModel() {}

func (r pushTokenDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pushTokenDeleteMany) Tx() PushTokenManyTxResult {
	v := newPushTokenManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPublicKeyUniqueTxResult() PublicKeyUniqueTxResult {
	return PublicKeyUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PublicKeyUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PublicKeyUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PublicKeyUniqueTxResult) IsTx() {}

func (r PublicKeyUniqueTxResult) Result() (v *PublicKeyModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPublicKeyManyTxResult() PublicKeyManyTxResult {
	return PublicKeyManyTxResult{
		result: &transaction.Result{},
	}
}

type PublicKeyManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PublicKeyManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PublicKeyManyTxResult) IsTx() {}

func (r PublicKeyManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newIntentUniqueTxResult() IntentUniqueTxResult {
	return IntentUniqueTxResult{
		result: &transaction.Result{},
	}
}

type IntentUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p IntentUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p IntentUniqueTxResult) IsTx() {}

func (r IntentUniqueTxResult) Result() (v *IntentModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newIntentManyTxResult() IntentManyTxResult {
	return IntentManyTxResult{
		result: &transaction.Result{},
	}
}

type IntentManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p IntentManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p IntentManyTxResult) IsTx() {}

func (r IntentManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newChatUniqueTxResult() ChatUniqueTxResult {
	return ChatUniqueTxResult{
		result: &transaction.Result{},
	}
}

type ChatUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p ChatUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p ChatUniqueTxResult) IsTx() {}

func (r ChatUniqueTxResult) Result() (v *ChatModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newChatManyTxResult() ChatManyTxResult {
	return ChatManyTxResult{
		result: &transaction.Result{},
	}
}

type ChatManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p ChatManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p ChatManyTxResult) IsTx() {}

func (r ChatManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newMemberUniqueTxResult() MemberUniqueTxResult {
	return MemberUniqueTxResult{
		result: &transaction.Result{},
	}
}

type MemberUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p MemberUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p MemberUniqueTxResult) IsTx() {}

func (r MemberUniqueTxResult) Result() (v *MemberModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newMemberManyTxResult() MemberManyTxResult {
	return MemberManyTxResult{
		result: &transaction.Result{},
	}
}

type MemberManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p MemberManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p MemberManyTxResult) IsTx() {}

func (r MemberManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newMessageUniqueTxResult() MessageUniqueTxResult {
	return MessageUniqueTxResult{
		result: &transaction.Result{},
	}
}

type MessageUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p MessageUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p MessageUniqueTxResult) IsTx() {}

func (r MessageUniqueTxResult) Result() (v *MessageModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newMessageManyTxResult() MessageManyTxResult {
	return MessageManyTxResult{
		result: &transaction.Result{},
	}
}

type MessageManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p MessageManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p MessageManyTxResult) IsTx() {}

func (r MessageManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPointerUniqueTxResult() PointerUniqueTxResult {
	return PointerUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PointerUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PointerUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PointerUniqueTxResult) IsTx() {}

func (r PointerUniqueTxResult) Result() (v *PointerModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPointerManyTxResult() PointerManyTxResult {
	return PointerManyTxResult{
		result: &transaction.Result{},
	}
}

type PointerManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PointerManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PointerManyTxResult) IsTx() {}

func (r PointerManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPushTokenUniqueTxResult() PushTokenUniqueTxResult {
	return PushTokenUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PushTokenUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PushTokenUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PushTokenUniqueTxResult) IsTx() {}

func (r PushTokenUniqueTxResult) Result() (v *PushTokenModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPushTokenManyTxResult() PushTokenManyTxResult {
	return PushTokenManyTxResult{
		result: &transaction.Result{},
	}
}

type PushTokenManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PushTokenManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PushTokenManyTxResult) IsTx() {}

func (r PushTokenManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_id UserWithPrismaIDSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _id.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicKeyUpsertOne struct {
	query builder.Query
}

func (r publicKeyUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r publicKeyUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r publicKeyUpsertOne) with()              {}
func (r publicKeyUpsertOne) publicKeyModel()    {}
func (r publicKeyUpsertOne) publicKeyRelation() {}

func (r publicKeyActions) UpsertOne(
	params PublicKeyEqualsUniqueWhereParam,
) publicKeyUpsertOne {
	var v publicKeyUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "PublicKey"
	v.query.Outputs = publicKeyOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r publicKeyUpsertOne) Create(

	_key PublicKeyWithPrismaKeySetParam,
	_user PublicKeyWithPrismaUserSetParam,

	optional ...PublicKeySetParam,
) publicKeyUpsertOne {
	var v publicKeyUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _key.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r publicKeyUpsertOne) Update(
	params ...PublicKeySetParam,
) publicKeyUpsertOne {
	var v publicKeyUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r publicKeyUpsertOne) Exec(ctx context.Context) (*PublicKeyModel, error) {
	var v PublicKeyModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicKeyUpsertOne) Tx() PublicKeyUniqueTxResult {
	v := newPublicKeyUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type intentUpsertOne struct {
	query builder.Query
}

func (r intentUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r intentUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r intentUpsertOne) with()           {}
func (r intentUpsertOne) intentModel()    {}
func (r intentUpsertOne) intentRelation() {}

func (r intentActions) UpsertOne(
	params IntentEqualsUniqueWhereParam,
) intentUpsertOne {
	var v intentUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Intent"
	v.query.Outputs = intentOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r intentUpsertOne) Create(

	_id IntentWithPrismaIDSetParam,
	_isFulfilled IntentWithPrismaIsFulfilledSetParam,

	optional ...IntentSetParam,
) intentUpsertOne {
	var v intentUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _id.field())
	fields = append(fields, _isFulfilled.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r intentUpsertOne) Update(
	params ...IntentSetParam,
) intentUpsertOne {
	var v intentUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r intentUpsertOne) Exec(ctx context.Context) (*IntentModel, error) {
	var v IntentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r intentUpsertOne) Tx() IntentUniqueTxResult {
	v := newIntentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type chatUpsertOne struct {
	query builder.Query
}

func (r chatUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r chatUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r chatUpsertOne) with()         {}
func (r chatUpsertOne) chatModel()    {}
func (r chatUpsertOne) chatRelation() {}

func (r chatActions) UpsertOne(
	params ChatEqualsUniqueWhereParam,
) chatUpsertOne {
	var v chatUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Chat"
	v.query.Outputs = chatOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r chatUpsertOne) Create(

	_id ChatWithPrismaIDSetParam,
	_title ChatWithPrismaTitleSetParam,

	optional ...ChatSetParam,
) chatUpsertOne {
	var v chatUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _id.field())
	fields = append(fields, _title.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r chatUpsertOne) Update(
	params ...ChatSetParam,
) chatUpsertOne {
	var v chatUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r chatUpsertOne) Exec(ctx context.Context) (*ChatModel, error) {
	var v ChatModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r chatUpsertOne) Tx() ChatUniqueTxResult {
	v := newChatUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type memberUpsertOne struct {
	query builder.Query
}

func (r memberUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r memberUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r memberUpsertOne) with()           {}
func (r memberUpsertOne) memberModel()    {}
func (r memberUpsertOne) memberRelation() {}

func (r memberActions) UpsertOne(
	params MemberEqualsUniqueWhereParam,
) memberUpsertOne {
	var v memberUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Member"
	v.query.Outputs = memberOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r memberUpsertOne) Create(

	_userID MemberWithPrismaUserIDSetParam,
	_chat MemberWithPrismaChatSetParam,

	optional ...MemberSetParam,
) memberUpsertOne {
	var v memberUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _userID.field())
	fields = append(fields, _chat.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r memberUpsertOne) Update(
	params ...MemberSetParam,
) memberUpsertOne {
	var v memberUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r memberUpsertOne) Exec(ctx context.Context) (*MemberModel, error) {
	var v MemberModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r memberUpsertOne) Tx() MemberUniqueTxResult {
	v := newMemberUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type messageUpsertOne struct {
	query builder.Query
}

func (r messageUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r messageUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r messageUpsertOne) with()            {}
func (r messageUpsertOne) messageModel()    {}
func (r messageUpsertOne) messageRelation() {}

func (r messageActions) UpsertOne(
	params MessageEqualsUniqueWhereParam,
) messageUpsertOne {
	var v messageUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r messageUpsertOne) Create(

	_id MessageWithPrismaIDSetParam,
	_chatID MessageWithPrismaChatIDSetParam,
	_content MessageWithPrismaContentSetParam,

	optional ...MessageSetParam,
) messageUpsertOne {
	var v messageUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _id.field())
	fields = append(fields, _chatID.field())
	fields = append(fields, _content.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r messageUpsertOne) Update(
	params ...MessageSetParam,
) messageUpsertOne {
	var v messageUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r messageUpsertOne) Exec(ctx context.Context) (*MessageModel, error) {
	var v MessageModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r messageUpsertOne) Tx() MessageUniqueTxResult {
	v := newMessageUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pointerUpsertOne struct {
	query builder.Query
}

func (r pointerUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r pointerUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r pointerUpsertOne) with()            {}
func (r pointerUpsertOne) pointerModel()    {}
func (r pointerUpsertOne) pointerRelation() {}

func (r pointerActions) UpsertOne(
	params PointerEqualsUniqueWhereParam,
) pointerUpsertOne {
	var v pointerUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Pointer"
	v.query.Outputs = pointerOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r pointerUpsertOne) Create(

	_chatID PointerWithPrismaChatIDSetParam,
	_userID PointerWithPrismaUserIDSetParam,
	_value PointerWithPrismaValueSetParam,

	optional ...PointerSetParam,
) pointerUpsertOne {
	var v pointerUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _chatID.field())
	fields = append(fields, _userID.field())
	fields = append(fields, _value.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r pointerUpsertOne) Update(
	params ...PointerSetParam,
) pointerUpsertOne {
	var v pointerUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r pointerUpsertOne) Exec(ctx context.Context) (*PointerModel, error) {
	var v PointerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pointerUpsertOne) Tx() PointerUniqueTxResult {
	v := newPointerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pushTokenUpsertOne struct {
	query builder.Query
}

func (r pushTokenUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r pushTokenUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r pushTokenUpsertOne) with()              {}
func (r pushTokenUpsertOne) pushTokenModel()    {}
func (r pushTokenUpsertOne) pushTokenRelation() {}

func (r pushTokenActions) UpsertOne(
	params PushTokenEqualsUniqueWhereParam,
) pushTokenUpsertOne {
	var v pushTokenUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "PushToken"
	v.query.Outputs = pushTokenOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r pushTokenUpsertOne) Create(

	_userID PushTokenWithPrismaUserIDSetParam,
	_appInstallID PushTokenWithPrismaAppInstallIDSetParam,
	_token PushTokenWithPrismaTokenSetParam,

	optional ...PushTokenSetParam,
) pushTokenUpsertOne {
	var v pushTokenUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _userID.field())
	fields = append(fields, _appInstallID.field())
	fields = append(fields, _token.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r pushTokenUpsertOne) Update(
	params ...PushTokenSetParam,
) pushTokenUpsertOne {
	var v pushTokenUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r pushTokenUpsertOne) Exec(ctx context.Context) (*PushTokenModel, error) {
	var v PushTokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pushTokenUpsertOne) Tx() PushTokenUniqueTxResult {
	v := newPushTokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
