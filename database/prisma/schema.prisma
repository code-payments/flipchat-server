datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

// Uncomment to generate Prisma Client JS (required for the studio)
// (https://github.com/steebchen/prisma-client-go/issues/455)
// generator js {
//   provider = "prisma-client-js"
// }

model User {
  // Fields

  id          String      @id
  displayName String?
  publicKeys  PublicKey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  chats   Member[] @relation("member")
  addedBy Member[] @relation("addedBy")

  @@map("flipchat_users")
}

model PublicKey {
  // Fields

  key    String @id
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  user User @relation(fields: [userId], references: [id])

  @@map("flipchat_publickeys")
}

model Intent {
  // Fields

  id          String  @id
  isFulfilled Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  // - none -

  @@map("flipchat_intents")
}

model Chat {
  // Fields

  id          String @id
  title       String
  roomNumber  Int?   @unique
  coverCharge Int    @default(0)
  type        Int    @default(0) // ChatType enum: Unknown: 0, TwoWay: 1, Group: 2

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  members Member[]

  @@map("flipchat_chats")
}

model Member {
  // Fields

  chatId    String
  userId    String
  addedById String?

  isHost    Boolean @default(false)
  numUnread Int     @default(0)
  hasMuted  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  chat    Chat @relation(fields: [chatId], references: [id])
  user    User @relation(fields: [userId], references: [id], name: "member")
  addedBy User? @relation(fields: [addedById], references: [id], name: "addedBy")

  // Constraints

  @@id([chatId, userId])

  @@map("flipchat_members")
}
