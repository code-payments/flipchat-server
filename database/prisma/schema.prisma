datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider      = "go run github.com/steebchen/prisma-client-go"
  binaryTargets = ["darwin-arm64", "linux-static-x64"]
}

// Uncomment to generate Prisma Client JS (required for the studio)
// (https://github.com/steebchen/prisma-client-go/issues/455)
// generator js {
//   provider = "prisma-client-js"
// }

model User {
  // Fields

  id           String      @id
  displayName  String?
  isStaff      Boolean     @default(false)
  isRegistered Boolean     @default(false)
  publicKeys   PublicKey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  //chats   Member[] @relation("member")
  //addedBy Member[] @relation("addedBy")

  @@map("flipchat_users")
}

model PublicKey {
  // Fields

  key    String @id
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  user User @relation(fields: [userId], references: [id])

  @@map("flipchat_publickeys")
}

model Intent {
  // Fields

  id          String  @id
  isFulfilled Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  // - none -

  @@map("flipchat_intents")
}

model Chat {
  // Fields

  id          String  @id
  displayName String?
  roomNumber  Int?    @unique
  coverCharge BigInt  @default(0)
  type        Int     @default(0) // ChatType enum: Unknown: 0, TwoWay: 1, Group: 2
  isOpen      Boolean @default(true)

  createdBy      String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastActivityAt DateTime @default(now())

  // Relations

  members Member[]

  @@map("flipchat_chats")
}

model Member {
  // Fields

  chatId    String
  userId    String
  addedById String?

  numUnread     Int     @default(0)
  isMuted       Boolean @default(false) // Has the host muted this member?
  isPushEnabled Boolean @default(true) // Are push notifications enabled for this member?

  hasModPermission  Boolean @default(false) // Is this member a moderator (aka host)?
  hasSendPermission Boolean @default(false) // Can this member send messages?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  chat Chat @relation(fields: [chatId], references: [id])

  //user    User @relation(fields: [userId], references: [id], name: "member")
  //addedBy User? @relation(fields: [addedById], references: [id], name: "addedBy")

  // Constraints

  @@id([chatId, userId])
  @@map("flipchat_members")
}

model Message {
  // Fields

  id       Bytes   @id
  chatId   String
  senderId String?

  version     Int   @default(0) @db.SmallInt // MessageVersion enum: Message: 0, Content: 1
  contentType Int   @default(0) @db.SmallInt // ContentType enum: Unknown: 0, Text: 1, LocalizedAnnouncement: 2, NaclBoxEncryptedContent: 4, ReactionContent: 5, ReplyContent: 6
  content     Bytes // protobuf serialized opaque data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  // Constraints

  @@map("flipchat_messages")
}

model Pointer {
  // Fields

  chatId String
  userId String
  type   Int    @default(0) // PointerType enum: Unknown: 0, Sent: 1, Delivered: 2, Read: 3

  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  // Constraints

  @@id([chatId, userId, type])
  @@map("flipchat_pointers")
}

model PushToken {
  // Fields

  userId       String
  appInstallId String

  token String
  type  Int    @default(0) // PushTokenType enum: Unknown: 0, FCMAndroid: 1, FCMApns: 2

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  // Constraints

  @@id([userId, appInstallId])
  @@map("flipchat_pushtokens")
}

model Iap {
  // Fields

  receiptId String @id
  platform  Int    @default(0) @db.SmallInt // Platform enum: Unknown: 0, Apple: 1, Google: 2
  userId    String
  product   Int    @default(0) @db.SmallInt // Product enum: Unknown: 0, CreateAccount: 1
  state     Int    @default(0) @db.SmallInt // State enum: Unknown: 0, WaitingForPayment: 1, WaitingForFulfillment: 2, Fulfilled: 3

  createdAt DateTime @default(now())

  // Relations

  // Constraints

  @@map("flipchat_iap")
}
